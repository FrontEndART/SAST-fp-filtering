"""
    This module searches for fixes in reports generated by Spotbugs.
"""

import subprocess
import os
import re
import sys
import Parser
import Logger
import main
import shlex
from os import listdir
import threading
from Decorator import printOutput

threadsData = {}
stdPrint = printOutput(print)


def parseAndCheckReports(allReports, reports_directory_path, repository_path, repo_link, commit, build_file_list, git_dir, warningIDs, entryIDs, timestamp, is_logged=True):
    """
    Parsing XML to a list with the parse_xml funtion, then searching for fixes
    :param allReports: The path where the folder is which contains all the reports made during the runs
    :param reports_directory_path: The path where the XML files are
    :param repository_path: The path of the repo we are working with
    :param repo_link: The link of the github repository
    :param commit: The commit we are in
    :param build_file_list: The jar, war, ear, zip files generated by Maven
    :param git_dir: The git directory
    :param warningIDs: The warning IDs
    :param entryIDs: The current entry IDs
    :param timestamp: Timestamp with current time
    :param islogged: Boolean which shows if the reports are logged
    :return: The number of fixes found
    """
    try:
        fix_in_commit = 0
        reports = listdir(reports_directory_path)
        if len(reports) == 1:
            fix_in_commit = -1
        new_report = ""
        for report in reports:
            if str(commit) in str(report):
                new_report = report
                break
        threadsData[getCurrentThread()]["newCommitParsed"]["commit_id"] = str(commit)
        warnings = []
        if new_report:
            warnings = Parser.parse_xml(
                reports_directory_path + new_report, repository_path, warningIDs)
        threadsData[getCurrentThread()]["newCommitParsed"]["warnings"] = []
        for warning in warnings:
            threadsData[getCurrentThread()]["newCommitParsed"]["warnings"].append(identifyWarning(warning["file"], str(
                commit), repository_path, warning["location"].split("-")[0], warning["location"].split("-")[1], warning["warning_id"]))
        diffOfCommits()
        if not (len(threadsData[getCurrentThread()]["originCommitParsed"]["warnings"]) == 0):
            for warning in threadsData[getCurrentThread()]["originCommitParsed"]["warnings"]:
                modified_lines = gitDiff(threadsData[getCurrentThread()]["originCommitParsed"]["commit_id"], threadsData[getCurrentThread()]["newCommitParsed"]["commit_id"], warning["new_location"]
                                         ["file"], warning["new_location"]["startLineNumber"], warning["new_location"]["endLineNumber"], repository_path)
                if modified_lines:
                    fix = True
                    for new_warning in threadsData[getCurrentThread()]["newCommitParsed"]["warnings"]:
                        if new_warning["new_location"]["file"] == warning["new_location"]["file"] and int(new_warning["new_location"]["startLineNumber"]) >= int(modified_lines[0]) and int(new_warning["new_location"]["endLineNumber"]) <= int(modified_lines[-1]):
                            fix = False
                            break
                    if fix:
                        threadsData[getCurrentThread()]["projectFixes"].append(warning["origin_location"])
                        new_location = str(modified_lines[0]) + "-" + str(modified_lines[-1])
                        stdPrint(threadsData[getCurrentThread()]["newCommitParsed"]["commit_id"] + " " + warning["new_location"]["file"] +
                              ": " + new_location + " is a FIX")
                        threadsData[getCurrentThread()]["fixes"].append(
                            {"commit": threadsData[getCurrentThread()]["newCommitParsed"]["commit_id"], "file": warning["new_location"]["file"], "location": new_location})
                        json = allReports + "/dataset" + str(timestamp) + "/" + warning["warning_name"] + "/description.json"  
                        Logger.add_fix(json, git_dir, repository_path.split(os.path.sep)[-1], repo_link, warning["warning_name"], threadsData[getCurrentThread()]["originCommitParsed"]["commit_id"], warning["new_location"]["file"], str(
                            warning["new_location"]["startLineNumber"]) + "-" + str(warning["new_location"]["endLineNumber"]), threadsData[getCurrentThread()]["newCommitParsed"]["commit_id"], warning["new_location"]["file"], new_location, repository_path, warningIDs, entryIDs)
                        fix_in_commit += 1
        threadsData[getCurrentThread()]["originCommitParsed"] = threadsData[getCurrentThread()]["newCommitParsed"].copy()
        threadsData[getCurrentThread()]["originCommitParsed"]["warnings"] = threadsData[getCurrentThread()]["newCommitParsed"]["warnings"].copy()
        if is_logged:
            if fix_in_commit == -1:
                Logger.add_commit(str(commit), build_file_list, "successful",
                            "", "")
            elif fix_in_commit != 0:
                Logger.add_commit(str(commit), build_file_list, "successful",
                            "", "Tracker found " + str(fix_in_commit) + " fixes")
            else:
                Logger.add_commit(str(commit), build_file_list, "successful",
                            "", "Tracker didn't find any fixes")
        return fix_in_commit
    except Exception as e:
        print(str(e) + " on line " + str(sys.exc_info()[-1].tb_lineno))
        stdPrint("Tracker failed")
        Logger.add_commit(str(commit), build_file_list, "successful",
                   "", "Tracker failed: " + str(e) + " on line " + str(sys.exc_info()[-1].tb_lineno))


def newProject(threadCount):
    """
    Deleting every data from another repo before the first fix searching
    :param threadCount: The thread number
    """
    global threadsData
    if str(threadCount) in threadsData:
        threadsData[str(threadCount)]["newCommitParsed"] = {"commit_id": "", "warnings": []}
        threadsData[str(threadCount)]["originCommitParsed"] = {"commit_id": "", "warnings": []}
        threadsData[str(threadCount)]["projectFixes"] = []
        threadsData[str(threadCount)]["fixes"] = []
    else:
        threadsData[str(threadCount)] = {"newCommitParsed": {"commit_id": "", "warnings": [
        ]}, "originCommitParsed": {"commit_id": "", "warnings": []}, "projectFixes": [], "fixes": []}

def getCurrentThread():
    """
    Returning the current thread
    :return: The current thread
    """
    return threading.currentThread().name

def gitDiff(origin_commit, new_commit, relative_file_path, startLine, endLine, repo_path):
    """
    Check the lines of a warning, and returns the lines that were modified in another commit there
    :param origin_commit: The commit where the warning is
    :param new_commit: The commit where the lines were modified
    :param relative_file_path: The file path where lines could be modified
    :param startLine: Start line of the warning
    :param endLine: End line of the warning
    :param repo_path: The path of the repo we are working with
    :return: The modified lines
    """
    if main.opsys == "Windows":
        p = subprocess.Popen(
            [
                "git",
                "--git-dir=" + repo_path + "/.git",
                "--work-tree=" + repo_path,
                "diff",
                str(origin_commit),
                str(new_commit),
                repo_path + os.path.sep + relative_file_path,
            ],
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    else:
        p = subprocess.Popen(
                shlex.split(
                    "git --git-dir=" + repo_path + "/.git --work-tree=" + repo_path + " diff " + str(origin_commit) +
                    " " + str(new_commit) + " " + repo_path + os.path.sep + relative_file_path
                ),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
    stdout, stderr = p.communicate()
    if p.returncode == 0:
        output = str(stdout).split("\\n")
        origin_line_number, new_line_number, diff = 0, 0, 0
        deletion_lines, modified_lines = [], []
        insertion, deletion = 0, 0
        for line in output:
            if line.startswith("@@"):
                insertion, deletion = 0, 0
                line_numbers = line.split("@@")[1].split(" ")
                origin_line_number = int(
                    re.split(",|-", line_numbers[1])[1]) - 1
                new_line_number = int(line_numbers[2].split(",")[0][1:]) - 1
                diff = new_line_number - origin_line_number
            else:
                if not line.startswith("+"):
                    origin_line_number += 1
                if not line.startswith("-"):
                    new_line_number += 1
                if line.startswith("+"):
                    insertion += 1
                if line.startswith("-"):
                    deletion += 1
                if origin_line_number >= int(startLine) and origin_line_number <= int(endLine) and line.startswith("-"):
                    deletion_lines.append(origin_line_number)
                if (new_line_number - (diff + (insertion - deletion))) in deletion_lines and line.startswith("+"):
                    modified_lines.append(new_line_number)

        if len(modified_lines) > 0:
            return modified_lines
        return False
    else:
        return False


def diffOfCommits():
    """
    Removing the warnings from the list, which were definitely not fixed.
    """
    for warning_new in threadsData[getCurrentThread()]["newCommitParsed"]["warnings"]:
        for warning_old in threadsData[getCurrentThread()]["originCommitParsed"]["warnings"]:
            if warning_old["origin_location"] == warning_new["origin_location"] or warning_old["origin_location"] in threadsData[getCurrentThread()]["projectFixes"]:
                threadsData[getCurrentThread()]["originCommitParsed"]["warnings"].remove(warning_old)
                break


def identifyWarning(fileName, commit, repository_path, startLineNumber, endLineNumber, warning_name):
    """
    Identifying a warning, finding out where it originated
    :param fileName: The file where the warning is
    :param commit: The commit we are in
    :param repository_path: The path of the repo we are working with
    :param startLineNumber: The start line of the warning
    :param endLineNumber: The end line of the warning
    :param warning_name: The name of the warning
    :return: The warning with the original location
    """
    try:
        warning_id = {
            "origin_location": {
                "commit_id": commit,
                "file": fileName,
                "startLineNumber": startLineNumber,
                "endLineNumber": endLineNumber
            },
            "new_location": {
                "file": fileName,
                "startLineNumber": startLineNumber,
                "endLineNumber": endLineNumber
            },
            "warning_name": warning_name
        }

        outputPath = os.path.join(os.path.dirname(__file__), "blame_output" + getCurrentThread() + ".txt")
        f = open(outputPath, "w")
        subprocess.call(
            ["git", "--no-pager", "blame", "-M", "-n", "-s", commit, fileName],
            cwd=repository_path,
            stdout=f,
        )
        f.close()

        locatedLines = []
        with open(outputPath) as blameOutput:
            blameLines = blameOutput.readlines()
            for line in blameLines:
                try:
                    line = re.sub(" +", " ", line)
                    columns = line.split(" ")
                    new_line_num = (columns[3])[:-1]
                    if columns[1].isnumeric():
                        new_line_num = (columns[2])[:-1]
                    if (
                        int(new_line_num) >= int(startLineNumber)
                        and int(new_line_num) <= int(endLineNumber)
                    ):
                        locatedLines.append(line)
                except Exception as e:
                    print(str(sys.exc_info()[-1].tb_lineno))
                    print("Wrong blameoutput file format: ", e)
                    continue


            if len(locatedLines) > 0:
                origin_line_location_start = 2
                origin_line_location_end = 2
                if locatedLines[0].split(" ")[1].isnumeric():
                    origin_line_location_start = 1
                if locatedLines[0].split(" ")[1].isnumeric():
                    origin_line_location_end = 1
                else:
                    warning_id["origin_location"]["file"] = (
                        locatedLines[0].split(" ")[1])
                startLine = locatedLines[0].split(" ")[origin_line_location_start]
                endLine = locatedLines[len(locatedLines) - 1].split(" ")[origin_line_location_end]
                warning_id["origin_location"]["startLineNumber"] = int(startLine)
                warning_id["origin_location"]["endLineNumber"] = int(endLine)
                warning_id["origin_location"]["commit_id"] = locatedLines[0].split(" ")[
                    0]
            else:
                for old_warning in threadsData[getCurrentThread()]["originCommitParsed"]["warnings"]:
                    if (warning_id["new_location"] == old_warning["new_location"] and warning_id["warning_name"] == old_warning["warning_name"]):
                        warning_id["origin_location"] = old_warning["origin_location"].copy()
        return warning_id  
    except Exception as e:
        print(str(sys.exc_info()[-1].tb_lineno))
        print(str(e))  
