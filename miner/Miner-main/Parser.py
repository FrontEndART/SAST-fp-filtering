"""
    This module parses XML files generated by Spotbugs to a list of warnings we need.
"""

import xml.etree.ElementTree as ET
import os
from os.path import exists

def parse_xml(report, repository_path, warningIDs):
    """
    Parsing XML to a list of warnings
    :param report: The XML file generated by Spotbugs
    :param repository_path: The path of the repo we are working with
    :param warningIDs: The warning IDs
    :return: The list of warnings
    """
    warnings = []
    if not os.path.isfile(report):
        return warnings
    if (not report.endswith(".xml")) or os.stat(report).st_size == 0:
        return warnings
    tree = ET.parse(report)
    root = tree.getroot()

    for bugInstance in root.findall("BugInstance"):
        warningType = bugInstance.get("type")
        if warningType in warningIDs:
            sourcePath = bugInstance.find("Class").find("SourceLine").get("sourcepath")
            if sourcePath is not None:
                filePath = (
                        "src/main/java/"
                        + sourcePath
                )
                sourceLine = bugInstance.findall("SourceLine")
                if sourceLine is not None and find_file(filePath, repository_path):
                    for source in sourceLine:
                        start = source.get("start")
                        end = source.get("end")
                        if start is not None and end is not None:
                            fileLines = (
                                    start
                                    + "-"
                                    + end
                            )
                            warning = {"warning_id": warningType, "file": filePath, "location": fileLines}
                            warnings.append(warning)
    return warnings

def find_file(fPath, path):
    """
    Trying to find the file with a part of the path in the repo directory
    :param fPath: The file with a part of the path
    :param path: The repo directory path
    :return: if the file exists with the path or not
    """
    filePath = fPath.split("/")
    found = False
    for root, dirs, files in os.walk(path):
        if filePath[0] in dirs and not found:
            fPath = root + "/" + fPath
            found = True
            break
    if found:
        return exists(fPath)
    return False