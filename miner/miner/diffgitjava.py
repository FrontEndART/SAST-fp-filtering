#!/usr/bin/env python3

import argparse
import json
import os
import sys
from datetime import date
from io import StringIO
from math import ceil
from pathlib import Path

from alive_progress import alive_it
from git import Repo
from loguru import logger
from unidiff import PatchSet

DEFAULT_CHUNK_SIZE = 10

logger.remove(0)
logger.add(sys.stderr, format="<green>{time:YYYY.MM.DD. HH:mm:ss}</green> <bold>[{level}]</bold>: {message}",
           colorize=True)

parser = argparse.ArgumentParser(
    prog="DiffTool", description="Diff tool to create input for VFDetector"
)

parser.add_argument("--local-repository", required=True, nargs=1, type=Path)
parser.add_argument("--output-dir", required=True, nargs=1, type=Path)
parser.add_argument("--since", required=False, nargs="?", type=date.fromisoformat)
parser.add_argument("--until", required=False, nargs="?", type=date.fromisoformat)
parser.add_argument(
    "--chunk-size",
    required=False,
    nargs="?",
    type=int,
    default=DEFAULT_CHUNK_SIZE,
)

# Parsing arguments
args = parser.parse_args()

local_repository = args.local_repository[0]
output_dir = args.output_dir[0]
since = args.since if "since" in args else None
until = args.until if "until" in args else None
chunk_size = (
    args.chunk_size
    if "chunk_size" in args and args.chunk_size > 0
    else DEFAULT_CHUNK_SIZE
)

if not os.path.exists(local_repository):
    logger.error(f"Local repository {local_repository} does not exist.")
    exit(1)

if not os.path.exists(output_dir):
    logger.error(f"Directory {output_dir} does not exist.")
    exit(1)

repo = Repo(local_repository)

commits = list(
    repo.iter_commits(repo.head.name, reverse=True, since=since, until=until)
)

commit_changes = []

bar = alive_it(range(len(commits) - 1), title="Searching for relevant diff data", bar="classic")
for i in bar:
    previous_commit = commits[i]
    new_commit = commits[i + 1]

    diff = repo.git.diff(previous_commit, new_commit, "***.java", unified=0)

    if not diff:
        continue

    patch_set = PatchSet(StringIO(diff))

    patches = []
    for patch_file in patch_set:
        for hunk in patch_file:
            patches.append(str(hunk))

    result = {
        "id": new_commit.hexsha,
        "message": new_commit.message,
        "patch": "\n".join(patches),
    }
    commit_changes.append(result)

if not commit_changes:
    logger.warning("No relevant diff data was found. No output was generated by Java diff finder.")
    exit()

logger.info(
    f"Found {len(commit_changes)} commit{'s' if len(commit_changes) > 1 else ''} with relevant diff data."
)

num_of_chunks = ceil(len(commit_changes) / chunk_size)
for i in alive_it(range(num_of_chunks), title="Exporting diff data", bar="classic"):
    chunk = commit_changes[i * chunk_size: (i + 1) * chunk_size]
    filename = f'code_change_{chunk[0]["id"][:7]}_{chunk[-1]["id"][:7]}.json'
    with open(
            os.path.join(output_dir, filename),
            "w",
            encoding="utf-8",
    ) as output:
        json.dump(chunk, output)
