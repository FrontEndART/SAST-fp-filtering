[{"id": "62ea800f79805b0dff417ff8bd8a08cab65d9063", "message": "refactor jobmanager\n", "patch": ["--- /dev/null", "@@ -0,0 +1,33 @@\n+package io.dropwizard.jobs;\n+\n+import org.apache.commons.text.WordUtils;\n+\n+import io.dropwizard.jobs.annotations.Every;\n+import io.dropwizard.jobs.annotations.On;\n+\n+abstract class AnnotationReader {\n+\n+    static String readDurationFromConfig(On annotation, Class<? extends org.quartz.Job> clazz, JobConfiguration configuration) {\n+        if (configuration == null) {\n+            return null;\n+        } else {\n+            String property = WordUtils.uncapitalize(clazz.getSimpleName());\n+            if (!annotation.value().isEmpty()) {\n+                property = annotation.value().substring(2, annotation.value().length() - 1);\n+            }\n+            return configuration.getJobs().getOrDefault(property, null);\n+        }\n+    }\n+\n+    static String readDurationFromConfig(Every annotation, Class<? extends org.quartz.Job> clazz, JobConfiguration configuration) {\n+        if (configuration == null) {\n+            return null;\n+        }\n+        String property = WordUtils.uncapitalize(clazz.getSimpleName());\n+        if (!annotation.value().isEmpty()) {\n+            property = annotation.value().substring(2, annotation.value().length() - 1);\n+        }\n+        return configuration.getJobs().getOrDefault(property, null);\n+    }\n+\n+}", "@@ -7 +6,0 @@ import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.text.WordUtils;", "@@ -22,0 +22,3 @@ import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.dropwizard.jobs.AnnotationReader.readDurationFromConfig;", "@@ -74,2 +76,4 @@ public class JobManager implements Managed {\n-        scheduleAllJobsWithEveryAnnotation();\n-        scheduleAllJobsWithOnAnnotation();\n+        allJobsWithEveryAnnotation()\n+                .forEach(this::scheduleOrRescheduleJob);\n+        allJobsWithOnAnnotation()\n+                .forEach(this::scheduleOrRescheduleJob);", "@@ -80,6 +84,6 @@ public class JobManager implements Managed {\n-            .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStop.class))\n-            .map(job -> JobBuilder\n-                .newJob(job.getClass())\n-                .withIdentity(job.getClass().getName(), job.getGroupName())\n-                .build())\n-            .collect(Collectors.toList());\n+                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStop.class))\n+                .map(job -> JobBuilder\n+                        .newJob(job.getClass())\n+                        .withIdentity(job.getClass().getName(), job.getGroupName())\n+                        .build())\n+                .collect(Collectors.toList());", "@@ -93,2 +97,3 @@ public class JobManager implements Managed {\n-     * @param cronExpr  the modified cron format\n-     * @return  the cron schedule with the timezone applied to it if needed\n+     * \n+     * @param cronExpr the modified cron format\n+     * @return the cron schedule with the timezone applied to it if needed", "@@ -101 +106 @@ public class JobManager implements Managed {\n-            timezone = TimeZone.getTimeZone(cronExpr.substring(i+1, j));\n+            timezone = TimeZone.getTimeZone(cronExpr.substring(i + 1, j));", "@@ -107,51 +112,43 @@ public class JobManager implements Managed {\n-    protected void scheduleAllJobsWithOnAnnotation() throws SchedulerException {\n-        List<Job> onJobs = Arrays.stream(this.jobs)\n-            .filter(job -> job.getClass().isAnnotationPresent(On.class))\n-            .collect(Collectors.toList());\n-\n-        if (onJobs.isEmpty()) {\n-            return;\n-        }\n-\n-        log.info(\"Jobs with @On annotation:\");\n-        for (Job job : onJobs) {\n-            Class<? extends Job> clazz = job.getClass();\n-            On onAnnotation = clazz.getAnnotation(On.class);\n-            String cron = onAnnotation.value();\n-\n-            if(cron.isEmpty() || cron.matches(\"\\\\$\\\\{.*\\\\}\")) {\n-                cron = this.readDurationFromConfig(onAnnotation, clazz);\n-                if (cron == null) {\n-                    throw new SchedulerConfigException(\"Missing config for \" + clazz.getSimpleName());\n-                }\n-                log.info(clazz + \" is configured in the config file to run every \" + cron);\n-            }\n-\n-            int priority = onAnnotation.priority();\n-            On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();\n-            boolean requestRecovery = onAnnotation.requestRecovery();\n-            boolean storeDurably = onAnnotation.storeDurably();\n-\n-            CronScheduleBuilder scheduleBuilder = createCronScheduleBuilder(cron);\n-\n-            String timeZoneStr = onAnnotation.timeZone();\n-            if (StringUtils.isNotBlank(timeZoneStr)) {\n-                TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n-                scheduleBuilder = scheduleBuilder.inTimeZone(timeZone);\n-            }\n-\n-            if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n-                scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-            else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n-                scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n-            else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n-                scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n-\n-            Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder).withPriority(priority).build();\n-\n-            // ensure that only one instance of each job is scheduled\n-            JobKey jobKey = createJobKey(onAnnotation.jobName(), job);\n-\n-            createOrUpdateJob(jobKey, clazz, trigger, requestRecovery, storeDurably);\n-            log.info(String.format(\"    %-21s %s\", cron, jobKey.toString()));\n-        }\n+    protected Stream<ScheduledJob> allJobsWithOnAnnotation() {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(On.class))\n+                .map(job -> {\n+\n+                    Class<? extends Job> clazz = job.getClass();\n+                    On onAnnotation = clazz.getAnnotation(On.class);\n+                    String cron = onAnnotation.value();\n+\n+                    if (cron.isEmpty() || cron.matches(\"\\\\$\\\\{.*\\\\}\")) {\n+                        cron = readDurationFromConfig(onAnnotation, clazz, configuration);\n+                        log.info(clazz + \" is configured in the config file to run every \" + cron);\n+                    }\n+\n+                    int priority = onAnnotation.priority();\n+                    On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();\n+                    boolean requestRecovery = onAnnotation.requestRecovery();\n+                    boolean storeDurably = onAnnotation.storeDurably();\n+\n+                    CronScheduleBuilder scheduleBuilder = createCronScheduleBuilder(cron);\n+\n+                    String timeZoneStr = onAnnotation.timeZone();\n+                    if (StringUtils.isNotBlank(timeZoneStr)) {\n+                        TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n+                        scheduleBuilder = scheduleBuilder.inTimeZone(timeZone);\n+                    }\n+\n+                    if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n+                        scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+                    else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n+                        scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n+                    else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n+                        scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n+\n+                    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder).withPriority(priority).build();\n+\n+                    // ensure that only one instance of each job is scheduled\n+                    JobKey jobKey = createJobKey(onAnnotation.jobName(), job);\n+\n+                    String message = String.format(\"    %-21s %s\", cron, jobKey.toString());\n+                    ScheduledJob scheduledJob = new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n+                    return scheduledJob;\n+                });", "@@ -165,92 +162,64 @@ public class JobManager implements Managed {\n-    protected void scheduleAllJobsWithEveryAnnotation() throws SchedulerException {\n-        List<Job> everyJobs = Arrays.stream(this.jobs)\n-            .filter(job -> job.getClass().isAnnotationPresent(Every.class))\n-            .collect(Collectors.toList());\n-\n-        if (everyJobs.isEmpty()) {\n-            return;\n-        }\n-\n-        log.info(\"Jobs with @Every annotation:\");\n-        for (Job job : everyJobs) {\n-            Class<? extends Job> clazz = job.getClass();\n-            Every everyAnnotation = clazz.getAnnotation(Every.class);\n-            int priority = everyAnnotation.priority();\n-            Every.MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();\n-            boolean requestRecovery = everyAnnotation.requestRecovery();\n-            boolean storeDurably = everyAnnotation.storeDurably();\n-            int repeatCount = everyAnnotation.repeatCount();\n-\n-            String value = everyAnnotation.value();\n-            if (value.isEmpty() || value.matches(\"\\\\$\\\\{.*\\\\}\")) {\n-                value = readDurationFromConfig(everyAnnotation, clazz);\n-                log.info(clazz + \" is configured in the config file to run every \" + value);\n-            }\n-            long milliSeconds = TimeParserUtil.parseDuration(value);\n-\n-            SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()\n-                    .withIntervalInMilliseconds(milliSeconds);\n-\n-            if (repeatCount > -1)\n-                scheduleBuilder.withRepeatCount(repeatCount);\n-            else\n-                scheduleBuilder.repeatForever();\n-\n-            if (misfirePolicy == Every.MisfirePolicy.IGNORE_MISFIRES)\n-                scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-            else if (misfirePolicy == Every.MisfirePolicy.FIRE_NOW)\n-                scheduleBuilder.withMisfireHandlingInstructionFireNow();\n-            else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_EXISTING_COUNT)\n-                scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n-            else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_REMAINING_COUNT)\n-                scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n-            else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_EXISTING_COUNT)\n-                scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n-            else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_REMAINING_COUNT)\n-                scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n-\n-            Instant start = Instant.now();\n-            DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n-            if (delayAnnotation != null) {\n-                long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n-                start = start.plusMillis(milliSecondDelay);\n-            }\n-\n-            Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder)\n-                    .startAt(Date.from(start))\n-                    .withPriority(priority)\n-                    .build();\n-\n-            // ensure that only one instance of each job is scheduled\n-            JobKey jobKey = createJobKey(everyAnnotation.jobName(), job);\n-            createOrUpdateJob(jobKey, clazz, trigger, requestRecovery, storeDurably);\n-\n-            String logMessage = String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString());\n-            if (delayAnnotation != null) {\n-                logMessage += \" (\" + delayAnnotation.value() + \" delay)\";\n-            }\n-            log.info(logMessage);\n-        }\n-    }\n-\n-    private String readDurationFromConfig(On annotation, Class<? extends org.quartz.Job> clazz) {\n-        if(this.configuration == null) {\n-            return null;\n-        } else {\n-            String property = WordUtils.uncapitalize(clazz.getSimpleName());\n-            if(!annotation.value().isEmpty()) {\n-                property = annotation.value().substring(2, annotation.value().length() - 1);\n-            }\n-            return (String)this.configuration.getJobs().getOrDefault(property,  null);\n-        }\n-    }\n-\n-    private String readDurationFromConfig(Every annotation, Class<? extends org.quartz.Job> clazz) {\n-        if (configuration == null) {\n-            return null;\n-        }\n-        String property = WordUtils.uncapitalize(clazz.getSimpleName());\n-        if (!annotation.value().isEmpty()) {\n-            property = annotation.value().substring(2, annotation.value().length() - 1);\n-        }\n-        return configuration.getJobs().getOrDefault(property, null);\n+    protected Stream<ScheduledJob> allJobsWithEveryAnnotation() {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(Every.class))\n+                .map(job -> {\n+                    Class<? extends Job> clazz = job.getClass();\n+                    Every everyAnnotation = clazz.getAnnotation(Every.class);\n+                    int priority = everyAnnotation.priority();\n+                    Every.MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();\n+                    boolean requestRecovery = everyAnnotation.requestRecovery();\n+                    boolean storeDurably = everyAnnotation.storeDurably();\n+                    int repeatCount = everyAnnotation.repeatCount();\n+\n+                    String value = everyAnnotation.value();\n+                    if (value.isEmpty() || value.matches(\"\\\\$\\\\{.*\\\\}\")) {\n+                        value = readDurationFromConfig(everyAnnotation, clazz, configuration);\n+                        log.info(clazz + \" is configured in the config file to run every \" + value);\n+                    }\n+                    long milliSeconds = TimeParserUtil.parseDuration(value);\n+\n+                    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()\n+                            .withIntervalInMilliseconds(milliSeconds);\n+\n+                    if (repeatCount > -1)\n+                        scheduleBuilder.withRepeatCount(repeatCount);\n+                    else\n+                        scheduleBuilder.repeatForever();\n+\n+                    if (misfirePolicy == Every.MisfirePolicy.IGNORE_MISFIRES)\n+                        scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+                    else if (misfirePolicy == Every.MisfirePolicy.FIRE_NOW)\n+                        scheduleBuilder.withMisfireHandlingInstructionFireNow();\n+                    else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_EXISTING_COUNT)\n+                        scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n+                    else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_REMAINING_COUNT)\n+                        scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n+                    else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_EXISTING_COUNT)\n+                        scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n+                    else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_REMAINING_COUNT)\n+                        scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n+\n+                    Instant start = Instant.now();\n+                    DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n+                    if (delayAnnotation != null) {\n+                        long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n+                        start = start.plusMillis(milliSecondDelay);\n+                    }\n+\n+                    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder)\n+                            .startAt(Date.from(start))\n+                            .withPriority(priority)\n+                            .build();\n+\n+                    // ensure that only one instance of each job is scheduled\n+                    JobKey jobKey = createJobKey(everyAnnotation.jobName(), job);\n+\n+                    StringBuilder sb = new StringBuilder();\n+                    sb.append(String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString()));\n+                    if (delayAnnotation != null) {\n+                        sb.append(\" (\").append(delayAnnotation.value()).append(\" delay)\");\n+                    }\n+                    String message = sb.toString();\n+\n+                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n+                });", "@@ -261,6 +230,6 @@ public class JobManager implements Managed {\n-            .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStart.class))\n-            .map(job -> JobBuilder\n-                .newJob(job.getClass())\n-                .withIdentity(job.getClass().getName(), job.getGroupName())\n-                .build())\n-            .collect(Collectors.toList());\n+                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStart.class))\n+                .map(job -> JobBuilder\n+                        .newJob(job.getClass())\n+                        .withIdentity(job.getClass().getName(), job.getGroupName())\n+                        .build())\n+                .collect(Collectors.toList());", "@@ -307,4 +276,13 @@ public class JobManager implements Managed {\n-    private void createOrUpdateJob(JobKey jobKey, Class<? extends org.quartz.Job> clazz, Trigger trigger, boolean requestsRecovery,\n-            boolean storeDurably) throws SchedulerException {\n-        JobBuilder jobBuilder = JobBuilder.newJob(clazz).withIdentity(jobKey).requestRecovery(requestsRecovery)\n-                .storeDurably(storeDurably);\n+    private void scheduleOrRescheduleJob(ScheduledJob job) {\n+        JobBuilder jobBuilder = JobBuilder.newJob(job.getClazz())\n+                .withIdentity(job.getJobKey())\n+                .requestRecovery(job.isRequestsRecovery())\n+                .storeDurably(job.isStoreDurably());\n+\n+        boolean exists = false;\n+        try {\n+            exists = scheduler.checkExists(job.getJobKey());\n+        } catch (SchedulerException e) {\n+            log.error(\"error occured checking the job \" + job.getJobKey().toString(), e);\n+            return;\n+        }", "@@ -312 +290 @@ public class JobManager implements Managed {\n-        if (!scheduler.checkExists(jobKey)) {\n+        if (!exists) {", "@@ -315,2 +293,7 @@ public class JobManager implements Managed {\n-            scheduler.scheduleJob(jobBuilder.build(), trigger);\n-            log.info(\"scheduled job with key \" + jobKey.toString());\n+            try {\n+                scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n+            } catch (SchedulerException e) {\n+                log.error(\"error occured scheduling the job \" + job.getJobKey().toString(), e);\n+                return;\n+            }\n+            log.info(\"scheduled job with key \" + job.getJobKey().toString());", "@@ -320 +303,7 @@ public class JobManager implements Managed {\n-            List<? extends Trigger> triggers = scheduler.getTriggersOfJob(jobKey);\n+            List<? extends Trigger> triggers = new ArrayList<>();\n+            try {\n+                triggers = scheduler.getTriggersOfJob(job.getJobKey());\n+            } catch (SchedulerException e) {\n+                log.error(\"error occured reading triggers of the job \" + job.getJobKey().toString(), e);\n+                return;\n+            }", "@@ -322 +311,6 @@ public class JobManager implements Managed {\n-                scheduler.rescheduleJob(triggers.get(0).getKey(), trigger);\n+                try {\n+                    scheduler.rescheduleJob(triggers.get(0).getKey(), job.getTrigger());\n+                } catch (SchedulerException e) {\n+                    log.error(\"error occured re-scheduling the job \" + job.getJobKey().toString(), e);\n+                    return;\n+                }", "@@ -326,2 +320,7 @@ public class JobManager implements Managed {\n-                scheduler.deleteJob(jobKey);\n-                scheduler.scheduleJob(jobBuilder.build(), trigger);\n+                try {\n+                    scheduler.deleteJob(job.getJobKey());\n+                    scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n+                } catch (SchedulerException e) {\n+                    log.error(\"error occured deleting/scheduling the job \" + job.getJobKey().toString(), e);\n+                    return;\n+                }", "@@ -329,0 +329,2 @@ public class JobManager implements Managed {\n+\n+        log.info(job.getMessage());\n--- /dev/null", "@@ -0,0 +1,49 @@\n+package io.dropwizard.jobs;\n+\n+import org.quartz.Job;\n+import org.quartz.JobKey;\n+import org.quartz.Trigger;\n+\n+public class ScheduledJob {\n+    \n+    private JobKey jobKey;\n+    private Class<? extends Job> clazz;\n+    private Trigger trigger;\n+    private boolean requestsRecovery;\n+    private boolean storeDurably;\n+    private String message;\n+\n+    public ScheduledJob(JobKey jobKey, Class<? extends Job> clazz, Trigger trigger, boolean requestsRecovery, boolean storeDurably, String message) {\n+        this.jobKey = jobKey;\n+        this.clazz = clazz;\n+        this.trigger = trigger;\n+        this.requestsRecovery = requestsRecovery;\n+        this.storeDurably = storeDurably;\n+        this.message = message;\n+    }\n+\n+    public JobKey getJobKey() {\n+        return jobKey;\n+    }\n+\n+    public Class<? extends Job> getClazz() {\n+        return clazz;\n+    }\n+\n+    public Trigger getTrigger() {\n+        return trigger;\n+    }\n+\n+    public boolean isRequestsRecovery() {\n+        return requestsRecovery;\n+    }\n+\n+    public boolean isStoreDurably() {\n+        return storeDurably;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+}\n"]}, {"id": "1eb35ccf331cdd626503cf1a33a36cb7b37a3493", "message": "junit jupiter integration\n", "patch": ["@@ -3,2 +2,0 @@ package io.dropwizard.jobs;\n-import org.apache.commons.text.WordUtils;\n-", "@@ -6,0 +5 @@ import io.dropwizard.jobs.annotations.On;\n+import org.apache.commons.text.WordUtils;", "@@ -3 +2,0 @@ package io.dropwizard.jobs;\n-import java.util.Objects;", "@@ -11,0 +11,2 @@ import org.quartz.utils.Key;\n+import java.util.Objects;\n+", "@@ -3,2 +2,0 @@ package io.dropwizard.jobs;\n-import static com.codahale.metrics.MetricRegistry.name;\n-", "@@ -11,0 +10,2 @@ import org.quartz.JobExecutionException;\n+import static com.codahale.metrics.MetricRegistry.name;\n+", "@@ -15,6 +15 @@ import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.TimeZone;\n+import java.util.*;", "@@ -4,3 +3,0 @@ import com.codahale.metrics.SharedMetricRegistries;\n-\n-import org.quartz.Scheduler;\n-", "@@ -9,0 +7 @@ import io.dropwizard.core.setup.Environment;\n+import org.quartz.Scheduler;", "@@ -2,0 +3,2 @@ package io.dropwizard.jobs.annotations;\n+import org.quartz.Trigger;\n+", "@@ -7 +8,0 @@ import java.lang.annotation.Target;\n-import org.quartz.Trigger;", "@@ -3,11 +3,3 @@ package io.dropwizard.jobs;\n-import static org.junit.Assert.*;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import javax.inject.Singleton;\n-\n+import io.dropwizard.core.setup.Environment;\n+import io.dropwizard.jersey.DropwizardResourceConfig;\n+import io.dropwizard.jersey.setup.JerseyEnvironment;", "@@ -23 +15 @@ import org.glassfish.jersey.server.spi.Container;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;", "@@ -25,3 +17,7 @@ import org.junit.Test;\n-import io.dropwizard.core.setup.Environment;\n-import io.dropwizard.jersey.DropwizardResourceConfig;\n-import io.dropwizard.jersey.setup.JerseyEnvironment;\n+import javax.inject.Singleton;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.*;", "@@ -6,3 +6,4 @@ import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;", "@@ -19 +20 @@ import org.hamcrest.core.IsEqual;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;", "@@ -222,9 +223,11 @@ public class JobManagerTest {\n-    @Test(expected = SchedulerConfigException.class)\n-    public void throwsExceptionWhenNoPropertiesAreDefined() throws Exception {\n-        TestConfig config = new TestConfig();\n-        config.getQuartzConfiguration().clear();\n-        config.getQuartzConfiguration().put(\"some\", \"property\");\n-\n-        jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n-                everyTestJobWithJobName);\n-        jobManager.start();\n+    @Test\n+    public void throwsExceptionWhenNoPropertiesAreDefined() {\n+        assertThrows(SchedulerConfigException.class, () -> {\n+            TestConfig config = new TestConfig();\n+            config.getQuartzConfiguration().clear();\n+            config.getQuartzConfiguration().put(\"some\", \"property\");\n+\n+            jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+                    everyTestJobWithJobName);\n+            jobManager.start();\n+        });", "@@ -246 +249 @@ public class JobManagerTest {\n-    public void allowTimezoneConfiguration() throws Exception {\n+    public void allowTimezoneConfiguration() {", "@@ -12 +12 @@ import static org.mockito.Mockito.when;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;", "@@ -3,2 +2,0 @@ package io.dropwizard.jobs.parser;\n-import org.junit.Test;\n-", "@@ -8 +6,3 @@ import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.junit.jupiter.api.Test;", "@@ -3,2 +2,0 @@ package io.dropwizard.jobs;\n-import com.google.inject.Inject;\n-import com.google.inject.Injector;", "@@ -11,0 +10,3 @@ import org.quartz.spi.TriggerFiredBundle;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+", "@@ -6 +5,0 @@ import com.google.inject.Key;\n-", "@@ -4 +3,0 @@ import com.google.inject.Injector;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.OnApplicationStart;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.OnApplicationStop;\n-", "@@ -4 +3,0 @@ import com.google.inject.Inject;\n-", "@@ -6 +4,0 @@ import io.dropwizard.jobs.annotations.Every;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.Every;\n-", "@@ -8,2 +8,2 @@ import java.util.concurrent.TimeUnit;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;", "@@ -20 +20 @@ public class GuiceJobManagerTest {\n-    @Before\n+    @BeforeEach", "@@ -10 +10 @@ import static org.mockito.Mockito.when;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.On;\n-", "@@ -3,2 +2,0 @@ package io.dropwizard.jobs;\n-import org.springframework.context.ApplicationContext;\n-", "@@ -5,0 +4 @@ import io.dropwizard.core.setup.Environment;\n+import org.springframework.context.ApplicationContext;", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.OnApplicationStart;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.OnApplicationStop;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.Every;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.Every;\n-", "@@ -4 +3,0 @@ import io.dropwizard.jobs.annotations.On;\n-", "@@ -8 +8 @@ import java.util.concurrent.TimeUnit;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;", "@@ -10 +10 @@ import static org.mockito.Mockito.when;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n"]}, {"id": "0e3fd76332f26e7363149d47602f46ceb2c693a6", "message": "refactor Guice job manager\n", "patch": ["@@ -5,0 +6 @@ import com.google.inject.Key;\n+import com.google.inject.TypeLiteral;", "@@ -23,2 +24,4 @@ public class GuiceJobManager extends JobManager {\n-        for (Map.Entry<Key<?>, Binding<?>> entry : injector.getBindings().entrySet()) {\n-            Class<?> clazz = entry.getValue().getKey().getTypeLiteral().getRawType();\n+        Map<Key<?>, Binding<?>> bindings = injector.getBindings();\n+        for (Key<?> key : bindings.keySet()) {\n+            TypeLiteral<?> typeLiteral = key.getTypeLiteral();\n+            Class<?> clazz = typeLiteral.getRawType();\n"]}, {"id": "9d6febff269f11bc4e312354003c24bdd4609c68", "message": "refactor JobManager\n", "patch": ["@@ -3,0 +4 @@ import io.dropwizard.jobs.annotations.*;\n+import io.dropwizard.jobs.annotations.Every.MisfirePolicy;", "@@ -92 +93 @@ public class JobManager implements Managed {\n-     * \n+     *", "@@ -147,2 +148 @@ public class JobManager implements Managed {\n-                    ScheduledJob scheduledJob = new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n-                    return scheduledJob;\n+                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);", "@@ -163,2 +162,0 @@ public class JobManager implements Managed {\n-                    int priority = everyAnnotation.priority();\n-                    Every.MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();", "@@ -167 +164,0 @@ public class JobManager implements Managed {\n-                    int repeatCount = everyAnnotation.repeatCount();", "@@ -179,4 +176,2 @@ public class JobManager implements Managed {\n-                    if (repeatCount > -1)\n-                        scheduleBuilder.withRepeatCount(repeatCount);\n-                    else\n-                        scheduleBuilder.repeatForever();\n+                    int repeatCount = everyAnnotation.repeatCount();\n+                    applyRepeatCount(repeatCount, scheduleBuilder);", "@@ -184,19 +179,2 @@ public class JobManager implements Managed {\n-                    if (misfirePolicy == Every.MisfirePolicy.IGNORE_MISFIRES)\n-                        scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-                    else if (misfirePolicy == Every.MisfirePolicy.FIRE_NOW)\n-                        scheduleBuilder.withMisfireHandlingInstructionFireNow();\n-                    else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_EXISTING_COUNT)\n-                        scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n-                    else if (misfirePolicy == Every.MisfirePolicy.NOW_WITH_REMAINING_COUNT)\n-                        scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n-                    else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_EXISTING_COUNT)\n-                        scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n-                    else if (misfirePolicy == Every.MisfirePolicy.NEXT_WITH_REMAINING_COUNT)\n-                        scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n-\n-                    Instant start = Instant.now();\n-                    DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n-                    if (delayAnnotation != null) {\n-                        long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n-                        start = start.plusMillis(milliSecondDelay);\n-                    }\n+                    MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();\n+                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);", "@@ -203,0 +182,2 @@ public class JobManager implements Managed {\n+                    Instant start = extractStart(clazz);\n+                    int priority = everyAnnotation.priority();", "@@ -211,8 +191 @@ public class JobManager implements Managed {\n-\n-                    StringBuilder sb = new StringBuilder();\n-                    sb.append(String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString()));\n-                    if (delayAnnotation != null) {\n-                        sb.append(\" (\").append(delayAnnotation.value()).append(\" delay)\");\n-                    }\n-                    String message = sb.toString();\n-\n+                    String message = extractMessage(clazz, jobKey);", "@@ -222,0 +196,51 @@ public class JobManager implements Managed {\n+    private void applyRepeatCount(int repeatCount, SimpleScheduleBuilder scheduleBuilder) {\n+        if (repeatCount > -1)\n+            scheduleBuilder.withRepeatCount(repeatCount);\n+        else\n+            scheduleBuilder.repeatForever();\n+    }\n+\n+    private void applyMisfirePolicy(MisfirePolicy misfirePolicy, SimpleScheduleBuilder scheduleBuilder) {\n+        switch (misfirePolicy) {\n+            case IGNORE_MISFIRES:\n+                scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+                break;\n+            case FIRE_NOW:\n+                scheduleBuilder.withMisfireHandlingInstructionFireNow();\n+                break;\n+            case NOW_WITH_EXISTING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n+                break;\n+            case NOW_WITH_REMAINING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n+                break;\n+            case NEXT_WITH_EXISTING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n+                break;\n+            case NEXT_WITH_REMAINING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n+                break;\n+        }\n+    }\n+\n+    private String extractMessage(Class<? extends Job> clazz, JobKey jobKey) {\n+        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n+        Every everyAnnotation = clazz.getAnnotation(Every.class);\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString()));\n+        if (delayAnnotation != null) {\n+            sb.append(\" (\").append(delayAnnotation.value()).append(\" delay)\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    private Instant extractStart(Class<? extends Job> clazz) {\n+        Instant start = Instant.now();\n+        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n+        if (delayAnnotation != null) {\n+            long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n+            start = start.plusMillis(milliSecondDelay);\n+        }\n+        return start;\n+    }\n+", "@@ -267 +291 @@ public class JobManager implements Managed {\n-                .map(job -> job.getClass())\n+                .map(Job::getClass)", "@@ -277 +300,0 @@ public class JobManager implements Managed {\n-        boolean exists = false;", "@@ -279,27 +302,3 @@ public class JobManager implements Managed {\n-            exists = scheduler.checkExists(job.getJobKey());\n-        } catch (SchedulerException e) {\n-            log.error(\"error occured checking the job \" + job.getJobKey().toString(), e);\n-            return;\n-        }\n-\n-        if (!exists) {\n-            // if the job doesn't already exist, we can create it, along with its trigger. this prevents us\n-            // from creating multiple instances of the same job when running in a clustered environment\n-            try {\n-                scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n-            } catch (SchedulerException e) {\n-                log.error(\"error occured scheduling the job \" + job.getJobKey().toString(), e);\n-                return;\n-            }\n-            log.info(\"scheduled job with key \" + job.getJobKey().toString());\n-        } else {\n-            // if the job has exactly one trigger, we can just reschedule it, which allows us to update the schedule for\n-            // that trigger.\n-            List<? extends Trigger> triggers = new ArrayList<>();\n-            try {\n-                triggers = scheduler.getTriggersOfJob(job.getJobKey());\n-            } catch (SchedulerException e) {\n-                log.error(\"error occured reading triggers of the job \" + job.getJobKey().toString(), e);\n-                return;\n-            }\n-            if (triggers.size() == 1) {\n+            if (scheduler.checkExists(job.getJobKey())) {\n+                // if the job has exactly one trigger, we can just reschedule it, which allows us to update the schedule for\n+                // that trigger.", "@@ -307 +306,19 @@ public class JobManager implements Managed {\n-                    scheduler.rescheduleJob(triggers.get(0).getKey(), job.getTrigger());\n+                    List<? extends Trigger> triggers = scheduler.getTriggersOfJob(job.getJobKey());\n+                    if (triggers.size() == 1) {\n+                        try {\n+                            scheduler.rescheduleJob(triggers.get(0).getKey(), job.getTrigger());\n+                            log.info(job.getMessage());\n+                        } catch (SchedulerException e) {\n+                            log.error(\"error occurred re-scheduling the job \" + job.getJobKey().toString(), e);\n+                        }\n+                    } else {\n+                        // if for some reason the job has multiple triggers, it's easiest to just delete and re-create the job,\n+                        // since we want to enforce a one-to-one relationship between jobs and triggers\n+                        try {\n+                            scheduler.deleteJob(job.getJobKey());\n+                            scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n+                            log.info(job.getMessage());\n+                        } catch (SchedulerException e) {\n+                            log.error(\"error occurred deleting/scheduling the job \" + job.getJobKey().toString(), e);\n+                        }\n+                    }", "@@ -309,2 +326 @@ public class JobManager implements Managed {\n-                    log.error(\"error occured re-scheduling the job \" + job.getJobKey().toString(), e);\n-                    return;\n+                    log.error(\"error occurred reading triggers of the job \" + job.getJobKey().toString(), e);", "@@ -313,2 +329,2 @@ public class JobManager implements Managed {\n-                // if for some reason the job has multiple triggers, it's easiest to just delete and re-create the job,\n-                // since we want to enforce a one-to-one relationship between jobs and triggers\n+                // if the job doesn't already exist, we can create it, along with its trigger. this prevents us\n+                // from creating multiple instances of the same job when running in a clustered environment", "@@ -316 +331,0 @@ public class JobManager implements Managed {\n-                    scheduler.deleteJob(job.getJobKey());", "@@ -317,0 +333,2 @@ public class JobManager implements Managed {\n+                    log.info(\"scheduled job with key \" + job.getJobKey().toString());\n+                    log.info(job.getMessage());", "@@ -319,2 +336 @@ public class JobManager implements Managed {\n-                    log.error(\"error occured deleting/scheduling the job \" + job.getJobKey().toString(), e);\n-                    return;\n+                    log.error(\"error occurred scheduling the job \" + job.getJobKey().toString(), e);", "@@ -322,0 +339,3 @@ public class JobManager implements Managed {\n+\n+        } catch (SchedulerException e) {\n+            log.error(\"error occured checking the job \" + job.getJobKey().toString(), e);", "@@ -325 +343,0 @@ public class JobManager implements Managed {\n-        log.info(job.getMessage());\n"]}, {"id": "35f8df1be432c1d863ee4861cabaa05a06efe02e", "message": "logging on default clause\n", "patch": ["@@ -222,0 +223,3 @@ public class JobManager implements Managed {\n+            default:\n+                log.warn(\"Nothing to do for the misfire policy: {}\", misfirePolicy);\n+                break;\n"]}, {"id": "81790984e8bcc42e973c361d1ce5bd283b33877c", "message": "refactor to simplify\n", "patch": ["@@ -122,2 +121,0 @@ public class JobManager implements Managed {\n-                    int priority = onAnnotation.priority();\n-                    On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();", "@@ -130,4 +128 @@ public class JobManager implements Managed {\n-                    if (StringUtils.isNotBlank(timeZoneStr)) {\n-                        TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n-                        scheduleBuilder = scheduleBuilder.inTimeZone(timeZone);\n-                    }\n+                    applyTimezone(timeZoneStr, scheduleBuilder);", "@@ -135,6 +130,2 @@ public class JobManager implements Managed {\n-                    if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n-                        scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-                    else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n-                        scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n-                    else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n-                        scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n+                    On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();\n+                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);", "@@ -142 +133,5 @@ public class JobManager implements Managed {\n-                    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder).withPriority(priority).build();\n+                    int priority = onAnnotation.priority();\n+                    Trigger trigger = TriggerBuilder.newTrigger()\n+                            .withSchedule(scheduleBuilder)\n+                            .withPriority(priority)\n+                            .build();", "@@ -151,0 +147,16 @@ public class JobManager implements Managed {\n+    private void applyTimezone(String timeZoneStr, CronScheduleBuilder scheduleBuilder) {\n+        if (StringUtils.isNotBlank(timeZoneStr)) {\n+            TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n+            scheduleBuilder.inTimeZone(timeZone);\n+        }\n+    }\n+\n+    private void applyMisfirePolicy(On.MisfirePolicy misfirePolicy, CronScheduleBuilder scheduleBuilder) {\n+        if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n+            scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+        else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n+            scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n+        else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n+            scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n+    }\n+", "@@ -163,9 +173,0 @@ public class JobManager implements Managed {\n-                    boolean requestRecovery = everyAnnotation.requestRecovery();\n-                    boolean storeDurably = everyAnnotation.storeDurably();\n-\n-                    String value = everyAnnotation.value();\n-                    if (value.isEmpty() || value.matches(\"\\\\$\\\\{.*\\\\}\")) {\n-                        value = readDurationFromConfig(everyAnnotation, clazz, configuration);\n-                        log.info(clazz + \" is configured in the config file to run every \" + value);\n-                    }\n-                    long milliSeconds = TimeParserUtil.parseDuration(value);", "@@ -172,0 +175 @@ public class JobManager implements Managed {\n+                    long interval = getInterval(clazz, everyAnnotation);", "@@ -174 +177 @@ public class JobManager implements Managed {\n-                            .withIntervalInMilliseconds(milliSeconds);\n+                            .withIntervalInMilliseconds(interval);", "@@ -191,0 +195,2 @@ public class JobManager implements Managed {\n+                    boolean requestRecovery = everyAnnotation.requestRecovery();\n+                    boolean storeDurably = everyAnnotation.storeDurably();", "@@ -195,0 +201,9 @@ public class JobManager implements Managed {\n+    private long getInterval(Class<? extends Job> clazz, Every everyAnnotation) {\n+        String value = everyAnnotation.value();\n+        if (value.isEmpty() || value.matches(\"\\\\$\\\\{.*\\\\}\")) {\n+            value = readDurationFromConfig(everyAnnotation, clazz, configuration);\n+            log.info(clazz + \" is configured in the config file to run every \" + value);\n+        }\n+        return TimeParserUtil.parseDuration(value);\n+    }\n+", "@@ -298,0 +313,2 @@ public class JobManager implements Managed {\n+        JobKey jobKey = job.getJobKey();\n+        Trigger trigger = job.getTrigger();", "@@ -300 +316 @@ public class JobManager implements Managed {\n-                .withIdentity(job.getJobKey())\n+                .withIdentity(jobKey)", "@@ -305 +321 @@ public class JobManager implements Managed {\n-            if (scheduler.checkExists(job.getJobKey())) {\n+            if (scheduler.checkExists(jobKey)) {", "@@ -308,22 +324,10 @@ public class JobManager implements Managed {\n-                try {\n-                    List<? extends Trigger> triggers = scheduler.getTriggersOfJob(job.getJobKey());\n-                    if (triggers.size() == 1) {\n-                        try {\n-                            scheduler.rescheduleJob(triggers.get(0).getKey(), job.getTrigger());\n-                            log.info(job.getMessage());\n-                        } catch (SchedulerException e) {\n-                            log.error(\"error occurred re-scheduling the job \" + job.getJobKey().toString(), e);\n-                        }\n-                    } else {\n-                        // if for some reason the job has multiple triggers, it's easiest to just delete and re-create the job,\n-                        // since we want to enforce a one-to-one relationship between jobs and triggers\n-                        try {\n-                            scheduler.deleteJob(job.getJobKey());\n-                            scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n-                            log.info(job.getMessage());\n-                        } catch (SchedulerException e) {\n-                            log.error(\"error occurred deleting/scheduling the job \" + job.getJobKey().toString(), e);\n-                        }\n-                    }\n-                } catch (SchedulerException e) {\n-                    log.error(\"error occurred reading triggers of the job \" + job.getJobKey().toString(), e);\n+                List<? extends Trigger> triggers = scheduler.getTriggersOfJob(jobKey);\n+                if (triggers.size() == 1) {\n+                    scheduler.rescheduleJob(triggers.get(0).getKey(), trigger);\n+                    log.info(job.getMessage());\n+                } else {\n+                    // if for some reason the job has multiple triggers, it's easiest to just delete and re-create the job,\n+                    // since we want to enforce a one-to-one relationship between jobs and triggers\n+                    scheduler.deleteJob(jobKey);\n+                    scheduler.scheduleJob(jobBuilder.build(), trigger);\n+                    log.info(job.getMessage());", "@@ -334,7 +338,3 @@ public class JobManager implements Managed {\n-                try {\n-                    scheduler.scheduleJob(jobBuilder.build(), job.getTrigger());\n-                    log.info(\"scheduled job with key \" + job.getJobKey().toString());\n-                    log.info(job.getMessage());\n-                } catch (SchedulerException e) {\n-                    log.error(\"error occurred scheduling the job \" + job.getJobKey().toString(), e);\n-                }\n+                scheduler.scheduleJob(jobBuilder.build(), trigger);\n+                log.info(\"scheduled job with key {}\", jobKey.toString());\n+                log.info(job.getMessage());", "@@ -342 +341,0 @@ public class JobManager implements Managed {\n-", "@@ -344 +343 @@ public class JobManager implements Managed {\n-            log.error(\"error occured checking the job \" + job.getJobKey().toString(), e);\n+            log.error(String.format(\"error occurred scheduling the job %s\", jobKey), e);\n"]}, {"id": "de8d02e9e8c1d24d90604532849a611320a6c401", "message": "refactor: separate job builder in JobManager\n", "patch": ["@@ -41,0 +42,20 @@ public class JobManager implements Managed {\n+    private static JobDetail build(Job job) {\n+        Class<? extends Job> jobClass = job.getClass();\n+        String jobClassName = jobClass.getName();\n+        String jobGroupName = job.getGroupName();\n+        return JobBuilder\n+                .newJob(jobClass)\n+                .withIdentity(jobClassName, jobGroupName)\n+                .build();\n+    }\n+\n+    private static JobDetail build(ScheduledJob job) {\n+        JobKey jobKey = job.getJobKey();\n+        return JobBuilder.newJob(job.getClazz())\n+                .withIdentity(jobKey)\n+                .requestRecovery(job.isRequestsRecovery())\n+                .storeDurably(job.isStoreDurably())\n+                .build();\n+    }\n+\n+", "@@ -81,4 +101 @@ public class JobManager implements Managed {\n-                .map(job -> JobBuilder\n-                        .newJob(job.getClass())\n-                        .withIdentity(job.getClass().getName(), job.getGroupName())\n-                        .build())\n+                .map(JobManager::build)", "@@ -87 +104 @@ public class JobManager implements Managed {\n-            scheduler.scheduleJob(jobDetail, executeNowTrigger());\n+            scheduleNow(jobDetail);", "@@ -90,0 +108,5 @@ public class JobManager implements Managed {\n+    private void scheduleNow(JobDetail jobDetail) throws SchedulerException {\n+        Trigger nowTrigger = nowTrigger();\n+        scheduler.scheduleJob(jobDetail, nowTrigger);\n+    }\n+", "@@ -267,4 +289 @@ public class JobManager implements Managed {\n-                .map(job -> JobBuilder\n-                        .newJob(job.getClass())\n-                        .withIdentity(job.getClass().getName(), job.getGroupName())\n-                        .build())\n+                .map(JobManager::build)", "@@ -276 +295 @@ public class JobManager implements Managed {\n-                scheduler.scheduleJob(jobDetail, Set.of(executeNowTrigger()), true);\n+                scheduler.scheduleJob(jobDetail, Set.of(nowTrigger()), true);", "@@ -282 +301 @@ public class JobManager implements Managed {\n-    protected Trigger executeNowTrigger() {\n+    protected Trigger nowTrigger() {", "@@ -315,4 +334 @@ public class JobManager implements Managed {\n-        JobBuilder jobBuilder = JobBuilder.newJob(job.getClazz())\n-                .withIdentity(jobKey)\n-                .requestRecovery(job.isRequestsRecovery())\n-                .storeDurably(job.isStoreDurably());\n+        JobDetail jobDetail = build(job);", "@@ -332 +348 @@ public class JobManager implements Managed {\n-                    scheduler.scheduleJob(jobBuilder.build(), trigger);\n+                    scheduler.scheduleJob(jobDetail, trigger);", "@@ -338 +354 @@ public class JobManager implements Managed {\n-                scheduler.scheduleJob(jobBuilder.build(), trigger);\n+                scheduler.scheduleJob(jobDetail, trigger);\n"]}, {"id": "3f052014a8ccb0e9222d0d5ea48fe4a5de09e26b", "message": "refactor: scheduler creation in Jobmanager\n", "patch": ["@@ -64 +64 @@ public class JobManager implements Managed {\n-        createScheduler();\n+        scheduler = createScheduler();", "@@ -70,0 +71,10 @@ public class JobManager implements Managed {\n+    private Scheduler createScheduler() throws SchedulerException {\n+        if (configuration.getQuartzConfiguration().isEmpty()) {\n+            return StdSchedulerFactory.getDefaultScheduler();\n+        }\n+\n+        StdSchedulerFactory factory = new StdSchedulerFactory();\n+        factory.initialize(createProperties());\n+        return factory.getScheduler();\n+    }\n+", "@@ -305,10 +314,0 @@ public class JobManager implements Managed {\n-    private void createScheduler() throws SchedulerException {\n-        if (configuration.getQuartzConfiguration().isEmpty()) {\n-            scheduler = StdSchedulerFactory.getDefaultScheduler();\n-            return;\n-        }\n-\n-        StdSchedulerFactory factory = new StdSchedulerFactory();\n-        factory.initialize(createProperties());\n-        scheduler = factory.getScheduler();\n-    }\n"]}, {"id": "2e5fcd399f6cbbebf2912ad71cef7c16de0e3609", "message": "refactor: introduce JobFilters as stream\n", "patch": ["@@ -6 +5,0 @@ import org.quartz.Scheduler;\n-import org.quartz.SchedulerException;", "@@ -9,3 +7,0 @@ import org.quartz.spi.TriggerFiredBundle;\n-import org.quartz.utils.Key;\n-\n-import java.util.Objects;", "@@ -15 +11 @@ class DropwizardJobFactory implements JobFactory {\n-    private final Job[] jobs;\n+    private final JobFilters jobs;", "@@ -17 +13 @@ class DropwizardJobFactory implements JobFactory {\n-    DropwizardJobFactory(Job ... jobs) {\n+    DropwizardJobFactory(JobFilters jobs) {", "@@ -22 +18 @@ class DropwizardJobFactory implements JobFactory {\n-    public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {\n+    public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) {", "@@ -23,0 +20 @@ class DropwizardJobFactory implements JobFactory {\n+        Class<? extends org.quartz.Job> jobClass = jobDetail.getJobClass();", "@@ -24,0 +22 @@ class DropwizardJobFactory implements JobFactory {\n+        String groupName = jobKey.getGroup();", "@@ -26,6 +24 @@ class DropwizardJobFactory implements JobFactory {\n-        for (Job job : jobs) {\n-            if (job.getClass().equals(jobDetail.getJobClass()) && equalGroupName(job, jobKey)) {\n-                return job;\n-            }\n-        }\n-        return null;\n+        return jobs.findWith(jobClass, groupName).orElse(null);", "@@ -34,4 +26,0 @@ class DropwizardJobFactory implements JobFactory {\n-    private boolean equalGroupName(final Job job, final JobKey quartzJobKey) {\n-        return Key.DEFAULT_GROUP.equals(quartzJobKey.getGroup()) && job.getGroupName() == null\n-            || Objects.equals(job.getGroupName(), quartzJobKey.getGroup());\n-    }\n--- /dev/null", "@@ -0,0 +1,53 @@\n+package io.dropwizard.jobs;\n+\n+import io.dropwizard.jobs.annotations.Every;\n+import io.dropwizard.jobs.annotations.On;\n+import io.dropwizard.jobs.annotations.OnApplicationStart;\n+import io.dropwizard.jobs.annotations.OnApplicationStop;\n+import org.quartz.utils.Key;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class JobFilters {\n+    private final Job[] jobs;\n+\n+    public JobFilters(Job[] jobs) {\n+\n+        this.jobs = jobs;\n+    }\n+\n+    public Stream<Job> allOnApplicationStop() {\n+        return Arrays.stream(jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStop.class));\n+    }\n+\n+    public Stream<Job> allOnCron() {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(On.class));\n+    }\n+\n+    public Stream<Job> allEvery() {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(Every.class));\n+    }\n+\n+    public Stream<Job> allOnApplicationStart() {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStart.class));\n+    }\n+\n+    public Optional<Job> findWith(Class<? extends org.quartz.Job> jobClass, String groupName) {\n+        return Arrays.stream(this.jobs)\n+                .filter(job -> job.getClass().equals(jobClass) && equalGroupName(job, groupName))\n+                .findFirst();\n+    }\n+\n+    private boolean equalGroupName(final Job job, final String groupName) {\n+        String jobGroupName = job.getGroupName();\n+        return Key.DEFAULT_GROUP.equals(groupName) && jobGroupName == null\n+                || Objects.equals(jobGroupName, groupName);\n+    }\n+}", "@@ -3 +3,2 @@ package io.dropwizard.jobs;\n-import io.dropwizard.jobs.annotations.*;\n+import io.dropwizard.jobs.annotations.DelayStart;\n+import io.dropwizard.jobs.annotations.Every;", "@@ -4,0 +6 @@ import io.dropwizard.jobs.annotations.Every.MisfirePolicy;\n+import io.dropwizard.jobs.annotations.On;", "@@ -24,0 +27,2 @@ public class JobManager implements Managed {\n+    protected final JobConfiguration configuration;\n+    protected final JobFilters jobs;", "@@ -26 +29,0 @@ public class JobManager implements Managed {\n-    protected Job[] jobs;", "@@ -28,2 +30,0 @@ public class JobManager implements Managed {\n-    protected JobConfiguration configuration;\n-", "@@ -34 +35 @@ public class JobManager implements Managed {\n-        this.jobs = jobs;\n+        this.jobs = new JobFilters(jobs);", "@@ -109,2 +110 @@ public class JobManager implements Managed {\n-        List<JobDetail> jobDetails = Arrays.stream(jobs)\n-                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStop.class))\n+        List<JobDetail> jobDetails = jobs.allOnApplicationStop()", "@@ -141,2 +141 @@ public class JobManager implements Managed {\n-        return Arrays.stream(this.jobs)\n-                .filter(job -> job.getClass().isAnnotationPresent(On.class))\n+        return jobs.allOnCron()", "@@ -201,2 +200 @@ public class JobManager implements Managed {\n-        return Arrays.stream(this.jobs)\n-                .filter(job -> job.getClass().isAnnotationPresent(Every.class))\n+        return jobs.allEvery()", "@@ -297,2 +295 @@ public class JobManager implements Managed {\n-        List<JobDetail> jobDetails = Arrays.stream(this.jobs)\n-                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStart.class))\n+        List<JobDetail> jobDetails = jobs.allOnApplicationStart()", "@@ -325,2 +322 @@ public class JobManager implements Managed {\n-        Arrays.stream(this.jobs)\n-                .filter(job -> job.getClass().isAnnotationPresent(OnApplicationStop.class))\n+        jobs.allOnApplicationStop()\n"]}, {"id": "d3f65c65201007cf2611478dfddc5cbbdbfef2b1", "message": "refactor: JobManager mediates different job types\n", "patch": ["+++ /dev/null", "@@ -1,32 +0,0 @@\n-package io.dropwizard.jobs;\n-\n-import io.dropwizard.jobs.annotations.Every;\n-import io.dropwizard.jobs.annotations.On;\n-import org.apache.commons.text.WordUtils;\n-\n-abstract class AnnotationReader {\n-\n-    static String readDurationFromConfig(On annotation, Class<? extends org.quartz.Job> clazz, JobConfiguration configuration) {\n-        if (configuration == null) {\n-            return null;\n-        } else {\n-            String property = WordUtils.uncapitalize(clazz.getSimpleName());\n-            if (!annotation.value().isEmpty()) {\n-                property = annotation.value().substring(2, annotation.value().length() - 1);\n-            }\n-            return configuration.getJobs().getOrDefault(property, null);\n-        }\n-    }\n-\n-    static String readDurationFromConfig(Every annotation, Class<? extends org.quartz.Job> clazz, JobConfiguration configuration) {\n-        if (configuration == null) {\n-            return null;\n-        }\n-        String property = WordUtils.uncapitalize(clazz.getSimpleName());\n-        if (!annotation.value().isEmpty()) {\n-            property = annotation.value().substring(2, annotation.value().length() - 1);\n-        }\n-        return configuration.getJobs().getOrDefault(property, null);\n-    }\n-\n-}", "@@ -3,5 +3,4 @@ package io.dropwizard.jobs;\n-import io.dropwizard.jobs.annotations.DelayStart;\n-import io.dropwizard.jobs.annotations.Every;\n-import io.dropwizard.jobs.annotations.Every.MisfirePolicy;\n-import io.dropwizard.jobs.annotations.On;\n-import io.dropwizard.jobs.parser.TimeParserUtil;\n+import io.dropwizard.jobs.scheduler.EveryScheduler;\n+import io.dropwizard.jobs.scheduler.OnApplicationStartScheduler;\n+import io.dropwizard.jobs.scheduler.OnApplicationStopScheduler;\n+import io.dropwizard.jobs.scheduler.OnCronScheduler;", "@@ -9 +7,0 @@ import io.dropwizard.lifecycle.Managed;\n-import org.apache.commons.lang3.StringUtils;", "@@ -16,5 +14,3 @@ import org.slf4j.LoggerFactory;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;", "@@ -22,3 +18 @@ import java.util.stream.Stream;\n-import static io.dropwizard.jobs.AnnotationReader.readDurationFromConfig;\n-\n-public class JobManager implements Managed {\n+public class JobManager implements Managed, JobMediator {", "@@ -29,0 +24,5 @@ public class JobManager implements Managed {\n+    private final OnApplicationStartScheduler onApplicationStartScheduler;\n+    private final OnApplicationStopScheduler onApplicationStopScheduler;\n+    private final EveryScheduler everyScheduler;\n+    private final OnCronScheduler onCronScheduler;\n+", "@@ -31 +30 @@ public class JobManager implements Managed {\n-    protected TimeZone defaultTimezone;\n+", "@@ -36,6 +34,0 @@ public class JobManager implements Managed {\n-        if (configuration != null && configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n-            defaultTimezone = TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n-        } else {\n-            defaultTimezone = TimeZone.getDefault();\n-        }\n-    }", "@@ -43,8 +36,5 @@ public class JobManager implements Managed {\n-    private static JobDetail build(Job job) {\n-        Class<? extends Job> jobClass = job.getClass();\n-        String jobClassName = jobClass.getName();\n-        String jobGroupName = job.getGroupName();\n-        return JobBuilder\n-                .newJob(jobClass)\n-                .withIdentity(jobClassName, jobGroupName)\n-                .build();\n+        this.onApplicationStartScheduler = new OnApplicationStartScheduler(this);\n+        this.onApplicationStopScheduler = new OnApplicationStopScheduler(this);\n+        this.everyScheduler = new EveryScheduler(this);\n+        this.onCronScheduler = new OnCronScheduler(this);\n+", "@@ -62 +51,0 @@ public class JobManager implements Managed {\n-", "@@ -68 +57,5 @@ public class JobManager implements Managed {\n-        scheduleAllJobs();\n+\n+        onApplicationStartScheduler.schedule();\n+        everyScheduler.schedule();\n+        onCronScheduler.schedule();\n+", "@@ -84 +77 @@ public class JobManager implements Managed {\n-        scheduleAllJobsOnApplicationStop();\n+        onApplicationStopScheduler.schedule();", "@@ -97,2 +90,3 @@ public class JobManager implements Managed {\n-    protected JobFactory getJobFactory() {\n-        return new DropwizardJobFactory(jobs);\n+    @Override\n+    public JobFilters getJobs() {\n+        return jobs;", "@@ -101,6 +95,3 @@ public class JobManager implements Managed {\n-    protected void scheduleAllJobs() throws SchedulerException {\n-        scheduleAllJobsOnApplicationStart();\n-        allJobsWithEveryAnnotation()\n-                .forEach(this::scheduleOrRescheduleJob);\n-        allJobsWithOnAnnotation()\n-                .forEach(this::scheduleOrRescheduleJob);\n+    @Override\n+    public JobConfiguration getConfiguration() {\n+        return configuration;", "@@ -109,7 +100,2 @@ public class JobManager implements Managed {\n-    protected void scheduleAllJobsOnApplicationStop() throws SchedulerException {\n-        List<JobDetail> jobDetails = jobs.allOnApplicationStop()\n-                .map(JobManager::build)\n-                .collect(Collectors.toList());\n-        for (JobDetail jobDetail : jobDetails) {\n-            scheduleNow(jobDetail);\n-        }\n+    protected JobFactory getJobFactory() {\n+        return new DropwizardJobFactory(jobs);", "@@ -118 +104 @@ public class JobManager implements Managed {\n-    private void scheduleNow(JobDetail jobDetail) throws SchedulerException {\n+    public void scheduleNow(JobDetail jobDetail) throws SchedulerException {", "@@ -120,186 +106 @@ public class JobManager implements Managed {\n-        scheduler.scheduleJob(jobDetail, nowTrigger);\n-    }\n-\n-    /**\n-     * Allow timezone to be configured on a per-cron basis with [timezoneName] appended to the cron format\n-     *\n-     * @param cronExpr the modified cron format\n-     * @return the cron schedule with the timezone applied to it if needed\n-     */\n-    protected CronScheduleBuilder createCronScheduleBuilder(String cronExpr) {\n-        int i = cronExpr.indexOf(\"[\");\n-        int j = cronExpr.indexOf(\"]\");\n-        TimeZone timezone = defaultTimezone;\n-        if (i > -1 && j > -1) {\n-            timezone = TimeZone.getTimeZone(cronExpr.substring(i + 1, j));\n-            cronExpr = cronExpr.substring(0, i).trim();\n-        }\n-        return CronScheduleBuilder.cronSchedule(cronExpr).inTimeZone(timezone);\n-    }\n-\n-    protected Stream<ScheduledJob> allJobsWithOnAnnotation() {\n-        return jobs.allOnCron()\n-                .map(job -> {\n-\n-                    Class<? extends Job> clazz = job.getClass();\n-                    On onAnnotation = clazz.getAnnotation(On.class);\n-                    String cron = onAnnotation.value();\n-\n-                    if (cron.isEmpty() || cron.matches(\"\\\\$\\\\{.*\\\\}\")) {\n-                        cron = readDurationFromConfig(onAnnotation, clazz, configuration);\n-                        log.info(clazz + \" is configured in the config file to run every \" + cron);\n-                    }\n-\n-                    boolean requestRecovery = onAnnotation.requestRecovery();\n-                    boolean storeDurably = onAnnotation.storeDurably();\n-\n-                    CronScheduleBuilder scheduleBuilder = createCronScheduleBuilder(cron);\n-\n-                    String timeZoneStr = onAnnotation.timeZone();\n-                    applyTimezone(timeZoneStr, scheduleBuilder);\n-\n-                    On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();\n-                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);\n-\n-                    int priority = onAnnotation.priority();\n-                    Trigger trigger = TriggerBuilder.newTrigger()\n-                            .withSchedule(scheduleBuilder)\n-                            .withPriority(priority)\n-                            .build();\n-\n-                    // ensure that only one instance of each job is scheduled\n-                    JobKey jobKey = createJobKey(onAnnotation.jobName(), job);\n-\n-                    String message = String.format(\"    %-21s %s\", cron, jobKey.toString());\n-                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n-                });\n-    }\n-\n-    private void applyTimezone(String timeZoneStr, CronScheduleBuilder scheduleBuilder) {\n-        if (StringUtils.isNotBlank(timeZoneStr)) {\n-            TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n-            scheduleBuilder.inTimeZone(timeZone);\n-        }\n-    }\n-\n-    private void applyMisfirePolicy(On.MisfirePolicy misfirePolicy, CronScheduleBuilder scheduleBuilder) {\n-        if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n-            scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-        else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n-            scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n-        else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n-            scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n-    }\n-\n-    private JobKey createJobKey(final String annotationJobName, final Job job) {\n-        String key = StringUtils.isNotBlank(annotationJobName) ? annotationJobName : job.getClass().getCanonicalName();\n-        return JobKey.jobKey(key, job.getGroupName());\n-    }\n-\n-    protected Stream<ScheduledJob> allJobsWithEveryAnnotation() {\n-        return jobs.allEvery()\n-                .map(job -> {\n-                    Class<? extends Job> clazz = job.getClass();\n-                    Every everyAnnotation = clazz.getAnnotation(Every.class);\n-\n-                    long interval = getInterval(clazz, everyAnnotation);\n-                    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()\n-                            .withIntervalInMilliseconds(interval);\n-\n-                    int repeatCount = everyAnnotation.repeatCount();\n-                    applyRepeatCount(repeatCount, scheduleBuilder);\n-\n-                    MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();\n-                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);\n-\n-                    Instant start = extractStart(clazz);\n-                    int priority = everyAnnotation.priority();\n-                    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder)\n-                            .startAt(Date.from(start))\n-                            .withPriority(priority)\n-                            .build();\n-\n-                    // ensure that only one instance of each job is scheduled\n-                    JobKey jobKey = createJobKey(everyAnnotation.jobName(), job);\n-                    String message = extractMessage(clazz, jobKey);\n-                    boolean requestRecovery = everyAnnotation.requestRecovery();\n-                    boolean storeDurably = everyAnnotation.storeDurably();\n-                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n-                });\n-    }\n-\n-    private long getInterval(Class<? extends Job> clazz, Every everyAnnotation) {\n-        String value = everyAnnotation.value();\n-        if (value.isEmpty() || value.matches(\"\\\\$\\\\{.*\\\\}\")) {\n-            value = readDurationFromConfig(everyAnnotation, clazz, configuration);\n-            log.info(clazz + \" is configured in the config file to run every \" + value);\n-        }\n-        return TimeParserUtil.parseDuration(value);\n-    }\n-\n-    private void applyRepeatCount(int repeatCount, SimpleScheduleBuilder scheduleBuilder) {\n-        if (repeatCount > -1)\n-            scheduleBuilder.withRepeatCount(repeatCount);\n-        else\n-            scheduleBuilder.repeatForever();\n-    }\n-\n-    private void applyMisfirePolicy(MisfirePolicy misfirePolicy, SimpleScheduleBuilder scheduleBuilder) {\n-        switch (misfirePolicy) {\n-            case IGNORE_MISFIRES:\n-                scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n-                break;\n-            case FIRE_NOW:\n-                scheduleBuilder.withMisfireHandlingInstructionFireNow();\n-                break;\n-            case NOW_WITH_EXISTING_COUNT:\n-                scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n-                break;\n-            case NOW_WITH_REMAINING_COUNT:\n-                scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n-                break;\n-            case NEXT_WITH_EXISTING_COUNT:\n-                scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n-                break;\n-            case NEXT_WITH_REMAINING_COUNT:\n-                scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n-                break;\n-            default:\n-                log.warn(\"Nothing to do for the misfire policy: {}\", misfirePolicy);\n-                break;\n-        }\n-    }\n-\n-    private String extractMessage(Class<? extends Job> clazz, JobKey jobKey) {\n-        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n-        Every everyAnnotation = clazz.getAnnotation(Every.class);\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString()));\n-        if (delayAnnotation != null) {\n-            sb.append(\" (\").append(delayAnnotation.value()).append(\" delay)\");\n-        }\n-        return sb.toString();\n-    }\n-\n-    private Instant extractStart(Class<? extends Job> clazz) {\n-        Instant start = Instant.now();\n-        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n-        if (delayAnnotation != null) {\n-            long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n-            start = start.plusMillis(milliSecondDelay);\n-        }\n-        return start;\n-    }\n-\n-    protected void scheduleAllJobsOnApplicationStart() throws SchedulerException {\n-        List<JobDetail> jobDetails = jobs.allOnApplicationStart()\n-                .map(JobManager::build)\n-                .collect(Collectors.toList());\n-\n-        if (!jobDetails.isEmpty()) {\n-            log.info(\"Jobs to run on application start:\");\n-            for (JobDetail jobDetail : jobDetails) {\n-                scheduler.scheduleJob(jobDetail, Set.of(nowTrigger()), true);\n-                log.info(\"   \" + jobDetail.getJobClass().getCanonicalName());\n-            }\n-        }\n+        scheduler.scheduleJob(jobDetail, Set.of(nowTrigger), true);", "@@ -327 +128 @@ public class JobManager implements Managed {\n-    private void scheduleOrRescheduleJob(ScheduledJob job) {\n+    public void scheduleOrRescheduleJob(ScheduledJob job) {\n--- /dev/null", "@@ -0,0 +1,15 @@\n+package io.dropwizard.jobs;\n+\n+import org.quartz.JobDetail;\n+import org.quartz.SchedulerException;\n+\n+public interface JobMediator {\n+    JobFilters getJobs();\n+\n+    JobConfiguration getConfiguration();\n+\n+    void scheduleNow(JobDetail jobDetail) throws SchedulerException;\n+\n+    void scheduleOrRescheduleJob(ScheduledJob scheduledJob);\n+\n+}\n--- /dev/null", "@@ -0,0 +1,20 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.JobConfiguration;\n+import org.apache.commons.text.WordUtils;\n+import org.quartz.Job;\n+\n+abstract class AnnotationReader {\n+\n+    static String readDurationFromConfig(String value, Class<? extends Job> clazz, JobConfiguration configuration) {\n+        if (configuration == null) {\n+            return null;\n+        }\n+        String property = WordUtils.uncapitalize(clazz.getSimpleName());\n+        if (!value.isEmpty()) {\n+            property = value.substring(2, value.length() - 1);\n+        }\n+        return configuration.getJobs().getOrDefault(property, null);\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,41 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.JobConfiguration;\n+import org.quartz.CronScheduleBuilder;\n+\n+import java.util.TimeZone;\n+\n+public class CronExpressionParser {\n+    private final TimeZone defaultTimezone;\n+\n+    public CronExpressionParser(JobConfiguration configuration) {\n+        this.defaultTimezone = readDefaultTimezoneFromConfiguration(configuration);\n+    }\n+\n+    private TimeZone readDefaultTimezoneFromConfiguration(JobConfiguration configuration) {\n+        if (configuration != null && configuration.getQuartzConfiguration().containsKey(\"de.spinscale.dropwizard.jobs.timezone\")) {\n+            return TimeZone.getTimeZone(configuration.getQuartzConfiguration().get(\"de.spinscale.dropwizard.jobs.timezone\"));\n+        } else {\n+            return TimeZone.getDefault();\n+        }\n+    }\n+\n+\n+    /**\n+     * Allow timezone to be configured on a per-cron basis with [timezoneName] appended to the cron format\n+     *\n+     * @param cronExpression the modified cron format\n+     * @return the cron schedule with the timezone applied to it if needed\n+     */\n+    public CronScheduleBuilder parse(String cronExpression) {\n+        int i = cronExpression.indexOf(\"[\");\n+        int j = cronExpression.indexOf(\"]\");\n+        TimeZone timezone = defaultTimezone;\n+        if (i > -1 && j > -1) {\n+            timezone = TimeZone.getTimeZone(cronExpression.substring(i + 1, j));\n+            cronExpression = cronExpression.substring(0, i).trim();\n+        }\n+        return CronScheduleBuilder.cronSchedule(cronExpression).inTimeZone(timezone);\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,134 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.Job;\n+import io.dropwizard.jobs.JobConfiguration;\n+import io.dropwizard.jobs.JobMediator;\n+import io.dropwizard.jobs.ScheduledJob;\n+import io.dropwizard.jobs.annotations.DelayStart;\n+import io.dropwizard.jobs.annotations.Every;\n+import io.dropwizard.jobs.parser.TimeParserUtil;\n+import org.quartz.JobKey;\n+import org.quartz.SimpleScheduleBuilder;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.stream.Stream;\n+\n+import static io.dropwizard.jobs.scheduler.AnnotationReader.readDurationFromConfig;\n+\n+public class EveryScheduler extends JobScheduler {\n+    public EveryScheduler(JobMediator mediator) {\n+        super(mediator);\n+    }\n+\n+    @Override\n+    public void schedule() {\n+        this.scheduledJobs()\n+                .forEach(mediator::scheduleOrRescheduleJob);\n+    }\n+\n+    protected Stream<ScheduledJob> scheduledJobs() {\n+        return mediator.getJobs()\n+                .allEvery()\n+                .map(job -> {\n+                    Class<? extends Job> clazz = job.getClass();\n+                    Every everyAnnotation = clazz.getAnnotation(Every.class);\n+\n+                    long interval = getInterval(everyAnnotation, clazz);\n+                    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()\n+                            .withIntervalInMilliseconds(interval);\n+\n+                    int repeatCount = everyAnnotation.repeatCount();\n+                    applyRepeatCount(repeatCount, scheduleBuilder);\n+\n+                    Every.MisfirePolicy misfirePolicy = everyAnnotation.misfirePolicy();\n+                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);\n+\n+                    Instant start = extractStart(clazz);\n+                    int priority = everyAnnotation.priority();\n+                    Trigger trigger = TriggerBuilder.newTrigger().withSchedule(scheduleBuilder)\n+                            .startAt(Date.from(start))\n+                            .withPriority(priority)\n+                            .build();\n+\n+                    // ensure that only one instance of each job is scheduled\n+                    JobKey jobKey = createJobKey(everyAnnotation.jobName(), job);\n+                    String message = extractMessage(clazz, jobKey);\n+                    boolean requestRecovery = everyAnnotation.requestRecovery();\n+                    boolean storeDurably = everyAnnotation.storeDurably();\n+                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n+                });\n+    }\n+\n+    private long getInterval(Every everyAnnotation, Class<? extends Job> clazz) {\n+        String value = everyAnnotation.value();\n+        String expression = durationOrPlainExpression(value, clazz);\n+        return TimeParserUtil.parseDuration(expression);\n+    }\n+\n+    protected String durationOrPlainExpression(String expression, Class<? extends Job> clazz) {\n+        if (expression.isEmpty() || expression.matches(\"\\\\$\\\\{.*\\\\}\")) {\n+            JobConfiguration configuration = mediator.getConfiguration();\n+            expression = readDurationFromConfig(expression, clazz, configuration);\n+            log.info(clazz + \" is configured in the config file to run every \" + expression);\n+        }\n+        return expression;\n+    }\n+\n+    private void applyRepeatCount(int repeatCount, SimpleScheduleBuilder scheduleBuilder) {\n+        if (repeatCount > -1)\n+            scheduleBuilder.withRepeatCount(repeatCount);\n+        else\n+            scheduleBuilder.repeatForever();\n+    }\n+\n+    private void applyMisfirePolicy(Every.MisfirePolicy misfirePolicy, SimpleScheduleBuilder scheduleBuilder) {\n+        switch (misfirePolicy) {\n+            case IGNORE_MISFIRES:\n+                scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+                break;\n+            case FIRE_NOW:\n+                scheduleBuilder.withMisfireHandlingInstructionFireNow();\n+                break;\n+            case NOW_WITH_EXISTING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNowWithExistingCount();\n+                break;\n+            case NOW_WITH_REMAINING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNowWithRemainingCount();\n+                break;\n+            case NEXT_WITH_EXISTING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNextWithExistingCount();\n+                break;\n+            case NEXT_WITH_REMAINING_COUNT:\n+                scheduleBuilder.withMisfireHandlingInstructionNextWithRemainingCount();\n+                break;\n+            default:\n+                log.warn(\"Nothing to do for the misfire policy: {}\", misfirePolicy);\n+                break;\n+        }\n+    }\n+\n+    private String extractMessage(Class<? extends Job> clazz, JobKey jobKey) {\n+        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n+        Every everyAnnotation = clazz.getAnnotation(Every.class);\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(String.format(\"    %-7s %s\", everyAnnotation.value(), jobKey.toString()));\n+        if (delayAnnotation != null) {\n+            sb.append(\" (\").append(delayAnnotation.value()).append(\" delay)\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    private Instant extractStart(Class<? extends Job> clazz) {\n+        Instant start = Instant.now();\n+        DelayStart delayAnnotation = clazz.getAnnotation(DelayStart.class);\n+        if (delayAnnotation != null) {\n+            long milliSecondDelay = TimeParserUtil.parseDuration(delayAnnotation.value());\n+            start = start.plusMillis(milliSecondDelay);\n+        }\n+        return start;\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,41 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.Job;\n+import io.dropwizard.jobs.JobMediator;\n+import org.apache.commons.lang3.StringUtils;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDetail;\n+import org.quartz.JobKey;\n+import org.quartz.SchedulerException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class JobScheduler {\n+    final Logger log;\n+\n+    final JobMediator mediator;\n+\n+    public JobScheduler(JobMediator mediator) {\n+        this.mediator = mediator;\n+        this.log = LoggerFactory.getLogger(getClass());\n+    }\n+\n+    public abstract void schedule() throws SchedulerException;\n+\n+    protected JobDetail build(Job job) {\n+        Class<? extends Job> jobClass = job.getClass();\n+        String jobClassName = jobClass.getName();\n+        String jobGroupName = job.getGroupName();\n+        return JobBuilder\n+                .newJob(jobClass)\n+                .withIdentity(jobClassName, jobGroupName)\n+                .build();\n+    }\n+\n+\n+    protected JobKey createJobKey(final String jobName, final Job job) {\n+        String key = StringUtils.isNotBlank(jobName) ? jobName : job.getClass().getCanonicalName();\n+        return JobKey.jobKey(key, job.getGroupName());\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,31 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.JobMediator;\n+import org.quartz.JobDetail;\n+import org.quartz.SchedulerException;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class OnApplicationStartScheduler extends JobScheduler {\n+    public OnApplicationStartScheduler(JobMediator mediator) {\n+        super(mediator);\n+    }\n+\n+    @Override\n+    public void schedule() throws SchedulerException {\n+\n+        List<JobDetail> jobDetails = mediator.getJobs()\n+                .allOnApplicationStart()\n+                .map(this::build)\n+                .collect(Collectors.toList());\n+\n+        if (!jobDetails.isEmpty()) {\n+            log.info(\"Jobs to run on application start:\");\n+            for (JobDetail jobDetail : jobDetails) {\n+                mediator.scheduleNow(jobDetail);\n+                log.info(\"   \" + jobDetail.getJobClass().getCanonicalName());\n+            }\n+        }\n+    }\n+}\n--- /dev/null", "@@ -0,0 +1,27 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.JobMediator;\n+import org.quartz.JobDetail;\n+import org.quartz.SchedulerException;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class OnApplicationStopScheduler extends JobScheduler {\n+    public OnApplicationStopScheduler(JobMediator mediator) {\n+        super(mediator);\n+    }\n+\n+    @Override\n+    public void schedule() throws SchedulerException {\n+\n+        List<JobDetail> jobDetails = mediator.getJobs()\n+                .allOnApplicationStop()\n+                .map(this::build)\n+                .collect(Collectors.toList());\n+        for (JobDetail jobDetail : jobDetails) {\n+            mediator.scheduleNow(jobDetail);\n+        }\n+\n+    }\n+}\n--- /dev/null", "@@ -0,0 +1,80 @@\n+package io.dropwizard.jobs.scheduler;\n+\n+import io.dropwizard.jobs.Job;\n+import io.dropwizard.jobs.JobConfiguration;\n+import io.dropwizard.jobs.JobMediator;\n+import io.dropwizard.jobs.ScheduledJob;\n+import io.dropwizard.jobs.annotations.On;\n+import org.apache.commons.lang3.StringUtils;\n+import org.quartz.CronScheduleBuilder;\n+import org.quartz.JobKey;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+\n+import java.time.ZoneId;\n+import java.util.TimeZone;\n+import java.util.stream.Stream;\n+\n+public class OnCronScheduler extends EveryScheduler {\n+\n+    private final CronExpressionParser cronExpressionParser;\n+\n+    public OnCronScheduler(JobMediator mediator) {\n+        super(mediator);\n+        JobConfiguration configuration = mediator.getConfiguration();\n+        this.cronExpressionParser = new CronExpressionParser(configuration);\n+    }\n+\n+    protected Stream<ScheduledJob> scheduledJobs() {\n+        return mediator.getJobs()\n+                .allOnCron()\n+                .map(job -> {\n+\n+                    Class<? extends Job> clazz = job.getClass();\n+                    On onAnnotation = clazz.getAnnotation(On.class);\n+                    String value = onAnnotation.value();\n+                    String cronExpression = durationOrPlainExpression(value, clazz);\n+\n+                    boolean requestRecovery = onAnnotation.requestRecovery();\n+                    boolean storeDurably = onAnnotation.storeDurably();\n+\n+                    CronScheduleBuilder scheduleBuilder = cronExpressionParser.parse(cronExpression);\n+\n+                    String timeZoneStr = onAnnotation.timeZone();\n+                    applyTimezone(timeZoneStr, scheduleBuilder);\n+\n+                    On.MisfirePolicy misfirePolicy = onAnnotation.misfirePolicy();\n+                    applyMisfirePolicy(misfirePolicy, scheduleBuilder);\n+\n+                    int priority = onAnnotation.priority();\n+                    Trigger trigger = TriggerBuilder.newTrigger()\n+                            .withSchedule(scheduleBuilder)\n+                            .withPriority(priority)\n+                            .build();\n+\n+                    // ensure that only one instance of each job is scheduled\n+                    JobKey jobKey = createJobKey(onAnnotation.jobName(), job);\n+\n+                    String message = String.format(\"    %-21s %s\", cronExpression, jobKey.toString());\n+                    return new ScheduledJob(jobKey, clazz, trigger, requestRecovery, storeDurably, message);\n+                });\n+    }\n+\n+    private void applyTimezone(String timeZoneStr, CronScheduleBuilder scheduleBuilder) {\n+        if (StringUtils.isNotBlank(timeZoneStr)) {\n+            TimeZone timeZone = TimeZone.getTimeZone(ZoneId.of(timeZoneStr));\n+            scheduleBuilder.inTimeZone(timeZone);\n+        }\n+    }\n+\n+    private void applyMisfirePolicy(On.MisfirePolicy misfirePolicy, CronScheduleBuilder scheduleBuilder) {\n+        if (misfirePolicy == On.MisfirePolicy.IGNORE_MISFIRES)\n+            scheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();\n+        else if (misfirePolicy == On.MisfirePolicy.DO_NOTHING)\n+            scheduleBuilder.withMisfireHandlingInstructionDoNothing();\n+        else if (misfirePolicy == On.MisfirePolicy.FIRE_AND_PROCEED)\n+            scheduleBuilder.withMisfireHandlingInstructionFireAndProceed();\n+    }\n+\n+\n+}", "@@ -3,15 +3,3 @@ package io.dropwizard.jobs;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TimeZone;\n-import java.util.concurrent.TimeUnit;\n-\n+import io.dropwizard.jobs.annotations.Every;\n+import io.dropwizard.jobs.annotations.On;\n+import io.dropwizard.jobs.scheduler.CronExpressionParser;", "@@ -21,5 +9 @@ import org.junit.jupiter.api.Test;\n-import org.quartz.CronTrigger;\n-import org.quartz.JobDetail;\n-import org.quartz.JobKey;\n-import org.quartz.SchedulerConfigException;\n-import org.quartz.Trigger;\n+import org.quartz.*;", "@@ -29,2 +13,7 @@ import org.quartz.impl.triggers.CronTriggerImpl;\n-import io.dropwizard.jobs.annotations.Every;\n-import io.dropwizard.jobs.annotations.On;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.*;", "@@ -35,9 +24,9 @@ public class JobManagerTest {\n-    private ApplicationStartTestJob startTestJob = new ApplicationStartTestJob();\n-    private OnTestJob onTestJob = new OnTestJob();\n-    private OnTestJobWithJobName onTestJobWithJobName = new OnTestJobWithJobName();\n-    private EveryTestJob everyTestJob = new EveryTestJob();\n-    private EveryTestJobWithDelay everyTestJobWithDelay = new EveryTestJobWithDelay();\n-    private EveryTestJobAlternativeConfiguration everyTestJobAlternativeConfiguration = new EveryTestJobAlternativeConfiguration();\n-    private EveryTestJobWithJobName everyTestJobWithJobName = new EveryTestJobWithJobName();\n-    private ApplicationStopTestJob applicationStopTestJob = new ApplicationStopTestJob();\n-    private OnTestJobAlternativeConfiguration onTestJobAlternativeConfiguration = new OnTestJobAlternativeConfiguration();\n+    private final ApplicationStartTestJob startTestJob = new ApplicationStartTestJob();\n+    private final OnTestJob onTestJob = new OnTestJob();\n+    private final OnTestJobWithJobName onTestJobWithJobName = new OnTestJobWithJobName();\n+    private final EveryTestJob everyTestJob = new EveryTestJob();\n+    private final EveryTestJobWithDelay everyTestJobWithDelay = new EveryTestJobWithDelay();\n+    private final EveryTestJobAlternativeConfiguration everyTestJobAlternativeConfiguration = new EveryTestJobAlternativeConfiguration();\n+    private final EveryTestJobWithJobName everyTestJobWithJobName = new EveryTestJobWithJobName();\n+    private final ApplicationStopTestJob applicationStopTestJob = new ApplicationStopTestJob();\n+    private final OnTestJobAlternativeConfiguration onTestJobAlternativeConfiguration = new OnTestJobAlternativeConfiguration();", "@@ -106,2 +95,2 @@ public class JobManagerTest {\n-        assertEquals(false, jobDetail.requestsRecovery());\n-        assertEquals(false, jobDetail.isDurable());\n+        assertFalse(jobDetail.requestsRecovery());\n+        assertFalse(jobDetail.isDurable());", "@@ -115,2 +104,2 @@ public class JobManagerTest {\n-        assertEquals(false, jobDetail.requestsRecovery());\n-        assertEquals(false, jobDetail.isDurable());\n+        assertFalse(jobDetail.requestsRecovery());\n+        assertFalse(jobDetail.isDurable());", "@@ -126,4 +115,4 @@ public class JobManagerTest {\n-            new TestConfig(),\n-            new OnTestJobWithVariableGroupName(\"group_one\"),\n-            new OnTestJobWithVariableGroupName(\"group_two\"),\n-            new EveryTestJobWithDefaultConfiguration()\n+                new TestConfig(),\n+                new OnTestJobWithVariableGroupName(\"group_one\"),\n+                new OnTestJobWithVariableGroupName(\"group_two\"),\n+                new EveryTestJobWithDefaultConfiguration()", "@@ -150,3 +139,3 @@ public class JobManagerTest {\n-            new TestConfig(),\n-            new EveryTestJobWithDefaultConfiguration(),\n-            new EveryTestJobWithDefaultConfiguration()\n+                new TestConfig(),\n+                new EveryTestJobWithDefaultConfiguration(),\n+                new EveryTestJobWithDefaultConfiguration()", "@@ -171 +160 @@ public class JobManagerTest {\n-            new OnTestJobWithDefaultConfiguration());\n+                new OnTestJobWithDefaultConfiguration());", "@@ -193,2 +182,2 @@ public class JobManagerTest {\n-        assertEquals(true, jobDetail.requestsRecovery());\n-        assertEquals(true, jobDetail.isDurable());\n+        assertTrue(jobDetail.requestsRecovery());\n+        assertTrue(jobDetail.isDurable());", "@@ -202,2 +191,2 @@ public class JobManagerTest {\n-        assertEquals(true, jobDetail.requestsRecovery());\n-        assertEquals(true, jobDetail.isDurable());\n+        assertTrue(jobDetail.requestsRecovery());\n+        assertTrue(jobDetail.isDurable());", "@@ -251,0 +241 @@ public class JobManagerTest {\n+        CronExpressionParser cronExpressionParser = new CronExpressionParser(config);", "@@ -257 +247 @@ public class JobManagerTest {\n-        CronTriggerImpl trigger1 = (CronTriggerImpl)(jobManager.createCronScheduleBuilder(\"0 15 10 ? * *\").build());\n+        CronTriggerImpl trigger1 = (CronTriggerImpl) (cronExpressionParser.parse(\"0 15 10 ? * *\").build());", "@@ -262 +252 @@ public class JobManagerTest {\n-        CronTriggerImpl trigger2 = (CronTriggerImpl)(jobManager.createCronScheduleBuilder(\"0 15 10 ? * * [America/Los_Angeles]\").build());\n+        CronTriggerImpl trigger2 = (CronTriggerImpl) (cronExpressionParser.parse(\"0 15 10 ? * * [America/Los_Angeles]\").build());", "@@ -268 +258 @@ public class JobManagerTest {\n-        private Map<String, String> quartzConfiguration;\n+        private final Map<String, String> quartzConfiguration;", "@@ -275 +265 @@ public class JobManagerTest {\n-        private Map<String, String> jobs = new HashMap<>();\n+        private final Map<String, String> jobs = new HashMap<>();", "@@ -287 +277 @@ public class JobManagerTest {\n-    class EveryTestJobWithDefaultConfiguration extends AbstractJob {\n+    static class EveryTestJobWithDefaultConfiguration extends AbstractJob {", "@@ -294 +284 @@ public class JobManagerTest {\n-    class OnTestJobWithDefaultConfiguration extends AbstractJob {\n+    static class OnTestJobWithDefaultConfiguration extends AbstractJob {", "@@ -301 +291 @@ public class JobManagerTest {\n-    class OnTestJobWithVariableGroupName extends AbstractJob {\n+    static class OnTestJobWithVariableGroupName extends AbstractJob {", "@@ -308 +298 @@ public class JobManagerTest {\n-    class OnTestJobWithTimeZoneConfiguration extends AbstractJob {\n+    static class OnTestJobWithTimeZoneConfiguration extends AbstractJob {", "@@ -315 +305 @@ public class JobManagerTest {\n-    class EveryTestJobWithNonDefaultConfiguration extends AbstractJob {\n+    static class EveryTestJobWithNonDefaultConfiguration extends AbstractJob {", "@@ -322 +312 @@ public class JobManagerTest {\n-    class OnTestJobWithNonDefaultConfiguration extends AbstractJob {\n+    static class OnTestJobWithNonDefaultConfiguration extends AbstractJob {\n"]}, {"id": "0982bbbceca72d68b1af99ef854a94505e538900", "message": "refactor: increase readability\n", "patch": ["@@ -50 +50 @@ public class JobFilters {\n-        return Key.DEFAULT_GROUP.equals(groupName) && jobGroupName == null\n+        return (Objects.equals(groupName, Key.DEFAULT_GROUP) && jobGroupName == null)\n"]}, {"id": "c13f51d7ed1a483aa0a71045ed2a5e85f30308a8", "message": "refactor: make readonly fields final\n", "patch": ["@@ -15 +15 @@ public class GuiceJobFactory implements JobFactory {\n-    private Injector injector;\n+    private final Injector injector;", "@@ -8 +8 @@ public class GuiceJobsBundle extends JobsBundle {\n-    private Injector injector;\n+    private final Injector injector;", "@@ -8 +8 @@ public class SpringJobsBundle extends JobsBundle {\n-    private ApplicationContext context;\n+    private final ApplicationContext context;\n"]}, {"id": "d73eedd0fa664c33968ee148f15365f81bfd282d", "message": "refactor: replace job array with list\n", "patch": ["@@ -12,0 +13 @@ import io.dropwizard.core.setup.Environment;\n+import java.util.ArrayList;", "@@ -68,0 +70 @@ public class Hk2JobsBundle extends JobsBundle {\n+        super(new ArrayList<>());", "@@ -83 +85 @@ public class Hk2JobsBundle extends JobsBundle {\n-                jobManager = new JobManager(configuration, jobs.toArray(new Job[jobs.size()])) {\n+                jobManager = new JobManager(configuration, jobs) {", "@@ -9 +9 @@ import org.quartz.utils.Key;\n-import java.util.Arrays;\n+import java.util.List;", "@@ -15,3 +15 @@ public class JobFilters {\n-    private final Job[] jobs;\n-\n-    public JobFilters(Job[] jobs) {\n+    private final List<Job> jobs;", "@@ -18,0 +17 @@ public class JobFilters {\n+    public JobFilters(List<Job> jobs) {", "@@ -23 +22 @@ public class JobFilters {\n-        return Arrays.stream(jobs)\n+        return jobs.stream()", "@@ -28 +27 @@ public class JobFilters {\n-        return Arrays.stream(this.jobs)\n+        return jobs.stream()", "@@ -33 +32 @@ public class JobFilters {\n-        return Arrays.stream(this.jobs)\n+        return jobs.stream()", "@@ -38 +37 @@ public class JobFilters {\n-        return Arrays.stream(this.jobs)\n+        return jobs.stream()", "@@ -43 +42 @@ public class JobFilters {\n-        return Arrays.stream(this.jobs)\n+        return jobs.stream()", "@@ -31,2 +31 @@ public class JobManager implements Managed, JobMediator {\n-\n-    public JobManager(JobConfiguration configuration, Job... jobs) {\n+    public JobManager(JobConfiguration configuration, List<Job> jobs) {", "@@ -8,0 +9,2 @@ import org.quartz.Scheduler;\n+import java.util.List;\n+", "@@ -11 +13 @@ public class JobsBundle implements ConfiguredBundle<JobConfiguration> {\n-    private final Job[] jobs;\n+    private final List<Job> jobs;", "@@ -14 +16 @@ public class JobsBundle implements ConfiguredBundle<JobConfiguration> {\n-    public JobsBundle(Job... jobs) {\n+    public JobsBundle(List<Job> jobs) {", "@@ -19,0 +20 @@ import static io.dropwizard.jobs.scheduler.AnnotationReader.readDurationFromConf\n+import static org.apache.commons.lang3.StringUtils.isEmpty;", "@@ -74 +75,2 @@ public class EveryScheduler extends JobScheduler {\n-            expression = readDurationFromConfig(expression, clazz, configuration);\n+            String fromConfig = readDurationFromConfig(expression, clazz, configuration);\n+            expression = !isEmpty(fromConfig) ? fromConfig : expression;", "@@ -23 +23 @@ public class JobManagerTest {\n-    private JobManager jobManager = new JobManager(new TestConfig());\n+    private JobManager jobManager = new JobManager(new TestConfig(), new ArrayList<>());", "@@ -40 +40 @@ public class JobManagerTest {\n-        jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+        jobManager = new JobManager(config, List.of(startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,", "@@ -42 +42 @@ public class JobManagerTest {\n-                applicationStopTestJob, onTestJobAlternativeConfiguration);\n+                applicationStopTestJob, onTestJobAlternativeConfiguration));", "@@ -86,2 +86,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(new TestConfig(), new EveryTestJobWithDefaultConfiguration(),\n-                new OnTestJobWithDefaultConfiguration());\n+        jobManager = new JobManager(new TestConfig(), List.of(new EveryTestJobWithDefaultConfiguration(),\n+                new OnTestJobWithDefaultConfiguration()));", "@@ -114,6 +114,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(\n-                new TestConfig(),\n-                new OnTestJobWithVariableGroupName(\"group_one\"),\n-                new OnTestJobWithVariableGroupName(\"group_two\"),\n-                new EveryTestJobWithDefaultConfiguration()\n-        );\n+        jobManager = new JobManager(new TestConfig(), List.of(new OnTestJobWithVariableGroupName(\"group_one\"),\n+                new OnTestJobWithVariableGroupName(\"group_two\"), new EveryTestJobWithDefaultConfiguration()));", "@@ -138,5 +134,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(\n-                new TestConfig(),\n-                new EveryTestJobWithDefaultConfiguration(),\n-                new EveryTestJobWithDefaultConfiguration()\n-        );\n+        jobManager = new JobManager(new TestConfig(), List.of(new EveryTestJobWithDefaultConfiguration(),\n+                new EveryTestJobWithDefaultConfiguration()));", "@@ -159,2 +152,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(new TestConfig(), new OnTestJobWithTimeZoneConfiguration(),\n-                new OnTestJobWithDefaultConfiguration());\n+        jobManager = new JobManager(new TestConfig(), List.of(new OnTestJobWithTimeZoneConfiguration(),\n+                new OnTestJobWithDefaultConfiguration()));", "@@ -173,2 +166,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(new TestConfig(), new EveryTestJobWithNonDefaultConfiguration(),\n-                new OnTestJobWithNonDefaultConfiguration());\n+        jobManager = new JobManager(new TestConfig(), List.of(new EveryTestJobWithNonDefaultConfiguration(),\n+                new OnTestJobWithNonDefaultConfiguration()));", "@@ -204,2 +197,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n-                everyTestJobWithJobName);\n+        jobManager = new JobManager(config, List.of(startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+                everyTestJobWithJobName));", "@@ -219,2 +212,2 @@ public class JobManagerTest {\n-            jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n-                    everyTestJobWithJobName);\n+            jobManager = new JobManager(config, List.of(startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+                    everyTestJobWithJobName));", "@@ -230,2 +223,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n-                everyTestJobWithJobName);\n+        jobManager = new JobManager(config, List.of(startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+                everyTestJobWithJobName));", "@@ -243,2 +236,2 @@ public class JobManagerTest {\n-        jobManager = new JobManager(config, startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n-                everyTestJobWithJobName);\n+        jobManager = new JobManager(config, List.of(startTestJob, onTestJob, onTestJobWithJobName, everyTestJob,\n+                everyTestJobWithJobName));", "@@ -262 +255,2 @@ public class JobManagerTest {\n-            quartzConfiguration = (Map<String, String>) ((HashMap<String, String>) DefaultQuartzConfiguration.get()).clone();\n+            quartzConfiguration = (Map<String, String>) ((HashMap<String, String>) DefaultQuartzConfiguration.get())\n+                    .clone();", "@@ -304 +298,2 @@ public class JobManagerTest {\n-    @Every(value = \"10ms\", requestRecovery = true, storeDurably = true, priority = 20, misfirePolicy = Every.MisfirePolicy.IGNORE_MISFIRES)\n+    @Every(value = \"10ms\", requestRecovery = true, storeDurably = true, priority = 20,\n+            misfirePolicy = Every.MisfirePolicy.IGNORE_MISFIRES)", "@@ -311 +306,2 @@ public class JobManagerTest {\n-    @On(value = \"0/1 * * * * ?\", requestRecovery = true, storeDurably = true, priority = 20, misfirePolicy = On.MisfirePolicy.IGNORE_MISFIRES)\n+    @On(value = \"0/1 * * * * ?\", requestRecovery = true, storeDurably = true, priority = 20,\n+            misfirePolicy = On.MisfirePolicy.IGNORE_MISFIRES)", "@@ -3,12 +2,0 @@ package io.dropwizard.jobs;\n-import static io.dropwizard.jobs.Job.DROPWIZARD_JOBS_KEY;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasItem;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.notNullValue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import org.junit.jupiter.api.Test;\n-import org.mockito.ArgumentCaptor;\n-", "@@ -16 +3,0 @@ import com.codahale.metrics.SharedMetricRegistries;\n-", "@@ -20,0 +8,9 @@ import io.dropwizard.lifecycle.setup.LifecycleEnvironment;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.util.ArrayList;\n+\n+import static io.dropwizard.jobs.Job.DROPWIZARD_JOBS_KEY;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+import static org.mockito.Mockito.*;", "@@ -30 +26 @@ public class JobsBundleTest {\n-        final JobsBundle jobsBundle = new JobsBundle();\n+        final JobsBundle jobsBundle = new JobsBundle(new ArrayList<>());", "@@ -42,2 +38,2 @@ public class JobsBundleTest {\n-    public void should_add_dropwizard_jobs_to_metrics_registry() throws Exception {\n-        new JobsBundle().initialize(new Bootstrap<>(new Application<MyConfiguration>() {\n+    public void shouldAddDropwizardJobsToMetricsRegistry() {\n+        new JobsBundle(new ArrayList<>()).initialize(new Bootstrap<>(new Application<MyConfiguration>() {", "@@ -45 +41 @@ public class JobsBundleTest {\n-            public void run(MyConfiguration myConfiguration, Environment environment) throws Exception {\n+            public void run(MyConfiguration myConfiguration, Environment environment) {", "@@ -22 +22 @@ public class GuiceJobManager extends JobManager {\n-    static Job[] getJobs(Injector injector) {\n+    static List<Job> getJobs(Injector injector) {", "@@ -32 +32 @@ public class GuiceJobManager extends JobManager {\n-        return jobs.toArray(new Job[]{});\n+        return jobs;", "@@ -5,0 +6,2 @@ import io.dropwizard.core.setup.Environment;\n+import java.util.ArrayList;\n+", "@@ -10,0 +13 @@ public class GuiceJobsBundle extends JobsBundle {\n+        super(new ArrayList<>());", "@@ -5,0 +6,2 @@ import org.springframework.context.ApplicationContext;\n+import java.util.ArrayList;\n+", "@@ -11 +13 @@ public class SpringJobManager extends JobManager {\n-        super(config, context.getBeansOfType(Job.class).values().toArray(new Job[] {}));\n+        super(config, new ArrayList<>(context.getBeansOfType(Job.class).values()));", "@@ -5,0 +6,2 @@ import org.springframework.context.ApplicationContext;\n+import java.util.ArrayList;\n+", "@@ -10,0 +13 @@ public class SpringJobsBundle extends JobsBundle {\n+        super(new ArrayList<>());", "@@ -15 +18 @@ public class SpringJobsBundle extends JobsBundle {\n-    public void run(JobConfiguration configuration, Environment environment) throws Exception {\n+    public void run(JobConfiguration configuration, Environment environment) {\n"]}, {"id": "f027ab63a4e810b4fc30b26df6049d3edd156ef9", "message": "refactor: explicitly ignore timer context\n", "patch": ["@@ -41 +41 @@ public abstract class Job implements org.quartz.Job {\n-        try (Context timerContext = timer.time()) {\n+        try (Context ignored = timer.time()) {\n"]}]