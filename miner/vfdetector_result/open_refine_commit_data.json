[{"id": "7190dc798fabcdb9b7f38bdd71c180386199d483", "message": "Fix setting the log level from the command line (#6293). Fixes #6286\n\n* fixes #6286 : setting level supplied in argument globally using setAllLevels\r\n", "patch": ["@@ -56 +56,3 @@ import org.apache.commons.lang.SystemUtils;\n-import org.apache.log4j.Level;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.config.Configurator;", "@@ -99 +101,4 @@ public class Refine {\n-        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel(Configurations.get(\"refine.verbosity\", \"info\")));\n+        String logLevelArg = Configurations.get(\"refine.verbosity\");\n+        if (logLevelArg != null && !logLevelArg.isEmpty()) {\n+            Configurator.setAllLevels(LogManager.getRootLogger().getName(), Level.toLevel(logLevelArg));\n+        }\n"]}, {"id": "bb6481738a465dc4c54660f17e82b95497d1a7d3", "message": "Add tooltip on column headers obtained from data extension (#6285)\n\nCloses #5130\r\n\r\n---------\r\n\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>", "patch": ["@@ -57,0 +58 @@ public class Column {\n+    private ReconConfig _sourceReconConfig;", "@@ -97,0 +99,11 @@ public class Column {\n+    @JsonProperty(\"sourceReconConfig\")\n+    public void setSourceReconConfig(ReconConfig sourceConfig) {\n+        this._sourceReconConfig = sourceConfig;\n+    }\n+\n+    @JsonProperty(\"sourceReconConfig\")\n+    @JsonInclude(Include.NON_NULL)\n+    public ReconConfig getSourceReconConfig() {\n+        return _sourceReconConfig;\n+    }\n+", "@@ -222,0 +223,3 @@ public class DataExtensionChange implements Change {\n+                if (project.columnModel.getColumnByName(_baseColumnName) != null) {\n+                    column.setSourceReconConfig(project.columnModel.getColumnByName(_baseColumnName).getReconConfig());\n+                }", "@@ -52,0 +53,13 @@ public class ColumnTests {\n+                + \"   \\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"\n+                + \"   \\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"\n+                + \"   \\\"type\\\":{\\\"id\\\":\\\"Q43229\\\",\\\"name\\\":\\\"organization\\\"},\"\n+                + \"   \\\"autoMatch\\\":true,\"\n+                + \"   \\\"batchSize\\\":10,\"\n+                + \"   \\\"columnDetails\\\":[\"\n+                + \"      {\\\"column\\\":\\\"organization_country\\\",\\\"propertyName\\\":\\\"SPARQL: P17/P297\\\",\\\"propertyID\\\":\\\"P17/P297\\\"},\"\n+                + \"      {\\\"column\\\":\\\"organization_id\\\",\\\"propertyName\\\":\\\"SPARQL: P3500|P2427\\\",\\\"propertyID\\\":\\\"P3500|P2427\\\"}\"\n+                + \"    ],\"\n+                + \"    \\\"limit\\\":0},\"\n+                + \"\\\"sourceReconConfig\\\":{\"\n+                + \"   \\\"mode\\\":\\\"standard-service\\\",\"\n+                + \"   \\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"", "@@ -70,0 +71 @@ import com.google.refine.model.Row;\n+import com.google.refine.model.recon.DataExtensionReconConfig;", "@@ -156,0 +158,3 @@ public class ExtendDataOperationTests extends RefineTest {\n+        project.columnModel.getColumnByName(\"country\").setReconConfig(new DataExtensionReconConfig(RECON_SERVICE,\n+                RECON_IDENTIFIER_SPACE,\n+                RECON_SCHEMA_SPACE, null));", "@@ -286,0 +291,3 @@ public class ExtendDataOperationTests extends RefineTest {\n+            // adding an assertion for sourceReconConfig\n+            Assert.assertTrue(project.columnModel.getColumnByName(\"ISO 3166-1 alpha-2 code\").getSourceReconConfig() != null);\n+\n"]}, {"id": "918cd79cc184d78f4cc54ab898aac165ac08d59b", "message": "Merge pull request from GHSA-6p92-qfqf-qwx4\n\n", "patch": ["@@ -69,0 +70,7 @@ public class DatabaseConfiguration {\n+        // forbid setting settings inside the host parameter:\n+        // https://dev.mysql.com/doc/connector-j/en/connector-j-reference-jdbc-url-format.html\n+        if (databaseServer == null ||\n+                databaseServer.contains(\"(\") ||\n+                databaseServer.contains(\"=\")) {\n+            throw new IllegalArgumentException(\"Invalid host supplied\");\n+        }", "@@ -4,0 +5 @@ import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;", "@@ -21,0 +23,9 @@ public class DatabaseConfigurationTest {\n+\n+    @Test\n+    public void testSetMaliciousHost() {\n+        DatabaseConfiguration config = new DatabaseConfiguration();\n+        config.setDatabaseType(\"mysql\");\n+\n+        assertThrows(IllegalArgumentException.class,\n+                () -> config.setDatabaseHost(\"127.0.0.1:3306,(allowLoadLocalInfile=true,allowUrlInLocalInfile=true),127.0.0.1\"));\n+    }\n"]}, {"id": "9629894e9ec09102e6d63c593e8f3482fada4f6b", "message": "The reconciliation errors are now selectable by facets (#6320)\n\n* The reonciliation errors are now selectable by facets\r\n\r\n* updates the failing tests\r\n\r\n* fixes the failing tests\r\n\r\n* suggested commits\r\n\r\n* fixes the exception\r\n\r\n* throws an exception if the user is manually setting the value of similar cells to error\r\n\r\n* Update main/src/com/google/refine/operations/recon/ReconJudgeSimilarCellsOperation.java\r\n\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>\r\n\r\n---------\r\n\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>", "patch": ["@@ -157,0 +158 @@ public class ReconClearOneCellCommand extends Command {\n+                int errorChange = 0;", "@@ -164,0 +166,2 @@ public class ReconClearOneCellCommand extends Command {\n+                if (oldJudgment == Judgment.Error)\n+                    errorChange--;", "@@ -169 +172,2 @@ public class ReconClearOneCellCommand extends Command {\n-                        stats.matchedTopics + matchChange);\n+                        stats.matchedTopics + matchChange,\n+                        stats.errorTopics + errorChange);", "@@ -193 +193,5 @@ public class ReconJudgeOneCellCommand extends Command {\n-                newCell.recon.judgment = Recon.Judgment.None;\n+                if (cell.recon.error == null) {\n+                    newCell.recon.judgment = Recon.Judgment.None;\n+                } else {\n+                    newCell.recon.judgment = Recon.Judgment.Error;\n+                }", "@@ -195 +198,0 @@ public class ReconJudgeOneCellCommand extends Command {\n-", "@@ -196,0 +200,5 @@ public class ReconJudgeOneCellCommand extends Command {\n+\n+            } else if (judgment == Judgment.Error) {\n+\n+                throw new IllegalArgumentException(\"Cannot manually set judgment to 'error'\");\n+", "@@ -224,0 +233 @@ public class ReconJudgeOneCellCommand extends Command {\n+                int errorsChange = 0;", "@@ -231,0 +241,3 @@ public class ReconJudgeOneCellCommand extends Command {\n+                if (oldJudgment == Judgment.Error) {\n+                    errorsChange--;\n+                }", "@@ -237,0 +250,3 @@ public class ReconJudgeOneCellCommand extends Command {\n+                if (newCell.recon.judgment == Judgment.Error) {\n+                    errorsChange++;\n+                }", "@@ -242 +257,2 @@ public class ReconJudgeOneCellCommand extends Command {\n-                        stats.matchedTopics + matchChange);\n+                        stats.matchedTopics + matchChange,\n+                        stats.errorTopics + errorsChange);", "@@ -72 +72,2 @@ public class Recon implements HasFields {\n-        New\n+        New, @JsonProperty(\"error\")\n+        Error", "@@ -80,0 +82,2 @@ public class Recon implements HasFields {\n+        } else if (judgment == Judgment.Error) {\n+            return \"errors\";", "@@ -91,0 +95,2 @@ public class Recon implements HasFields {\n+        } else if (\"errors\".equals(s)) {\n+            return Judgment.Error;", "@@ -200,0 +206 @@ public class Recon implements HasFields {\n+        r.error = error;", "@@ -53,0 +54,2 @@ public class ReconStats {\n+    @JsonProperty(\"errorTopics\")\n+    final public int errorTopics;", "@@ -59 +61,2 @@ public class ReconStats {\n-            @JsonProperty(\"matchedTopics\") int matchedTopics) {\n+            @JsonProperty(\"matchedTopics\") int matchedTopics,\n+            @JsonProperty(\"errorTopics\") int errorTopics) {", "@@ -62,0 +66 @@ public class ReconStats {\n+        this.errorTopics = errorTopics;", "@@ -68,0 +73 @@ public class ReconStats {\n+        int errorTopics = 0;", "@@ -79,0 +85,2 @@ public class ReconStats {\n+                    } else if (cell.recon.judgment == Judgment.Error) {\n+                        errorTopics++;", "@@ -85 +92 @@ public class ReconStats {\n-        return new ReconStats(nonBlanks, newTopics, matchedTopics);\n+        return new ReconStats(nonBlanks, newTopics, matchedTopics, errorTopics);", "@@ -466,0 +467 @@ public class StandardReconConfig extends ReconConfig {\n+            recon.judgment = Judgment.Error;", "@@ -472,0 +474 @@ public class StandardReconConfig extends ReconConfig {\n+            recon.judgment = Judgment.Error;", "@@ -490,0 +493 @@ public class StandardReconConfig extends ReconConfig {\n+                        recon.judgment = Judgment.Error;", "@@ -495,0 +499 @@ public class StandardReconConfig extends ReconConfig {\n+                    recon.judgment = Judgment.Error;", "@@ -508,0 +513 @@ public class StandardReconConfig extends ReconConfig {\n+            recon.judgment = Judgment.Error;", "@@ -225 +225 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper\n-                                    recon.judgment = Recon.Judgment.None;\n+                                    recon.judgment = recon.error == null ? Recon.Judgment.None : Recon.Judgment.Error;", "@@ -226,0 +227,2 @@ public class ReconJudgeSimilarCellsOperation extends EngineDependentMassCellOper\n+                                } else if (_judgment == Judgment.Error) {\n+                                    throw new IllegalArgumentException(\"Cannot manually set judgment to 'error'\");", "@@ -79 +79,2 @@ public class ColumnTests {\n-                + \"    \\\"matchedTopics\\\":222\"\n+                + \"    \\\"matchedTopics\\\":222,\"\n+                + \"    \\\"errorTopics\\\":0\"", "@@ -38,2 +38,2 @@ public class ReconStatsTests {\n-        ReconStats rs = new ReconStats(3, 1, 2);\n-        TestUtils.isSerializedTo(rs, \"{\\\"nonBlanks\\\":3,\\\"newTopics\\\":1,\\\"matchedTopics\\\":2}\");\n+        ReconStats rs = new ReconStats(3, 1, 2, 0);\n+        TestUtils.isSerializedTo(rs, \"{\\\"nonBlanks\\\":3,\\\"newTopics\\\":1,\\\"matchedTopics\\\":2,\\\"errorTopics\\\":0}\");", "@@ -300,0 +301 @@ public class StandardReconConfigTests extends RefineTest {\n+            assertEquals(cell.recon.judgment, Recon.Judgment.Error);\n"]}, {"id": "cef6a82778f04fe67cc939d220e0f31f64db2cfc", "message": "Improve GREL operators. Fixes #6341 Closes #6340 (#6342)\n\n- restrict string concatenation (+) to cases where\r\n  at least one operand is a string (to avoid things like\r\n  concatenating two dates as strings)\r\n- Add support for dates and strings to comparison operators\r\n  Strings use a collator for the default locale with\r\n  normalized decomposition for the comparisons.\r\n- Above implementation uses Comparable, so any future\r\n  data types that implement that interface should get\r\n  supported for free\r\n- Add a bunch more tests", "patch": ["@@ -92,0 +93,2 @@ public class Parser {\n+                // FIXME: This filters the <> operator which is returned from the Scanner. Fix one or the other\n+                // so that they agree with each other on whether it's an operator or not.", "@@ -288,0 +289,2 @@ public class Scanner {\n+                    // FIXME: Although this will scan <> as an operator, it will get filtered out in the\n+                    // Parser without generating an error", "@@ -35,0 +36 @@ package com.google.refine.grel.ast;\n+import java.text.Collator;", "@@ -80,0 +82 @@ public class OperatorCallExpr implements Evaluable {\n+                        // TODO: This will throw on divide by zero - return Double.Infinity / -Infinity instead?", "@@ -126,0 +129,20 @@ public class OperatorCallExpr implements Evaluable {\n+                } else if (args[0] instanceof String && args[1] instanceof String) {\n+                    String s1 = (String) args[0];\n+                    String s2 = (String) args[1];\n+                    Collator collator = Collator.getInstance();\n+                    collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n+//                    collator.setStrength(Collator.SECONDARY);\n+\n+                    if (\">\".equals(_op)) {\n+                        return collator.compare(s1, s2) > 0;\n+                    } else if (\">=\".equals(_op)) {\n+                        return collator.compare(s1, s2) >= 0;\n+                    } else if (\"<\".equals(_op)) {\n+                        return collator.compare(s1, s2) < 0;\n+                    } else if (\"<=\".equals(_op)) {\n+                        return collator.compare(s1, s2) <= 0;\n+                    } else if (\"==\".equals(_op)) {\n+                        return collator.compare(s1, s2) == 0;\n+                    } else if (\"!=\".equals(_op)) {\n+                        return collator.compare(s1, s2) != 0;\n+                    }", "@@ -129,2 +151,7 @@ public class OperatorCallExpr implements Evaluable {\n-                if (\"+\".equals(_op)) {\n-                    return args[0].toString() + args[1].toString();\n+                if (args[0] instanceof String || args[1] instanceof String) {\n+                    String s1 = args[0] instanceof String ? (String) args[0] : args[0].toString();\n+                    String s2 = args[1] instanceof String ? (String) args[1] : args[1].toString();\n+\n+                    if (\"+\".equals(_op)) {\n+                        return s1 + s2;\n+                    }", "@@ -131,0 +159,22 @@ public class OperatorCallExpr implements Evaluable {\n+\n+                if (args[0] instanceof Comparable && args[1] instanceof Comparable\n+                        && (args[0].getClass().isAssignableFrom(args[1].getClass()) ||\n+                                args[1].getClass().isAssignableFrom(args[0].getClass()))) {\n+                    Comparable s1 = (Comparable) args[0];\n+                    Comparable s2 = (Comparable) args[1];\n+\n+                    if (\">\".equals(_op)) {\n+                        return s1.compareTo(s2) > 0;\n+                    } else if (\">=\".equals(_op)) {\n+                        return s1.compareTo(s2) >= 0;\n+                    } else if (\"<\".equals(_op)) {\n+                        return s1.compareTo(s2) < 0;\n+                    } else if (\"<=\".equals(_op)) {\n+                        return s1.compareTo(s2) <= 0;\n+                    } else if (\"==\".equals(_op)) {\n+                        return s1.compareTo(s2) == 0;\n+                    } else if (\"!=\".equals(_op)) {\n+                        return s1.compareTo(s2) != 0;\n+                    }\n+                }\n+", "@@ -351 +351,6 @@ public class RefineTest {\n-        Assert.assertEquals(result.toString(), test[1], \"Wrong result for expression: \" + test[0]);\n+        if (test[1] != null) {\n+            Assert.assertNotNull(result, \"Expected \" + test[1] + \" for test \" + test[0]);\n+            Assert.assertEquals(result.toString(), test[1], \"Wrong result for expression: \" + test[0]);\n+        } else {\n+            Assert.assertNull(result, \"Wrong result for expression: \" + test[0]);\n+        }", "@@ -116,0 +117,4 @@ public class GrelTests extends RefineTest {\n+    static private String COMPARISON_OPERATORS[] = { \"==\", \"!=\", \">\", \"<\", \">=\", \"<=\", };\n+    static private String INVALID_OPERATORS[] = { \"=<\", \"=<\", \"**\", \"^\", \"!\", };\n+    static private String NUMERIC_OPERATORS[] = { \"+\", \"-\", \"*\", \"/\", \"%\", };\n+", "@@ -133,0 +138 @@ public class GrelTests extends RefineTest {\n+                // integer comparisons", "@@ -135,0 +141,3 @@ public class GrelTests extends RefineTest {\n+                { \"1!=2\", \"true\" },\n+                { \"1!=1\", \"false\" },\n+//                { \"1<>2\", \"true\" },  // Scanner considers this an operator, but not the parser", "@@ -142,0 +151,10 @@ public class GrelTests extends RefineTest {\n+                // mixed integer / float comparisons\n+                { \"1.0==1\", \"true\" },\n+                { \"1.0==2\", \"false\" },\n+                { \"1.0>2\", \"false\" },\n+                { \"1.0<2\", \"true\" },\n+                { \"1.0>1\", \"false\" },\n+                { \"1.0>=1\", \"true\" },\n+                { \"1.0<=2\", \"true\" },\n+                { \"2.0<=2\", \"true\" },\n+                { \"3.0<=2\", \"false\" },", "@@ -143,0 +162,5 @@ public class GrelTests extends RefineTest {\n+                // TODO: The cases below currently throw an exception\n+//                { \"1/0\", \"Infinity\" },\n+//                { \"-1/0\", \"-Infinity\" },\n+                { \"1.0/0.0\", \"Infinity\" },\n+                { \"-1.0/0.0\", \"-Infinity\" },", "@@ -168,12 +191,24 @@ public class GrelTests extends RefineTest {\n-                { \"1\", \"1\" },\n-                { \"1 + 1\", \"2\" },\n-                { \"1 + 1 + 1\", \"3\" },\n-                { \"1-1-1\", \"-1\" },\n-                { \"1-2-3\", \"-4\" },\n-                { \"1-(2-3)\", \"2\" },\n-                { \"2*3\", \"6\" },\n-                { \"3%2\", \"1\" },\n-                { \"3/2\", \"1\" },\n-                { \"3.0/2\", \"1.5\" },\n-                { \"1\", \"1\" },\n-                { \"0/0\", \"NaN\" },\n+                { \"'a' + 'b'\", \"ab\" },\n+                // TODO: automated fuzzing of all operators for incompatible operand types\n+                { \"'1/1/1900'.toDate() + 1\", null },\n+                { \"'1/1/1900'.toDate() + '1/1/1800'.toDate()\", null },\n+                { \"'1/1/1900'.toDate() > '1/1/1800'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() >= '1/1/1800'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() < '1/1/1800'.toDate()\", \"false\" },\n+                { \"'1/1/1900'.toDate() <= '1/1/1800'.toDate()\", \"false\" },\n+                { \"'1/1/1900'.toDate() != '1/1/1800'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() == '1/1/1800'.toDate()\", \"false\" },\n+                { \"'1/1/1900'.toDate() == '1/1/1900'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() >= '1/1/1900'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() <= '1/1/1900'.toDate()\", \"true\" },\n+                { \"'1/1/1900'.toDate() + ' foo'\", \"1900-01-01T00:00Z foo\" },\n+                { \"1 + ' foo'\", \"1 foo\" },\n+                { \"1.0 + ' foo'\", \"1.0 foo\" },\n+                { \"2 * 3.0 + ' foo'\", \"6.0 foo\" },\n+                { \"'a' > 'b'\", \"false\" },\n+                { \"'a' < 'b'\", \"true\" },\n+                { \"'a' == 'a'\", \"true\" },\n+                { \"'a' == 'b'\", \"false\" },\n+                { \"'a' != 'b'\", \"true\" },\n+                { \"'E\\u0301' == '\u00c9'\", \"true\" }, // combining accent equivalent to single character form\n+//                { \"\", \"\" },\n"]}, {"id": "05ff957f27aae8548bd241b78c0b0da7818df977", "message": "Trim whitespace around URL when creating a project from a URL (#6360)\n\nFixes #6330.\r\n---------\r\n\r\nCo-authored-by: suraj.bora <suraj.bora@ambitionbox.com>", "patch": ["@@ -277 +277 @@ public class ImportingUtilities {\n-                    String urlString = Streams.asString(stream);\n+                    String urlString = Streams.asString(stream).trim();", "@@ -66,0 +67 @@ import org.apache.commons.fileupload.FileUploadBase;\n+import org.apache.commons.fileupload.FileUploadException;", "@@ -68,0 +70 @@ import org.apache.commons.io.FileUtils;\n+import org.apache.hc.client5.http.ClientProtocolException;", "@@ -499,0 +502,52 @@ public class ImportingUtilitiesTests extends ImporterTest {\n+    /**\n+     * This test method is designed to validate the behavior of the system when a URL with a trailing space is used. It\n+     * simulates a scenario where a URL with a trailing space is used to retrieve content from a POST request. The\n+     * expected behavior is that the system should trim the URL and proceed with the request as normal.\n+     *\n+     * @throws IOException\n+     *             if an I/O error occurs during the test\n+     * @throws FileUploadException\n+     *             if a file upload error occurs during the test\n+     */\n+    @Test\n+    public void testTrailingSpaceInUrl() throws IOException, FileUploadException {\n+        String url = \"https://example.com/file.csv \";\n+        String message = String.format(\"HTTP error %d : %s for URL %s\", 404,\n+                \"Not Found\", url.trim());\n+        MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n+        StringBody stringBody = new StringBody(url, ContentType.MULTIPART_FORM_DATA);\n+        builder = builder.addPart(\"download\", stringBody);\n+        HttpEntity entity = builder.build();\n+\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        entity.writeTo(os);\n+        ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+\n+        HttpServletRequest req = mock(HttpServletRequest.class);\n+        when(req.getContentType()).thenReturn(entity.getContentType());\n+        when(req.getParameter(\"download\")).thenReturn(url);\n+        when(req.getMethod()).thenReturn(\"POST\");\n+        when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n+        when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n+\n+        ImportingJob job = ImportingManager.createJob();\n+        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n+        Progress dummyProgress = new Progress() {\n+\n+            @Override\n+            public void setProgress(String message, int percent) {\n+            }\n+\n+            @Override\n+            public boolean isCanceled() {\n+                return false;\n+            }\n+        };\n+        try {\n+            ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, dummyProgress);\n+            fail(\"No Exception was thrown\");\n+        } catch (ClientProtocolException exception) {\n+            assertEquals(exception.getMessage(), message);\n+        }\n+    }\n"]}, {"id": "a2199db761898d1b68b7dd73eaec1315998076f6", "message": "Remove spurious missing unit warning in Wikibase extension (#6359)\n\nFixes #5452", "patch": ["@@ -22 +22 @@ import org.openrefine.wikibase.qa.QAWarning;\n- * \n+ *", "@@ -98 +98 @@ public class QuantityScrutinizer extends SnakScrutinizer {\n-            if (allowedUnits != null &&\n+            if (allowedUnits != null && (currentUnit != null || !allowedUnits.isEmpty()) &&", "@@ -272,0 +273,22 @@ public class QuantityScrutinizerTest extends ValueScrutinizerTest {\n+\n+    @Test\n+    public void testNoUnitRequired() {\n+        ItemIdValue idA = TestingData.existingId;\n+        Snak mainSnak = Datamodel.makeValueSnak(propertyIdValue, integerValue);\n+        Statement statement = new StatementImpl(\"P1083\", mainSnak, idA);\n+        TermedStatementEntityEdit update = new ItemEditBuilder(idA)\n+                .addStatement(add(statement))\n+                .build();\n+\n+        Snak qualifierSnak = Datamodel.makeNoValueSnak(itemParameterPID);\n+        List<Snak> qualifierSnakList = Collections.singletonList(qualifierSnak);\n+        SnakGroup qualifierSnakGroup = Datamodel.makeSnakGroup(qualifierSnakList);\n+        List<SnakGroup> constraintQualifiers = Collections.singletonList(qualifierSnakGroup);\n+        List<Statement> constraintDefinitions = constraintParameterStatementList(allowedUnitEntity, constraintQualifiers);\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(propertyIdValue, ALLOWED_UNITS_CONSTRAINT_QID)).thenReturn(constraintDefinitions);\n+        setFetcher(fetcher);\n+\n+        scrutinize(update);\n+        assertNoWarningRaised();\n+    }\n"]}, {"id": "262a21da9bd414a46e40361155f6b91ab0a09680", "message": "Add more HTTP headers. Fixes #6334 (#6343)\n\nAdd support for Accept-Language, Accept-Charset, Accept-Encoding\r\nand If-Modified-Since.\r\n\r\nAlso switch to using constants instead of free form strings.", "patch": ["@@ -41,0 +42 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.http.HttpHeaders;", "@@ -66,3 +67,7 @@ abstract public class HttpHeadersSupport {\n-        registerHttpHeader(\"User-Agent\", RefineServlet.FULLNAME);\n-        registerHttpHeader(\"Accept\", \"*/*\");\n-        registerHttpHeader(\"Authorization\", \"\");\n+        registerHttpHeader(HttpHeaders.USER_AGENT, RefineServlet.FULLNAME);\n+        registerHttpHeader(HttpHeaders.ACCEPT, \"*/*\");\n+        registerHttpHeader(HttpHeaders.AUTHORIZATION, \"\");\n+        registerHttpHeader(HttpHeaders.ACCEPT_CHARSET, \"\");\n+        registerHttpHeader(HttpHeaders.ACCEPT_ENCODING, \"\");\n+        registerHttpHeader(HttpHeaders.ACCEPT_LANGUAGE, \"\");\n+        registerHttpHeader(HttpHeaders.IF_MODIFIED_SINCE, \"\");", "@@ -133,0 +134 @@ public class ColumnAdditionByFetchingURLsOperation extends EngineDependentOperat\n+                    // TODO: Should we be checking headers against a whitelist here?\n"]}, {"id": "10cd91c13299b4ee7a61014ddc59a8e1bc1680ad", "message": "Restore project expression history. Fixes #6362. (#6377)\n\n* Restore project local expression history. Fixes #6362.\r\n\r\n- Includes backend tests, but there is no end-to-end\r\n  test coverage.\r\n\r\n* Add e2e test for local/global expression history", "patch": ["@@ -50,0 +51 @@ import com.google.refine.commands.Command;\n+import com.google.refine.model.Project;", "@@ -60 +61 @@ public class GetExpressionHistoryCommand extends Command {\n-        protected boolean global = false;\n+        protected boolean global;", "@@ -64 +65 @@ public class GetExpressionHistoryCommand extends Command {\n-        protected ExpressionState(String code, boolean starred) {\n+        protected ExpressionState(String code, boolean starred, boolean global) {", "@@ -66,0 +68 @@ public class GetExpressionHistoryCommand extends Command {\n+            this.global = global;", "@@ -81 +83 @@ public class GetExpressionHistoryCommand extends Command {\n-        return o == null ? new ArrayList<String>() : ((TopList) o).getList();\n+        return o == null ? new ArrayList<>() : ((TopList) o).getList();", "@@ -89,8 +91,10 @@ public class GetExpressionHistoryCommand extends Command {\n-            List<String> expressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));\n-            TopList topList = (TopList) ProjectManager.singleton.getPreferenceStore().get(\"scripting.starred-expressions\");\n-            if (topList == null) {\n-                topList = new TopList(ProjectManager.EXPRESSION_HISTORY_MAX);\n-            }\n-            Set<String> starredExpressions = new HashSet<String>(topList.getList());\n-            ExpressionsList expressionsList = new ExpressionsList(expressions.stream()\n-                    .map(s -> new ExpressionState(s, starredExpressions.contains(s)))\n+            Project project = getProject(request);\n+\n+            List<String> local = toExpressionList((TopList) project.getMetadata().getPreferenceStore().get(\"scripting.expressions\"));\n+            Set<String> localExpressions = new HashSet(local.size() > 20 ? local.subList(0, 20) : local);\n+            Set<String> starredExpressions = new HashSet<>(\n+                    toExpressionList((TopList) ProjectManager.singleton.getPreferenceStore().get(\"scripting.starred-expressions\")));\n+\n+            List<String> globalExpressions = toExpressionList(ProjectManager.singleton.getPreferenceStore().get(\"scripting.expressions\"));\n+            ExpressionsList expressionsList = new ExpressionsList(globalExpressions.stream()\n+                    .map(s -> new ExpressionState(s, starredExpressions.contains(s), !localExpressions.contains(s)))", "@@ -43,0 +44 @@ import com.google.refine.commands.Command;\n+import com.google.refine.model.Project;", "@@ -57,0 +59 @@ public class LogExpressionCommand extends Command {\n+            Project project = getProject(request);", "@@ -60,5 +62,5 @@ public class LogExpressionCommand extends Command {\n-            PreferenceStore prefStore = ProjectManager.singleton.getPreferenceStore();\n-            TopList topList = (TopList) prefStore.get(\"scripting.expressions\");\n-            if (topList == null) {\n-                topList = new TopList(ProjectManager.EXPRESSION_HISTORY_MAX);\n-                prefStore.put(\"scripting.expressions\", topList);\n+            PreferenceStore localPrefStore = project.getMetadata().getPreferenceStore();\n+            TopList localExpressions = ((TopList) localPrefStore.get(\"scripting.expressions\"));\n+            if (localExpressions == null) {\n+                localExpressions = new TopList(20);\n+                localPrefStore.put(\"scripting.expressions\", localExpressions);", "@@ -66 +68,9 @@ public class LogExpressionCommand extends Command {\n-            topList.add(expression);\n+            localExpressions.add(expression);\n+\n+            PreferenceStore globalPrefStore = ProjectManager.singleton.getPreferenceStore();\n+            TopList globalExpressions = (TopList) globalPrefStore.get(\"scripting.expressions\");\n+            if (globalExpressions == null) {\n+                globalExpressions = new TopList(ProjectManager.EXPRESSION_HISTORY_MAX);\n+                globalPrefStore.put(\"scripting.expressions\", globalExpressions);\n+            }\n+            globalExpressions.add(expression);", "@@ -30,2 +30 @@ package com.google.refine.commands.expr;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n+import static org.testng.Assert.fail;", "@@ -35,5 +33,0 @@ import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;", "@@ -41,0 +36 @@ import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;", "@@ -44 +38,0 @@ import org.apache.commons.io.FileUtils;\n-import org.testng.annotations.BeforeMethod;", "@@ -46 +40,3 @@ import org.testng.annotations.BeforeMethod;\n-import com.google.refine.commands.Command;\n+import com.google.refine.ProjectManager;\n+import com.google.refine.ProjectMetadata;\n+import com.google.refine.commands.CommandTestBase;", "@@ -47,0 +44,5 @@ import com.google.refine.io.FileProjectManager;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.ProjectStub;\n+import com.google.refine.preference.PreferenceStore;\n+import com.google.refine.preference.TopList;\n+import com.google.refine.util.ParsingUtilities;", "@@ -50 +51 @@ import com.google.refine.util.TestUtils;\n-public class ExpressionCommandTestBase {\n+public class ExpressionCommandTestBase extends CommandTestBase {", "@@ -52,4 +53 @@ public class ExpressionCommandTestBase {\n-    protected HttpServletRequest request = null;\n-    protected HttpServletResponse response = null;\n-    protected Command command = null;\n-    protected StringWriter writer = null;\n+    protected static long PROJECT_ID = 1234L;", "@@ -57,10 +55,13 @@ public class ExpressionCommandTestBase {\n-    @BeforeMethod\n-    public void setUpRequestResponse() {\n-        request = mock(HttpServletRequest.class);\n-        response = mock(HttpServletResponse.class);\n-        writer = new StringWriter();\n-        try {\n-            when(response.getWriter()).thenReturn(new PrintWriter(writer));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+    public void initWorkspace(String globalExpressionsJson, String starredExpressionsJson, String localExpressionsJson) {\n+        String starred = starredExpressionsJson == null\n+                ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":\" + Integer.MAX_VALUE + \",\" +\n+                        \"\\\"list\\\":[]}\"\n+                : starredExpressionsJson;\n+        String globalExpressions = globalExpressionsJson == null\n+                ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\"\n+                : globalExpressionsJson;\n+        String localExpressions = localExpressionsJson == null\n+                ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\"\n+                : localExpressionsJson;\n+\n+        initWorkspaceInternal(starred, globalExpressions, localExpressions);", "@@ -69,5 +70 @@ public class ExpressionCommandTestBase {\n-    public void initWorkspace(String expressionsJson, String starredExpressionsJson) {\n-        String starred = starredExpressionsJson == null ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":2147483647,\" +\n-                \"\\\"list\\\":[]}\" : starredExpressionsJson;\n-        String expressions = expressionsJson == null ? \"{\\\"class\\\":\\\"com.google.refine.preference.TopList\\\",\\\"top\\\":100,\\\"list\\\":[]}\"\n-                : expressionsJson;\n+    private void initWorkspaceInternal(String starred, String global, String local) {", "@@ -76 +73 @@ public class ExpressionCommandTestBase {\n-                \",\\\"scripting.expressions\\\":\" + expressions + \"}}}\";\n+                \",\\\"scripting.expressions\\\":\" + global + \"}}}\";", "@@ -77,0 +75,10 @@ public class ExpressionCommandTestBase {\n+\n+        Project project = new ProjectStub(PROJECT_ID);\n+        ProjectMetadata pm = new ProjectMetadata();\n+        PreferenceStore prefs = pm.getPreferenceStore();\n+        try {\n+            prefs.put(\"scripting.expressions\", ParsingUtilities.mapper.readValue(local, TopList.class));\n+        } catch (JsonProcessingException e) {\n+            fail(\"Can't parse expression history JSON\");\n+        }\n+        ProjectManager.singleton.registerProject(project, pm);", "@@ -85,0 +93 @@ public class ExpressionCommandTestBase {\n+", "@@ -29,0 +30,2 @@ package com.google.refine.commands.expr;\n+import static org.mockito.Mockito.when;\n+", "@@ -41,0 +44 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n+        when(request.getParameter(\"project\")).thenReturn(Long.toString(PROJECT_ID));", "@@ -53 +56,2 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n-                \"          \\\"grel:cell.recon.match.id\\\"\" +\n+                \"          \\\"grel:cell.recon.match.id\\\",\\n\" +\n+                \"          \\\"grel:value\\\"\\n\" +", "@@ -59,0 +64,7 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n+                        \"]}\",\n+\n+                \"{\\n\" +\n+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" +\n+                        \"        \\\"top\\\": 100,\\n\" +\n+                        \"        \\\"list\\\": [\\n\" +\n+                        \"          \\\"grel:value\\\"\\n\" +", "@@ -65 +76 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n-                \"         \\\"global\\\" : false,\\n\" +\n+                \"         \\\"global\\\" : true,\\n\" +", "@@ -69 +80 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n-                \"         \\\"global\\\" : false,\\n\" +\n+                \"         \\\"global\\\" : true,\\n\" +", "@@ -73 +84 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n-                \"         \\\"global\\\" : false,\\n\" +\n+                \"         \\\"global\\\" : true,\\n\" +", "@@ -74,0 +86,4 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n+                \"       }, {\\n\" +\n+                \"         \\\"code\\\" : \\\"grel:value\\\",\\n\" +\n+                \"         \\\"global\\\" : false,\\n\" +\n+                \"         \\\"starred\\\" : false\\n\" +", "@@ -84 +99 @@ public class GetExpressionHistoryCommandTests extends ExpressionCommandTestBase\n-        initWorkspace(\"{}\");\n+        initWorkspace(null, null, null);", "@@ -51 +51 @@ public class GetExpressionLanguageInfoCommandTests extends ExpressionCommandTest\n-        initWorkspace(null, null);\n+        initWorkspace(null, null, null);", "@@ -59,0 +60,6 @@ public class GetStarredExpressionsCommandTests extends ExpressionCommandTestBase\n+                        \"]}\",\n+                \"{\\n\" +\n+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" +\n+                        \"        \\\"top\\\": 100,\\n\" +\n+                        \"        \\\"list\\\": [\\n\" +\n+                        \"          \\\"grel:value\\\"\\n\" +", "@@ -4 +3,0 @@ package com.google.refine.commands.expr;\n-import static org.mockito.Mockito.mock;", "@@ -16,0 +16,2 @@ import com.google.refine.ProjectManager;\n+import com.google.refine.ProjectManagerStub;\n+import com.google.refine.ProjectMetadata;", "@@ -18,0 +20,2 @@ import com.google.refine.commands.CommandTestBase;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.ProjectStub;", "@@ -23,0 +27,4 @@ public class LogExpressionCommandTests extends CommandTestBase {\n+    private static long PROJECT_ID = 1234;\n+    ProjectManager projectManager = null;\n+    Project project = null;\n+", "@@ -29,3 +36,10 @@ public class LogExpressionCommandTests extends CommandTestBase {\n-        ProjectManager.singleton = mock(ProjectManager.class);\n-        prefStore = new PreferenceStore();\n-        when(ProjectManager.singleton.getPreferenceStore()).thenReturn(prefStore);\n+\n+        ProjectMetadata metadata = new ProjectMetadata();\n+        projectManager = new ProjectManagerStub();\n+        ProjectManager.singleton = projectManager;\n+        project = new ProjectStub(PROJECT_ID);\n+        ProjectManager.singleton.registerProject(project, metadata);\n+        prefStore = ProjectManager.singleton.getPreferenceStore();\n+\n+        when(request.getParameter(\"project\")).thenReturn(Long.toString(PROJECT_ID));\n+", "@@ -42,0 +57 @@ public class LogExpressionCommandTests extends CommandTestBase {\n+        when(request.getParameter(\"project\")).thenReturn(Long.toString(PROJECT_ID));", "@@ -48,2 +63,5 @@ public class LogExpressionCommandTests extends CommandTestBase {\n-        TopList topList = (TopList) prefStore.get(\"scripting.expressions\");\n-        Assert.assertEquals(topList.getList(), Collections.singletonList(\"grel:value+'a'\"));\n+        TopList globalExpressions = (TopList) prefStore.get(\"scripting.expressions\");\n+        Assert.assertEquals(globalExpressions.getList(), Collections.singletonList(\"grel:value+'a'\"));\n+\n+        TopList localExpressions = (TopList) project.getMetadata().getPreferenceStore().get(\"scripting.expressions\");\n+        Assert.assertEquals(localExpressions, Collections.singletonList(\"grel:value+'a'\"));", "@@ -50,0 +69,2 @@ public class LogExpressionCommandTests extends CommandTestBase {\n+\n+    // TODO: Add tests for starred, local, & global expressions", "@@ -64,0 +65,6 @@ public class ToggleStarredExpressionCommandTests extends ExpressionCommandTestBa\n+                        \"]}\",\n+                \"{\\n\" +\n+                        \"        \\\"class\\\": \\\"com.google.refine.preference.TopList\\\",\\n\" +\n+                        \"        \\\"top\\\": 100,\\n\" +\n+                        \"        \\\"list\\\": [\\n\" +\n+                        \"          \\\"grel:value\\\"\\n\" +\n"]}, {"id": "b9028ed7808f0d2b493930e2109f76671b9ca697", "message": "Add stack trace support and modernize. Fixes #6059 (#6376)\n\n- Adds support for logging Throwable if it's present in the event\r\n- Modernize & streamline time handling and formatting\r\n\r\nThis is a candidate for being removed entirely since we don't use\r\nthe indenting functionality which is pretty much all it offers.", "patch": ["@@ -35,2 +35,4 @@ import java.nio.charset.Charset;\n-import java.util.Calendar;\n-import java.util.Date;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;", "@@ -37,0 +40 @@ import java.util.Date;\n+import org.apache.commons.lang.exception.ExceptionUtils;", "@@ -64 +67 @@ public class IndentingLayout extends AbstractStringLayout {\n-    protected static final long MAX_DELTA = 10000;\n+    protected static final long MAX_DELTA_MILLIS = 10000;", "@@ -66,2 +69,4 @@ public class IndentingLayout extends AbstractStringLayout {\n-    protected Calendar calendar = Calendar.getInstance();\n-    protected long previousTime = 0;\n+    private static final String TIME_FORMAT = \"hh:mm:ss.SSS\";\n+    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern(TIME_FORMAT)\n+            .withZone(ZoneId.systemDefault());\n+    protected Instant previousTime = null;", "@@ -87,9 +92,8 @@ public class IndentingLayout extends AbstractStringLayout {\n-        StringBuffer buf = new StringBuffer(256);\n-\n-        Date date = new Date();\n-        long now = date.getTime();\n-        calendar.setTime(date);\n-\n-        long delta = 0;\n-        if (previousTime > 0) {\n-            delta = now - previousTime;\n+        StringBuilder buf = new StringBuilder(256);\n+\n+        // Event time is a log4j Instant, not Java instant, so convert it\n+        org.apache.logging.log4j.core.time.Instant then = event.getInstant();\n+        Instant now = Instant.ofEpochSecond(then.getEpochSecond(), then.getNanoOfSecond());\n+        Duration delta = Duration.ZERO;\n+        if (previousTime != null) {\n+            delta = Duration.between(previousTime, now);", "@@ -99 +103 @@ public class IndentingLayout extends AbstractStringLayout {\n-//        if ((previousTime == 0) || (delta > MAX_DELTA)) {\n+//        if ((previousTime == null) || (delta.toMillis() > MAX_DELTA_MILLIS)) {", "@@ -101,2 +105 @@ public class IndentingLayout extends AbstractStringLayout {\n-//            indentation = 0; // reset indentation after a while, as we might\n-//            // have runaway/unmatched log entries\n+//            indentation = 0; // reset indentation after a while, as we might have runaway/unmatched log entries", "@@ -105,29 +108 @@ public class IndentingLayout extends AbstractStringLayout {\n-        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n-        if (hour < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(hour);\n-        buf.append(':');\n-\n-        int mins = calendar.get(Calendar.MINUTE);\n-        if (mins < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(mins);\n-        buf.append(':');\n-\n-        int secs = calendar.get(Calendar.SECOND);\n-        if (secs < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(secs);\n-        buf.append('.');\n-\n-        int millis = (int) (now % 1000);\n-        if (millis < 100) {\n-            buf.append('0');\n-        }\n-        if (millis < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(millis);\n+        buf.append(TIME_FORMATTER.format(now));", "@@ -138 +113 @@ public class IndentingLayout extends AbstractStringLayout {\n-            context = event.getLoggerName();\n+            context = \"<unknown logger>\";", "@@ -154 +129 @@ public class IndentingLayout extends AbstractStringLayout {\n-        buf.append(delta);\n+        buf.append(delta.toMillis());", "@@ -160,0 +136,4 @@ public class IndentingLayout extends AbstractStringLayout {\n+        if (event.getThrown() != null) {\n+            buf.append(ExceptionUtils.getStackTrace(event.getThrown()));\n+        }\n+", "@@ -164 +143 @@ public class IndentingLayout extends AbstractStringLayout {\n-    private void pad(StringBuffer buffer, int pads, char padchar) {\n+    private void pad(StringBuilder buffer, int pads, char padchar) {\n"]}, {"id": "16f9c1aafb2f3294cb8103d0e216d6ced7ac1427", "message": "Clean up Apache dependencies (#6375)\n\n* Remove Apache commons-collection dependency\r\n\r\n* Update Apache commons-lang to commons-lang3\r\n\r\nWe don't list the old module in our POMs, so we must be relying\r\non it being provided implicitly. Update all references to\r\ncurrent package which we do have a declared dependency on.\r\n\r\n* Remove dependency on NotImplementedExceptions from Apache commons-lang", "patch": ["@@ -27,2 +27,2 @@ package org.openrefine.wikibase.commands;\n-import static org.apache.commons.lang.StringUtils.isBlank;\n-import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;", "@@ -15 +15 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang3.Validate;", "@@ -40 +39,0 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n-import org.apache.commons.lang.Validate;", "@@ -41,0 +41 @@ import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;", "@@ -29 +29 @@ import java.util.Map;\n-import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang3.Validate;", "@@ -35 +35 @@ import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang3.Validate;", "@@ -5 +5 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang3.Validate;", "@@ -17 +16,0 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.commons.lang.NotImplementedException;", "@@ -212 +211 @@ public class MediaInfoEdit extends LabeledStatementEntityEdit {\n-        throw new NotImplementedException(\"Creating new entities of type mediainfo is not supported yet.\");\n+        throw new UnsupportedOperationException(\"Creating new entities of type mediainfo is not supported yet.\");", "@@ -11 +11 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang3.Validate;", "@@ -54 +54 @@ import com.google.common.base.CharMatcher;\n-import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;", "@@ -394 +394 @@ public class ProjectMetadata {\n-            logger.error(ExceptionUtils.getFullStackTrace(e));\n+            logger.error(ExceptionUtils.getStackTrace(e));", "@@ -13 +13 @@ import com.google.common.cache.LoadingCache;\n-import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang3.RandomStringUtils;", "@@ -58 +58 @@ public class ReplaceEach implements Function {\n-                    return org.apache.commons.lang.StringUtils.replaceEachRepeatedly((String) args[0], search, replace);\n+                    return org.apache.commons.lang3.StringUtils.replaceEachRepeatedly((String) args[0], search, replace);", "@@ -205,0 +206 @@ public class Parser {\n+                // TODO: This duplicates ExpressionUtils which adds PI to the bindings", "@@ -36 +36 @@ package com.google.refine.grel.controls;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;", "@@ -44 +43,0 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.apache.commons.lang.NotImplementedException;", "@@ -59,0 +59 @@ import com.google.refine.util.JSONUtilities;\n+import com.google.refine.util.NotImplementedException;", "@@ -40 +40 @@ import org.apache.commons.io.input.BoundedInputStream;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;", "@@ -43 +42,0 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.apache.commons.lang.NotImplementedException;", "@@ -54,0 +54 @@ import com.google.refine.util.JSONUtilities;\n+import com.google.refine.util.NotImplementedException;", "@@ -11 +11 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;", "@@ -56 +56 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;", "@@ -36,0 +37 @@ import java.util.ArrayList;\n+import java.util.Collections;", "@@ -43 +43,0 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.commons.collections.list.UnmodifiableList;", "@@ -66 +66 @@ public class TopList implements Iterable<String>, PreferenceValue {\n-        return UnmodifiableList.decorate(_list);\n+        return Collections.unmodifiableList(_list);", "@@ -35,0 +36,2 @@ package com.google.refine.util;\n+import java.util.ArrayList;\n+import java.util.Iterator;", "@@ -130,0 +133,12 @@ public class JSONUtilities {\n+    static public List<ObjectNode> getObjectList(ArrayNode a) {\n+        List<ObjectNode> result = new ArrayList<>(a.size());\n+        Iterator<JsonNode> iter = a.iterator();\n+        while (iter.hasNext()) {\n+            JsonNode n = iter.next();\n+            if (n != null && n instanceof ObjectNode) {\n+                result.add((ObjectNode) n);\n+            }\n+        }\n+        return result;\n+    }\n+\n--- /dev/null", "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (C) 2024, OpenRefine contributors\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ ******************************************************************************/\n+\n+package com.google.refine.util;\n+\n+/**\n+ * Exception thrown when functionality isn't implemented.\n+ *\n+ * Replaces the external org.apache.commons.lang.NotImplementedException;\n+ */\n+public class NotImplementedException extends UnsupportedOperationException {\n+}", "@@ -50,0 +51 @@ import java.util.Properties;\n+import java.util.stream.StreamSupport;", "@@ -62,2 +62,0 @@ import okhttp3.mockwebserver.MockWebServer;\n-import org.apache.commons.collections.IteratorUtils;\n-import org.apache.commons.collections4.IterableUtils;", "@@ -386 +385 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-                IteratorUtils.toList(fileRecords.iterator()),\n+                JSONUtilities.getObjectList(fileRecords),", "@@ -481 +480,2 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-            Assert.assertEquals(IterableUtils.size(records), LINES * 2, \"row count mismatch for \" + filename);\n+            Assert.assertEquals(StreamSupport.stream(records.spliterator(), false).count(), LINES * 2,\n+                    \"row count mismatch for \" + filename);", "@@ -55 +55 @@ import com.google.util.threads.ThreadPoolExecutorAdapter;\n-import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.lang3.SystemUtils;\n"]}, {"id": "88abdcf5f2d342e6f1b58fdb3c6e76d2fb2d586e", "message": "Avoid specifying test projects in CSV format (#6371)\n\n* Avoid specifying test projects in CSV format\r\n\r\nBy specifying their columns and rows as arrays, we:\r\n- avoid the dependency on the CSV parser\r\n- make it easier to specify cell values of various datatypes\r\n- improve readability\r\n\r\n* Migrate more CSV project creations I missed\r\n\r\n* Update main/tests/server/src/com/google/refine/RefineTest.java\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>", "patch": ["@@ -57 +57,2 @@ public abstract class CommandTest extends WikidataRefineTest {\n-        project = createCSVProject(TestingData.inceptionWithNewCsv);\n+        project = createProject(TestingData.inceptionColumns,\n+                TestingData.inceptionProjectGridWithNewItem);", "@@ -62 +62,2 @@ public class NewEntityLibraryTest extends WikidataRefineTest {\n-        Project project = createCSVProject(TestingData.inceptionWithNewCsv);\n+        Project project = createProject(TestingData.inceptionColumns,\n+                TestingData.inceptionProjectGridWithNewItem);", "@@ -29,0 +30 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -75 +76,2 @@ public class QuickStatementsExporterTest extends WikidataRefineTest {\n-        Project project = this.createCSVProject(TestingData.inceptionWithNewCsv);\n+        Project project = createProject(TestingData.inceptionColumns,\n+                TestingData.inceptionProjectGridWithNewItem);", "@@ -212 +214,5 @@ public class QuickStatementsExporterTest extends WikidataRefineTest {\n-        Project project = this.createCSVProject(\"a,b\\nc,d\");\n+        Project project = this.createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" }\n+                });", "@@ -4,0 +5 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -24 +25,5 @@ public class SchemaExporterTest extends WikidataRefineTest {\n-        Project project = this.createCSVProject(\"a,b\\nc,d\");\n+        Project project = this.createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" }\n+                });", "@@ -6,0 +7 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -62,2 +63,6 @@ public class WikibaseIssuesFunctionTests extends RefineTest {\n-        project = createCSVProject(\"my project\",\n-                \"a,b\\nc,d\\ne,f\");\n+        project = createProject(\"my project\",\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" },\n+                        { \"e\", \"f\" }\n+                });", "@@ -31,0 +32 @@ import java.io.LineNumberReader;\n+import java.io.Serializable;", "@@ -58 +59,5 @@ public abstract class OperationTest extends WikidataRefineTest {\n-        project = createCSVProject(\"a,b\\nc,d\");\n+        project = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" }\n+                });", "@@ -29,0 +30,2 @@ import static org.testng.Assert.assertNull;\n+import java.io.Serializable;\n+", "@@ -43 +45,6 @@ public class ExpressionContextTest extends WikidataRefineTest {\n-        project = createCSVProject(\"a,b\\nc\\nd,e\");\n+        project = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", null },\n+                        { \"d\", \"e\" }\n+                });", "@@ -91,2 +91,5 @@ public class WbExpressionTest<T> extends WikidataRefineTest {\n-        project = createCSVProject(\"Wikidata variable test project\",\n-                \"column A,column B,column C,column D,column E\\n\" + \"value A,value B,value C,value D,value E\");\n+        project = createProject(\"Wikidata variable test project\",\n+                new String[] { \"column A\", \"column B\", \"column C\", \"column D\", \"column E\" },\n+                new Serializable[][] {\n+                        { \"value A\", \"value B\", \"value C\", \"value D\", \"value E\" }\n+                });", "@@ -111 +111,2 @@ public class WikibaseSchemaTest extends WikidataRefineTest {\n-        project = this.createCSVProject(TestingData.inceptionCsv);\n+        project = this.createProject(TestingData.inceptionColumns,\n+                TestingData.inceptionProjectGrid);", "@@ -28,0 +29 @@ import java.io.InputStream;\n+import java.io.Serializable;", "@@ -59,5 +60,10 @@ public class TestingData {\n-    public static final String inceptionCsv = \"subject,inception,reference\\n\"\n-            + \"Q1377,1919,http://www.ljubljana-slovenia.com/university-ljubljana\\n\" + \"Q865528,1965,\";\n-    public static final String inceptionWithNewCsv = \"subject,inception,reference\\n\"\n-            + \"Q1377,1919,http://www.ljubljana-slovenia.com/university-ljubljana\\n\" + \"Q865528,1965,\\n\"\n-            + \"new uni,2016,http://new-uni.com/\";\n+    public static final String[] inceptionColumns = { \"subject\", \"inception\", \"reference\" };\n+    public static final Serializable[][] inceptionProjectGrid = {\n+            { \"Q1377\", \"1919\", \"http://www.ljubljana-slovenia.com/university-ljubljana\" },\n+            { \"Q865528\", \"1965\", null }\n+    };\n+    public static final Serializable[][] inceptionProjectGridWithNewItem = {\n+            { \"Q1377\", \"1919\", \"http://www.ljubljana-slovenia.com/university-ljubljana\" },\n+            { \"Q865528\", \"1965\", null },\n+            { \"new uni\", \"2016\", \"http://new-uni.com/\" }\n+    };", "@@ -4,0 +5,2 @@ import static org.mockito.Mockito.mock;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;", "@@ -6,0 +9 @@ import java.io.File;\n+import java.io.Serializable;", "@@ -22,0 +26,3 @@ import com.google.refine.importing.ImportingManager;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Column;\n+import com.google.refine.model.ModelException;", "@@ -23,0 +30 @@ import com.google.refine.model.Project;\n+import com.google.refine.model.Row;", "@@ -31,0 +39,4 @@ public class WikidataRefineTest {\n+    /**\n+     * @deprecated use {@link #createProject(String[], Serializable[][])}\n+     */\n+    @Deprecated", "@@ -35,0 +47,4 @@ public class WikidataRefineTest {\n+    /**\n+     * @deprecated use {@link #createProject(String, String[], Serializable[][])}\n+     */\n+    @Deprecated", "@@ -58,0 +74,59 @@ public class WikidataRefineTest {\n+    /**\n+     * Utility method to create a project with pre-defined contents.\n+     * \n+     * @param columnNames\n+     *            names of the columns\n+     * @param grid\n+     *            contents of the project grid, which can be either {@link Cell} instances or just the cell values (for\n+     *            convenience)\n+     * @return a test project with the given contents\n+     */\n+    public Project createProject(String[] columnNames, Serializable[][] grid) {\n+        return createProject(\"test project\", columnNames, grid);\n+    }\n+\n+    /**\n+     * Utility method to create a project with pre-defined contents.\n+     * \n+     * @param name\n+     *            project name\n+     * @param columnNames\n+     *            names of the columns\n+     * @param grid\n+     *            contents of the project grid, which can be either {@link Cell} instances or just the cell values (for\n+     *            convenience)\n+     * @return a test project with the given contents\n+     */\n+    public Project createProject(String name, String[] columnNames, Serializable[][] grid) {\n+        Project project = new Project();\n+        ProjectMetadata pm = new ProjectMetadata();\n+        pm.setName(name);\n+        ProjectManager.singleton.registerProject(project, pm);\n+\n+        try {\n+            for (String columnName : columnNames) {\n+                int index = project.columnModel.allocateNewCellIndex();\n+                Column column = new Column(index, columnName);\n+                project.columnModel.addColumn(index, column, true);\n+            }\n+        } catch (ModelException e) {\n+            fail(\"The column names provided to create a test project contain duplicates\");\n+        }\n+        for (Serializable[] rawRow : grid) {\n+            assertEquals(columnNames.length, rawRow.length, \"Unexpected row length in test project\");\n+            Row row = new Row(columnNames.length);\n+            for (int i = 0; i != columnNames.length; i++) {\n+                Serializable rawCell = rawRow[i];\n+                if (rawCell == null || rawCell instanceof Cell) {\n+                    row.setCell(i, (Cell) rawCell);\n+                } else {\n+                    row.setCell(i, new Cell(rawCell, null));\n+                }\n+            }\n+            project.rows.add(row);\n+        }\n+        project.update();\n+        projects.add(project);\n+        return project;\n+    }\n+", "@@ -39,0 +40,2 @@ import static org.mockito.Mockito.when;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;", "@@ -42,0 +45 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -139,7 +142,2 @@ public class RefineTest {\n-     * Helper to create a project from a CSV encoded as a file. Not much control is given on the import options, because\n-     * this method is intended to be a quick way to create a project for a test. For more control over the import, just\n-     * call the importer directly.\n-     * \n-     * @param input\n-     *            contents of the CSV file to create the project from\n-     * @return\n+     * @deprecated use {@link #createProject(String[], Serializable[][])} instead, so that the project's contents are\n+     *             more readable in the test", "@@ -146,0 +145 @@ public class RefineTest {\n+    @Deprecated", "@@ -152,11 +151,2 @@ public class RefineTest {\n-     * Helper to create a project from a CSV encoded as a file. Not much control is given on the import options, because\n-     * this method is intended to be a quick way to create a project for a test. For more control over the import, just\n-     * call the importer directly.\n-     * \n-     * The projects created via this method and their importing jobs will be disposed of at the end of each test.\n-     * \n-     * @param projectName\n-     *            the name of the project to create\n-     * @param input\n-     *            the content of the file, encoded as a CSV (with \",\" as a separator)\n-     * @return\n+     * @deprecated use {@link #createProject(String, String[], Serializable[][])} instead, so that the project's\n+     *             contents are more readable in the test", "@@ -163,0 +154 @@ public class RefineTest {\n+    @Deprecated", "@@ -187,0 +179,59 @@ public class RefineTest {\n+    /**\n+     * Utility method to create a project with pre-defined contents.\n+     * \n+     * @param name\n+     *            project name\n+     * @param columnNames\n+     *            names of the columns\n+     * @param grid\n+     *            contents of the project grid, which can be either {@link Cell} instances or just the cell values (for\n+     *            convenience)\n+     * @return a test project with the given contents\n+     */\n+    public Project createProject(String name, String[] columnNames, Serializable[][] grid) {\n+        Project project = new Project();\n+        ProjectMetadata pm = new ProjectMetadata();\n+        pm.setName(name);\n+        ProjectManager.singleton.registerProject(project, pm);\n+\n+        try {\n+            for (String columnName : columnNames) {\n+                int index = project.columnModel.allocateNewCellIndex();\n+                Column column = new Column(index, columnName);\n+                project.columnModel.addColumn(index, column, true);\n+            }\n+        } catch (ModelException e) {\n+            fail(\"The column names provided to create a test project contain duplicates\");\n+        }\n+        for (Serializable[] rawRow : grid) {\n+            assertEquals(columnNames.length, rawRow.length, \"Unexpected row length in test grid data\");\n+            Row row = new Row(columnNames.length);\n+            for (int i = 0; i != columnNames.length; i++) {\n+                Serializable rawCell = rawRow[i];\n+                if (rawCell == null || rawCell instanceof Cell) {\n+                    row.setCell(i, (Cell) rawCell);\n+                } else {\n+                    row.setCell(i, new Cell(rawCell, null));\n+                }\n+            }\n+            project.rows.add(row);\n+        }\n+        project.update();\n+        projects.add(project);\n+        return project;\n+    }\n+\n+    /**\n+     * Utility method to create a project with pre-defined contents.\n+     * \n+     * @param columnNames\n+     *            names of the columns\n+     * @param grid\n+     *            contents of the project grid, which can be either {@link Cell} instances or just the cell values (for\n+     *            convenience)\n+     * @return a test project with the given contents\n+     */\n+    public Project createProject(String[] columnNames, Serializable[][] grid) {\n+        return createProject(\"test project\", columnNames, grid);\n+    }\n+", "@@ -30,0 +31 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -101,3 +102,6 @@ public class ListFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"Column A\\n\" +\n-                \"foo\\n\" +\n-                \"bar\\n\");\n+        Project project = createProject(\n+                new String[] { \"Column A\" },\n+                new Serializable[][] {\n+                        { \"foo\" },\n+                        { \"bar\" }\n+                });", "@@ -123,3 +127,6 @@ public class ListFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"other column\\n\" +\n-                \"foo\\n\" +\n-                \"bar\\n\");\n+        Project project = createProject(\n+                new String[] { \"other column\" },\n+                new Serializable[][] {\n+                        { \"foo\" },\n+                        { \"bar\" }\n+                });", "@@ -134,4 +141,7 @@ public class ListFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"Column A\\n\" +\n-                \"a\\n\" +\n-                \"c\\n\" +\n-                \"e\");\n+        Project project = createProject(\n+                new String[] { \"Column A\" },\n+                new Serializable[][] {\n+                        { \"a\" },\n+                        { \"c\" },\n+                        { \"e\" },\n+                });", "@@ -30,0 +31 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -39 +39,0 @@ import com.google.refine.browsing.facets.RangeFacet.RangeFacetConfig;\n-import com.google.refine.model.Cell;", "@@ -87,8 +87,8 @@ public class RangeFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"my column\\n\"\n-                + \"89.2\\n\"\n-                + \"-45.9\\n\"\n-                + \"blah\\n\"\n-                + \"0.4\\n\");\n-        project.rows.get(0).cells.set(0, new Cell(89.2, null));\n-        project.rows.get(1).cells.set(0, new Cell(-45.9, null));\n-        project.rows.get(3).cells.set(0, new Cell(0.4, null));\n+        Project project = createProject(\n+                new String[] { \"my column\" },\n+                new Serializable[][] {\n+                        { 89.2 },\n+                        { -45.9 },\n+                        { \"blah\" },\n+                        { 0.4 }\n+                });", "@@ -33,0 +34 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -43 +43,0 @@ import com.google.refine.browsing.facets.ScatterplotFacet.ScatterplotFacetConfig\n-import com.google.refine.model.Cell;", "@@ -93,5 +93,8 @@ public class ScatterplotFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"my column,e\\n\"\n-                + \"89.2,89.2\\n\" +\n-                \"-45.9,-45.9\\n\" +\n-                \"blah,blah\\n\" +\n-                \"0.4,0.4\\n\");\n+        Project project = createProject(\n+                new String[] { \"my column\", \"e\" },\n+                new Serializable[][] {\n+                        { 89.2, 89.2 },\n+                        { -45.9, -45.9 },\n+                        { \"blah\", \"blah\" },\n+                        { 0.4, 0.4 }\n+                });", "@@ -99,6 +101,0 @@ public class ScatterplotFacetTests extends RefineTest {\n-        project.rows.get(0).cells.set(0, new Cell(89.2, null));\n-        project.rows.get(0).cells.set(1, new Cell(89.2, null));\n-        project.rows.get(1).cells.set(0, new Cell(-45.9, null));\n-        project.rows.get(1).cells.set(1, new Cell(-45.9, null));\n-        project.rows.get(3).cells.set(0, new Cell(0.4, null));\n-        project.rows.get(3).cells.set(1, new Cell(0.4, null));", "@@ -36,0 +37 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -84,6 +85,8 @@ public class TextSearchFacetTests extends RefineTest {\n-        project = createCSVProject(\"TextSearchFacet\",\n-                \"Value\\n\"\n-                        + \"a\\n\"\n-                        + \"b\\n\"\n-                        + \"ab\\n\"\n-                        + \"Abc\\n\");\n+        project = createProject(\"TextSearchFacet\",\n+                new String[] { \"Value\" },\n+                new Serializable[][] {\n+                        { \"a\" },\n+                        { \"b\" },\n+                        { \"ab\" },\n+                        { \"Abc\" }\n+                });", "@@ -30,0 +31 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -40 +40,0 @@ import com.google.refine.browsing.facets.TimeRangeFacet.TimeRangeFacetConfig;\n-import com.google.refine.model.Cell;", "@@ -88,8 +88,8 @@ public class TimeRangeFacetTests extends RefineTest {\n-        Project project = createCSVProject(\"my column\\n\"\n-                + \"placeholder\\n\"\n-                + \"nontime\\n\"\n-                + \"placeholder\\n\"\n-                + \"placeholder\\n\");\n-        project.rows.get(0).cells.set(0, new Cell(OffsetDateTime.parse(\"2018-01-03T08:09:10Z\"), null));\n-        project.rows.get(2).cells.set(0, new Cell(OffsetDateTime.parse(\"2008-01-03T03:04:05Z\"), null));\n-        project.rows.get(3).cells.set(0, new Cell(OffsetDateTime.parse(\"2012-04-05T02:00:01Z\"), null));\n+        Project project = createProject(\n+                new String[] { \"my column\" },\n+                new Serializable[][] {\n+                        { OffsetDateTime.parse(\"2018-01-03T08:09:10Z\") },\n+                        { \"nontime\" },\n+                        { OffsetDateTime.parse(\"2008-01-03T03:04:05Z\") },\n+                        { OffsetDateTime.parse(\"2012-04-05T02:00:01Z\") }\n+                });", "@@ -33,0 +34 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -178,8 +179,9 @@ public class ExpressionNominalValueGrouperTests extends RefineTest {\n-        String completeProjectJson = \"col1,col2,col3\\n\"\n-                + \"record1,1,a\\n\"\n-                + \",,a\\n\"\n-                + \",,a\\n\"\n-                + \"record2,,a\\n\"\n-                + \",1,a\\n\";\n-\n-        project = createCSVProject(completeProjectJson);\n+        project = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"1\", \"a\" },\n+                        { null, null, \"a\" },\n+                        { null, null, \"a\" },\n+                        { \"record2\", null, \"a\" },\n+                        { null, \"1\", \"a\" }\n+                });", "@@ -32,0 +33 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -78,5 +79,8 @@ public class BinningClustererTests extends RefineTest {\n-        Project project = createCSVProject(\"column\\n\"\n-                + \"a\\n\"\n-                + \"\u00e0\\n\"\n-                + \"c\\n\"\n-                + \"\u0109\\n\");\n+        Project project = createProject(\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"a\" },\n+                        { \"\u00e0\" },\n+                        { \"c\" },\n+                        { \"\u0109\" }\n+                });", "@@ -91,4 +95,7 @@ public class BinningClustererTests extends RefineTest {\n-        Project project = createCSVProject(\"column\\n\"\n-                + \"c\\n\"\n-                + \"\u0109\\n\"\n-                + \"d\\n\");\n+        Project project = createProject(\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"c\" },\n+                        { \"\u0109\" },\n+                        { \"d\" }\n+                });", "@@ -32,0 +33 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -65,5 +66,8 @@ public class kNNClustererTests extends RefineTest {\n-        Project project = createCSVProject(\"column\\n\"\n-                + \"ab\\n\"\n-                + \"abc\\n\"\n-                + \"c\\n\"\n-                + \"\u0109\\n\");\n+        Project project = createProject(\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"ab\" },\n+                        { \"abc\" },\n+                        { \"c\" },\n+                        { \"\u0109\" }\n+                });", "@@ -80,3 +84,6 @@ public class kNNClustererTests extends RefineTest {\n-        Project project = createCSVProject(\"column\\n\"\n-                + \"foo\\n\"\n-                + \"bar\\n\");\n+        Project project = createProject(\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"foo\" },\n+                        { \"bar\" }\n+                });", "@@ -10,0 +11 @@ import java.io.PrintWriter;\n+import java.io.Serializable;", "@@ -37,4 +38,6 @@ public class EditOneCellCommandTests extends RefineTest {\n-        project = createCSVProject(\n-                \"first_column,second_column\\n\"\n-                        + \"a,b\\n\"\n-                        + \"c,d\\n\");\n+        project = createProject(\n+                new String[] { \"first_column\", \"second_column\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"c\", \"d\" }\n+                });", "@@ -34,0 +35 @@ import java.io.PrintWriter;\n+import java.io.Serializable;", "@@ -68 +69,7 @@ public class PreviewExpressionCommandTests extends RefineTest {\n-        project = createCSVProject(\"a,b\\nc,d\\ne,f\\ng,h\");\n+        project = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" },\n+                        { \"e\", \"f\" },\n+                        { \"g\", \"h\" }\n+                });", "@@ -8,0 +9 @@ import java.io.PrintWriter;\n+import java.io.Serializable;", "@@ -48,5 +49,7 @@ public class GuessTypesOfColumnCommandTests extends RefineTest {\n-        project = createCSVProject(\n-                \"foo,bar\\n\"\n-                        + \"France,b\\n\"\n-                        + \"Japan,d\\n\"\n-                        + \"Paraguay,x\");\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"France\", \"b\" },\n+                        { \"Japan\", \"d\" },\n+                        { \"Paraguay\", \"x\" }\n+                });", "@@ -34,0 +35 @@ import java.io.PrintWriter;\n+import java.io.Serializable;", "@@ -65,4 +66,6 @@ public class ReconJudgeOneCellCommandTest extends RefineTest {\n-        project = createCSVProject(\n-                \"reconciled column,unreconciled column\\n\" +\n-                        \"a,b\\n\" +\n-                        \"c,d\\n\");\n+        project = createProject(\n+                new String[] { \"reconciled column\", \"unreconciled column\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"c\", \"d\" }\n+                });", "@@ -34,0 +35 @@ import java.io.PrintWriter;\n+import java.io.Serializable;", "@@ -61 +62,5 @@ public class GetRowsCommandTest extends RefineTest {\n-        project = createCSVProject(\"a,b\\nc,d\\n,f\");\n+        project = createProject(new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" },\n+                        { null, \"f\" }\n+                });", "@@ -31,0 +32 @@ import static org.testng.Assert.assertEquals;\n+import java.io.Serializable;", "@@ -81,26 +82,31 @@ public class CrossTests extends RefineTest {\n-        String projectName = \"My Address Book\";\n-        String input = \"friend,address\\n\"\n-                + \"john,120 Main St.\\n\"\n-                + \"mary,50 Broadway Ave.\\n\"\n-                + \"john,999 XXXXXX St.\\n\" // john's 2nd address\n-                + \"anne,17 Morning Crescent\\n\"\n-                + \"2017-05-12T05:45:00Z,dateTime\\n\"\n-                + \"1600,integer\\n\"\n-                + \"123456789123456789,long\\n\"\n-                + \"true,boolean\\n\"\n-                + \"3.14,double\\n\";\n-        projectAddress = createCSVProject(projectName, input);\n-\n-        projectName = \"Christmas Gifts\";\n-        input = \"gift,recipient\\n\"\n-                + \"lamp,mary\\n\"\n-                + \"clock,john\\n\"\n-                + \"dateTime,2017-05-12T05:45:00Z\\n\"\n-                + \"integer,1600\\n\"\n-                + \"123456789123456789,long\\n\"\n-                + \"boolean,true\\n\";\n-        projectGift = createCSVProject(projectName, input);\n-        projectName = \"Duplicate\";\n-        input = \"Col1,Col2\";\n-        projectDuplicate1 = createCSVProject(projectName, input);\n-        projectDuplicate2 = createCSVProject(projectName, input);\n+        projectAddress = createProject(\"My Address Book\",\n+                new String[] { \"friend\", \"address\" },\n+                new Serializable[][] {\n+                        { \"john\", \"120 Main St.\" },\n+                        { \"mary\", \"50 Broadway Ave.\" },\n+                        { \"john\", \"999 XXXXXX St.\" },\n+                        { \"anne\", \"17 Morning Crescent\" },\n+                        { dateTimeValue, \"dateTime\" },\n+                        { 1600, \"integer\" },\n+                        { 123456789123456789L, \"long\" },\n+                        { true, \"boolean\" },\n+                        { 3.14, \"double\" },\n+                });\n+\n+        projectGift = createProject(\"Christmas Gifts\",\n+                new String[] { \"gift\", \"recipient\" },\n+                new Serializable[][] {\n+                        { \"lamp\", \"mary\" },\n+                        { \"clock\", \"john\" },\n+                        { \"dateTime\", dateTimeValue },\n+                        { \"integer\", 1600 },\n+                        { \"123456789123456789\", 123456789123456789L },\n+                        { \"boolean\", true }\n+                });\n+\n+        projectDuplicate1 = createProject(\"Duplicate\",\n+                new String[] { \"Col1\", \"Col2\" },\n+                new Serializable[][] {});\n+        projectDuplicate2 = createProject(\"Duplicate\",\n+                new String[] { \"Col1\", \"Col2\" },\n+                new Serializable[][] {});", "@@ -109,12 +114,0 @@ public class CrossTests extends RefineTest {\n-\n-        // Add some non-string value cells to each project\n-        projectAddress.rows.get(4).cells.set(0, new Cell(dateTimeValue, null));\n-        projectAddress.rows.get(5).cells.set(0, new Cell(1600, null));\n-        projectAddress.rows.get(6).cells.set(0, new Cell(123456789123456789L, null));\n-        projectAddress.rows.get(7).cells.set(0, new Cell(true, null));\n-        projectAddress.rows.get(8).cells.set(0, new Cell(3.14, null));\n-        projectGift.rows.get(2).cells.set(1, new Cell(dateTimeValue, null));\n-        projectGift.rows.get(3).cells.set(1, new Cell(1600, null));\n-        projectGift.rows.get(4).cells.set(1, new Cell(123456789123456789L, null));\n-        projectGift.rows.get(5).cells.set(1, new Cell(true, null));\n-", "@@ -29,0 +30,2 @@ package com.google.refine.model;\n+import java.io.Serializable;\n+", "@@ -39,2 +41,5 @@ public class ColumnModelTests extends RefineTest {\n-        Project project = createCSVProject(\"a,b\\n\" +\n-                \"e,e\");\n+        Project project = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"e\", \"e\" }\n+                });", "@@ -29,0 +30,2 @@ package com.google.refine.model;\n+import java.io.Serializable;\n+", "@@ -39,3 +41,6 @@ public class RecordModelTests extends RefineTest {\n-        Project proj = createCSVProject(\"key,val\\n\"\n-                + \"34,first\\n\"\n-                + \",second\");\n+        Project proj = createProject(\n+                new String[] { \"key\", \"val\" },\n+                new Serializable[][] {\n+                        { \"34\", \"first\" },\n+                        { null, \"second\" }\n+                });", "@@ -35,0 +36 @@ import java.io.LineNumberReader;\n+import java.io.Serializable;", "@@ -61,3 +62,3 @@ public class DataExtensionChangeTest extends RefineTest {\n-        project = createCSVProject(\n-                \"reconciled\\n\" +\n-                        \"some item\");\n+        project = createProject(\n+                new String[] { \"reconciled\" },\n+                new Serializable[][] { { \"some item\" } });", "@@ -35,0 +36 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -207,2 +208,5 @@ public class StandardReconConfigTests extends RefineTest {\n-        Project project = createCSVProject(\"title,director\\n\"\n-                + \"mulholland drive,david lynch\");\n+        Project project = createProject(\n+                new String[] { \"title\", \"director\" },\n+                new Serializable[][] {\n+                        { \"mulholland drive\", \"david lynch\" }\n+                });", "@@ -241,2 +245,5 @@ public class StandardReconConfigTests extends RefineTest {\n-        Project project = createCSVProject(\"title,director\\n\"\n-                + \"mulholland drive,david lynch\");\n+        Project project = createProject(\n+                new String[] { \"title\", \"director\" },\n+                new Serializable[][] {\n+                        { \"mulholland drive\", \"david lynch\" }\n+                });", "@@ -308,2 +315,5 @@ public class StandardReconConfigTests extends RefineTest {\n-        Project project = createCSVProject(\"title,director\\n\"\n-                + \"mulholland drive,david lynch\");\n+        Project project = createProject(\n+                new String[] { \"title\", \"director\" },\n+                new Serializable[][] {\n+                        { \"mulholland drive\", \"david lynch\" }\n+                });", "@@ -29,0 +30 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;", "@@ -63,6 +64,8 @@ public class BlankDownTests extends RefineTest {\n-        project = createCSVProject(\n-                \"key,first,second\\n\" +\n-                        \"a,b,c\\n\" +\n-                        \",d,c\\n\" +\n-                        \"e,f,c\\n\" +\n-                        \",,c\\n\");\n+        project = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", \"c\" },\n+                        { \"e\", \"f\", \"c\" },\n+                        { null, null, \"c\" }\n+                });", "@@ -29,0 +30 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;", "@@ -63,6 +64,8 @@ public class FillDownTests extends RefineTest {\n-        project = createCSVProject(\n-                \"key,first,second\\n\" +\n-                        \"a,b,c\\n\" +\n-                        \",d,\\n\" +\n-                        \"e,f,\\n\" +\n-                        \",,h\\n\");\n+        project = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", null },\n+                        { \"e\", \"f\", null },\n+                        { null, null, \"h\" }\n+                });", "@@ -35,0 +36 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;", "@@ -70,6 +71,8 @@ public class JoinMultiValuedCellsTests extends RefineTest {\n-        project = createCSVProject(\n-                \"Key,Value\\n\"\n-                        + \"Record_1,one\\n\"\n-                        + \",two\\n\"\n-                        + \",three\\n\"\n-                        + \",four\\n\");\n+        project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two\" },\n+                        { null, \"three\" },\n+                        { null, \"four\" }\n+                });", "@@ -40,3 +40 @@ import java.io.IOException;\n-import java.io.StringReader;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.io.Serializable;", "@@ -137,9 +135,11 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        Project project = createCSVProject(\n-                \"ID,Cat,Val\\n\"\n-                        + \"1,a,1\\n\"\n-                        + \"1,b,3\\n\"\n-                        + \"2,b,4\\n\"\n-                        + \"2,c,5\\n\"\n-                        + \"3,a,2\\n\"\n-                        + \"3,b,5\\n\"\n-                        + \"3,d,3\\n\");\n+        Project project = createProject(\n+                new String[] { \"ID\", \"Cat\", \"Val\" },\n+                new Serializable[][] {\n+                        { \"1\", \"a\", \"1\" },\n+                        { \"1\", \"b\", \"3\" },\n+                        { \"2\", \"b\", \"4\" },\n+                        { \"2\", \"c\", \"5\" },\n+                        { \"3\", \"a\", \"2\" },\n+                        { \"3\", \"b\", \"5\" },\n+                        { \"3\", \"d\", \"3\" }\n+                });", "@@ -193,14 +193,12 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        String csv = \"Key,Value\\n\"\n-                + \"merchant,Katie\\n\"\n-                + \"fruit,apple\\n\"\n-                + \"price,1.2\\n\"\n-                + \"fruit,pear\\n\"\n-                + \"price,1.5\\n\"\n-                + \"merchant,John\\n\"\n-                + \"fruit,banana\\n\"\n-                + \"price,3.1\\n\";\n-        prepareOptions(\",\", 20, 0, 0, 1, false, false);\n-        List<Exception> exceptions = new ArrayList<Exception>();\n-        importer.parseOneFile(project, pm, job, \"filesource\", new StringReader(csv), -1, options, exceptions);\n-        project.update();\n-        ProjectManager.singleton.registerProject(project, pm);\n+        Project project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"merchant\", \"Katie\" },\n+                        { \"fruit\", \"apple\" },\n+                        { \"price\", \"1.2\" },\n+                        { \"fruit\", \"pear\" },\n+                        { \"price\", \"1.5\" },\n+                        { \"merchant\", \"John\" },\n+                        { \"fruit\", \"banana\" },\n+                        { \"price\", \"3.1\" }\n+                });", "@@ -35,0 +36 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;", "@@ -65,3 +66,5 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        project = createCSVProject(\n-                \"Key,Value\\n\"\n-                        + \"Record_1,one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\\n\");\n+        project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" }\n+                });", "@@ -3,0 +4 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;", "@@ -30,5 +31,7 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-        project = createCSVProject(\n-                \"num1,num2\\n\" +\n-                        \"2,3\\n\" +\n-                        \"6,\\n\" +\n-                        \"5,9\");\n+        project = createProject(\n+                new String[] { \"num1\", \"num2\" },\n+                new Serializable[][] {\n+                        { \"2\", \"3\" },\n+                        { \"6\", null },\n+                        { \"5\", \"9\" }\n+                });", "@@ -29,0 +30 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;", "@@ -56,4 +57,6 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        project = createCSVProject(\n-                \"a,b,c\\n\" +\n-                        \"1|2,d,e\\n\" +\n-                        \"3,f,g\\n\");\n+        project = createProject(\n+                new String[] { \"a\", \"b\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1|2\", \"d\", \"e\" },\n+                        { \"3\", \"f\", \"g\" },\n+                });", "@@ -33,0 +34 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -94,4 +95,6 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {\n-        Project project = createCSVProject(\n-                \"A,B\\n\"\n-                        + \"foo,bar\\n\"\n-                        + \"alpha,beta\\n\");\n+        Project project = createProject(\n+                new String[] { \"A\", \"B\" },\n+                new Serializable[][] {\n+                        { \"foo\", \"bar\" },\n+                        { \"alpha\", \"beta\" }\n+                });", "@@ -31,0 +32 @@ import static org.testng.Assert.assertEquals;\n+import java.io.Serializable;", "@@ -85,3 +86,6 @@ public class ReconMarkNewTopicsOperationTests extends RefineTest {\n-        Project project = createCSVProject(\"my column\\n\"\n-                + \"hello\\n\"\n-                + \"world\");\n+        Project project = createProject(\n+                new String[] { \"my column\" },\n+                new Serializable[][] {\n+                        { \"hello\" },\n+                        { \"world\" }\n+                });", "@@ -101,3 +105,6 @@ public class ReconMarkNewTopicsOperationTests extends RefineTest {\n-        Project project = createCSVProject(\"my column\\n\"\n-                + \"hello\\n\"\n-                + \"world\");\n+        Project project = createProject(\n+                new String[] { \"my column\" },\n+                new Serializable[][] {\n+                        { \"hello\" },\n+                        { \"world\" }\n+                });", "@@ -32,0 +33 @@ import static org.mockito.Mockito.when;\n+import java.io.Serializable;", "@@ -130,5 +131,7 @@ public class ReconOperationTests extends RefineTest {\n-        Project project = createCSVProject(\"my recon test project\",\n-                \"column\\n\"\n-                        + \"valueA\\n\"\n-                        + \"valueB\\n\"\n-                        + \"valueC\");\n+        Project project = createProject(\"my recon test project\",\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"valueA\" },\n+                        { \"valueB\" },\n+                        { \"valueC\" }\n+                });", "@@ -32,0 +33 @@ import static org.testng.Assert.assertNull;\n+import java.io.Serializable;", "@@ -69,4 +70,7 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {\n-        Project project = createCSVProject(\"ids,v\\n\"\n-                + \"Q343,hello\\n\"\n-                + \",world\\n\"\n-                + \"http://test.org/entities/Q31,test\");\n+        Project project = createProject(\n+                new String[] { \"ids\", \"v\" },\n+                new Serializable[][] {\n+                        { \"Q343\", \"hello\" },\n+                        { null, \"world\" },\n+                        { \"http://test.org/entities/Q31\", \"test\" }\n+                });", "@@ -29,0 +30 @@ package com.google.refine.operations.row;\n+import java.io.Serializable;", "@@ -61,8 +62,10 @@ public class RowReorderOperationTests extends RefineTest {\n-        project = createCSVProject(\n-                \"key,first\\n\" +\n-                        \"8,b\\n\" +\n-                        \",d\\n\" +\n-                        \"2,f\\n\" +\n-                        \"1,h\\n\" +\n-                        \"9,F\\n\" +\n-                        \"10,f\\n\");\n+        project = createProject(\n+                new String[] { \"key\", \"first\" },\n+                new Serializable[][] {\n+                        { \"8\", \"b\" },\n+                        { null, \"d\" },\n+                        { \"2\", \"f\" },\n+                        { \"1\", \"h\" },\n+                        { \"9\", \"F\" },\n+                        { \"10\", \"f\" }\n+                });\n"]}, {"id": "0240d6ece11e89a28969fad18433ca4aa62e647d", "message": "Check for invalid Zip file & report to user. Fixes #6253 (#6369)\n\n- Use ZipFile class to pre-check for errors since it does a\r\n  better job than ZipInputStream.\r\n- Add test for non-zip format files with .zip extension", "patch": ["@@ -64,0 +65 @@ import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;", "@@ -153,2 +154,2 @@ public class ImportingUtilities {\n-            JSONUtilities.safePut(config, \"errorDetails\", e.getLocalizedMessage());\n-            throw new IOException(e.getMessage());\n+            JSONUtilities.safePut(config, \"errorDetails\", String.valueOf(e.getCause()));\n+            throw new IOException(e);", "@@ -670 +671 @@ public class ImportingUtilities {\n-    static public InputStream tryOpenAsArchive(File file, String mimeType) {\n+    static public InputStream tryOpenAsArchive(File file, String mimeType) throws IOException {", "@@ -674 +675 @@ public class ImportingUtilities {\n-    static public InputStream tryOpenAsArchive(File file, String mimeType, String contentType) {\n+    static public InputStream tryOpenAsArchive(File file, String mimeType, String contentType) throws IOException {", "@@ -676,21 +677,6 @@ public class ImportingUtilities {\n-        try {\n-            if (fileName.endsWith(\".tar.gz\") || fileName.endsWith(\".tgz\") || isFileGZipped(file)) {\n-                TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(file)));\n-                if (archiveInputStream.getNextTarEntry() != null) {\n-                    // It's a tar archive\n-                    return archiveInputStream;\n-                }\n-                // It's not a tar archive, so it must be gzip compressed (or something else)\n-                return null;\n-            } else if (fileName.endsWith(\".tar.bz2\")) {\n-                return new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));\n-            } else if (fileName.endsWith(\".tar\") || \"application/x-tar\".equals(contentType)) {\n-                return new TarArchiveInputStream(new FileInputStream(file));\n-            } else if (fileName.endsWith(\".zip\")\n-                    || \"application/x-zip-compressed\".equals(contentType)\n-                    || \"application/zip\".equals(contentType)\n-                    || \"application/x-compressed\".equals(contentType)\n-                    || \"multipart/x-zip\".equals(contentType)) {\n-                return new ZipInputStream(new FileInputStream(file));\n-            } else if (fileName.endsWith(\".kmz\")) {\n-                return new ZipInputStream(new FileInputStream(file));\n+        if (fileName.endsWith(\".tar.gz\") || fileName.endsWith(\".tgz\") || isFileGZipped(file)) {\n+            TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(file)));\n+            // TODO: Check whether the below is consuming the first entry (effectively throwing it away)\n+            if (archiveInputStream.getNextTarEntry() != null) {\n+                // It's a tar archive\n+                return archiveInputStream;", "@@ -698 +684,14 @@ public class ImportingUtilities {\n-        } catch (IOException ignored) {\n+            // It's not a tar archive, so it must be gzip compressed (or something else)\n+            return null;\n+        } else if (fileName.endsWith(\".tar.bz2\")) {\n+            return new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));\n+        } else if (fileName.endsWith(\".tar\") || \"application/x-tar\".equals(contentType)) {\n+            return new TarArchiveInputStream(new FileInputStream(file));\n+        } else if (fileName.endsWith(\".zip\")\n+                || \"application/x-zip-compressed\".equals(contentType)\n+                || \"application/zip\".equals(contentType)\n+                || \"application/x-compressed\".equals(contentType)\n+                || \"multipart/x-zip\".equals(contentType)) {\n+            return new ZipInputStream(new FileInputStream(checkValidZip(file)));\n+        } else if (fileName.endsWith(\".kmz\")) {\n+            return new ZipInputStream(new FileInputStream(checkValidZip(file)));", "@@ -702,0 +702,10 @@ public class ImportingUtilities {\n+    private static File checkValidZip(File file) throws IOException {\n+        try (ZipFile zf = new ZipFile(file)) {\n+            if (!zf.entries().hasMoreElements()) {\n+                // Needs to have at least one entry to be useful\n+                throw new IOException(\"Empty Zip file\");\n+            }\n+        }\n+        return file;\n+    }\n+", "@@ -418 +418,7 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        String filename = \"unsupportedPPMD.zip\";\n+        for (String basename : new String[] { \"unsupportedPPMD\", \"notazip\" }) {\n+            testInvalidZipFile(basename);\n+        }\n+    }\n+\n+    private void testInvalidZipFile(String basename) throws IOException {\n+        String filename = basename + \".zip\";", "@@ -421 +427 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        File tmp = File.createTempFile(\"openrefine-test-unsupportedPPMD\", \".zip\", job.getRawDataDir());\n+        File tmp = File.createTempFile(\"openrefine-test-\" + basename, \".zip\", job.getRawDataDir());", "@@ -448 +454 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        assertThrows(IOException.class,\n+        assertThrows(\"Failed to throw for \" + filename, IOException.class,", "@@ -450,3 +456,4 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        assertThrows(FileUploadBase.InvalidContentTypeException.class, () -> ImportingUtilities.retrieveContentFromPostRequest(request,\n-                new Properties(), job.getRawDataDir(), fileRecord, dummyProgress));\n-        assertThrows(IOException.class,\n+        assertThrows(\"Failed to throw for \" + filename, FileUploadBase.InvalidContentTypeException.class,\n+                () -> ImportingUtilities.retrieveContentFromPostRequest(request,\n+                        new Properties(), job.getRawDataDir(), fileRecord, dummyProgress));\n+        assertThrows(\"Failed to throw for \" + filename, IOException.class,", "@@ -454 +460,0 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-\n"]}, {"id": "f0ca6f7a3017b6e2e714946140f6b45d3600dbe2", "message": "Use real TSV exporter/importer. Fixes #2071 (#6344)\n\n* Use real TSV exporter. Fixes #2071\r\n\r\n* Switch to real TSV parser for TSVs", "patch": ["@@ -43,0 +44 @@ import com.fasterxml.jackson.databind.JsonNode;\n+import com.univocity.parsers.common.AbstractWriter;", "@@ -46,0 +48,3 @@ import com.univocity.parsers.csv.CsvWriterSettings;\n+import com.univocity.parsers.tsv.TsvFormat;\n+import com.univocity.parsers.tsv.TsvWriter;\n+import com.univocity.parsers.tsv.TsvWriterSettings;", "@@ -56,0 +61 @@ public class CsvExporter implements WriterExporter {\n+    static TsvFormat TSV_FORMAT = new TsvWriterSettings().getFormat();", "@@ -107,12 +112,18 @@ public class CsvExporter implements WriterExporter {\n-        CsvWriterSettings settings = new CsvWriterSettings();\n-        settings.setQuoteAllFields(quoteAll);\n-        settings.getFormat().setLineSeparator(lineSeparator);\n-        settings.getFormat().setDelimiter(separator);\n-\n-        // Required for our test exportCsvWithQuote which wants the value \"line has \\\"quote\\\"\"\n-        // to be exported as \"\\\"line has \\\"\\\"quote\\\"\\\"\", although the default of literal value\n-        // without the extra quoting is arguably cleaner\n-        settings.setEscapeUnquotedValues(true);\n-        settings.setQuoteEscapingEnabled(true);\n-\n-        final CsvWriter csvWriter = new CsvWriter(writer, settings);\n+        AbstractWriter csvWriter;\n+        if (\"\\t\".equals(separator)) {\n+            TsvWriterSettings tsvSettings = new TsvWriterSettings();\n+            csvWriter = new TsvWriter(writer, tsvSettings);\n+        } else {\n+            CsvWriterSettings settings = new CsvWriterSettings();\n+            settings.setQuoteAllFields(quoteAll); // CSV only\n+            settings.getFormat().setLineSeparator(lineSeparator);\n+            settings.getFormat().setDelimiter(separator);\n+\n+            // Required for our test exportCsvWithQuote which wants the value \"line has \\\"quote\\\"\"\n+            // to be exported as \"\\\"line has \\\"\\\"quote\\\"\\\"\", although the default of literal value\n+            // without the extra quoting is arguably cleaner\n+            settings.setEscapeUnquotedValues(true);\n+            settings.setQuoteEscapingEnabled(true);\n+\n+            csvWriter = new CsvWriter(writer, settings);\n+        }", "@@ -70,0 +71 @@ public class ImporterUtilities {\n+                    // FIXME: Why do we skip Infinities and NaNs?", "@@ -53,0 +54 @@ import com.google.common.base.CharMatcher;\n+import com.univocity.parsers.common.AbstractParser;", "@@ -59,0 +61,2 @@ import com.univocity.parsers.csv.UnescapedQuoteHandling;\n+import com.univocity.parsers.tsv.TsvParser;\n+import com.univocity.parsers.tsv.TsvParserSettings;", "@@ -88 +91 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-        JSONUtilities.safePut(options, \"trimStrings\", true);\n+        JSONUtilities.safePut(options, \"trimStrings\", true); // FIXME: ignored?", "@@ -110,0 +114,3 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n+        // TODO: Perhaps ask user to declare explicitly if they want TSV or weird CSV with \\t separator hybrid?\n+        boolean tsv = \"\\t\".equals(sep) && !processQuotes && !strictQuotes;\n+", "@@ -139,9 +145,19 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-        CsvParserSettings settings = new CsvParserSettings();\n-        CsvFormat format = settings.getFormat();\n-        format.setDelimiter(sep);\n-        format.setQuote(quote);\n-        format.setLineSeparator(\"\\n\");\n-        settings.setIgnoreLeadingWhitespaces(false);\n-        settings.setIgnoreTrailingWhitespaces(false);\n-        if (strictQuotes) {\n-            settings.setUnescapedQuoteHandling(UnescapedQuoteHandling.RAISE_ERROR);\n+        AbstractParser parser;\n+        if (tsv) {\n+            TsvParserSettings settings = new TsvParserSettings();\n+            settings.setMaxCharsPerColumn(256 * 1024); // TODO: Perhaps use a lower default and make user configurable?\n+            parser = new TsvParser(settings);\n+        } else {\n+            CsvParserSettings settings = new CsvParserSettings();\n+            CsvFormat format = settings.getFormat();\n+            format.setDelimiter(sep);\n+            format.setQuote(quote);\n+            format.setLineSeparator(\"\\n\");\n+            settings.setIgnoreLeadingWhitespaces(false);\n+            settings.setIgnoreTrailingWhitespaces(false);\n+            if (strictQuotes) {\n+                settings.setUnescapedQuoteHandling(UnescapedQuoteHandling.RAISE_ERROR);\n+            }\n+            settings.setKeepQuotes(!processQuotes);\n+            settings.setMaxCharsPerColumn(256 * 1024); // TODO: Perhaps use a lower default and make user configurable?\n+            parser = new CsvParser(settings);", "@@ -149,3 +164,0 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-        settings.setKeepQuotes(!processQuotes);\n-        settings.setMaxCharsPerColumn(256 * 1024); // TODO: Perhaps use a lower default and make user configurable?\n-", "@@ -153 +166 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-            CsvParser parser = new CsvParser(settings);\n+", "@@ -140 +140 @@ public class TsvExporterTests extends RefineTest {\n-                \"row1cell0\\t\\\"line\\n\\n\\nbreak\\\"\\trow1cell2\\n\" +\n+                \"row1cell0\\tline\\\\n\\\\n\\\\nbreak\\trow1cell2\\n\" +", "@@ -157 +157 @@ public class TsvExporterTests extends RefineTest {\n-                \"row1cell0\\t\\\"with\\t tab\\\"\\trow1cell2\\n\" +\n+                \"row1cell0\\twith\\\\t tab\\trow1cell2\\n\" +", "@@ -174 +174 @@ public class TsvExporterTests extends RefineTest {\n-                \"row1cell0\\t\\\"line has \\\"\\\"quote\\\"\\\"\\\"\\trow1cell2\\n\" +\n+                \"row1cell0\\tline has \\\"quote\\\"\\trow1cell2\\n\" +", "@@ -645,0 +646,23 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n+    @Test\n+    public void readTsvWithEmbeddedEscapes() {\n+        // Be careful of whitespace at field boundaries which will get trimmed by trimWhitespace = true\n+        // Also take care to make sure backslashes are escaped correctly for Java\n+        String input = \"da\\\\rta1\\tdat\\\\ta2\\tdata3\\tdat\\\\na4\";\n+        StringReader reader = new StringReader(input);\n+\n+        prepareOptions(\"\\t\", -1, 0, 0, 0, false, true);\n+\n+        try {\n+            parseOneFile(SUT, reader);\n+        } catch (Exception e) {\n+            Assert.fail(\"Exception during file parse\", e);\n+        }\n+\n+        Assert.assertEquals(project.rows.size(), 1);\n+        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n+        Assert.assertEquals((String) project.rows.get(0).cells.get(0).value, \"da\\rta1\");\n+        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, \"dat\\ta2\");\n+        Assert.assertEquals((String) project.rows.get(0).cells.get(2).value, \"data3\");\n+        Assert.assertEquals((String) project.rows.get(0).cells.get(3).value, \"dat\\na4\");\n+    }\n+\n"]}, {"id": "7fd4077e0d761c855795c555898c6d4093566ec6", "message": "Set version to 3.8-beta1\n", "patch": ["@@ -67 +67 @@ public class RefineServlet extends Butterfly {\n-    static private String ASSIGNED_VERSION = \"3.8-SNAPSHOT\";\n+    static private String ASSIGNED_VERSION = \"3.8-beta1\";\n"]}, {"id": "7ee2be1893b21655630bcbd3f83de175c860a520", "message": "Set version to 3.9-SNAPSHOT\n", "patch": ["@@ -67 +67 @@ public class RefineServlet extends Butterfly {\n-    static private String ASSIGNED_VERSION = \"3.8-beta1\";\n+    static private String ASSIGNED_VERSION = \"3.9-SNAPSHOT\";\n"]}, {"id": "e7e865b3d9d6118127ab42aea4319afaad00f7f1", "message": "Fix replace menu to correctly escape quotes. Fixes #6367 (#6374)\n\n- Add escaping for double quotes (\") to front end\r\n- Add Cypress e2e test\r\n\r\n---------\r\n\r\nCo-authored-by: suraj.bora <suraj.bora@ambitionbox.com>", "patch": ["@@ -247 +246,0 @@ public class GrelTests extends RefineTest {\n-\n"]}, {"id": "7438984df049243e28892e91f8f220c25611da0e", "message": "Improve error reporting when parsing incomplete GREL expressions (#6368)\n\nCo-authored-by: suraj.bora <suraj.bora@ambitionbox.com>\r\nCo-authored-by: Antonin Delpeuch <antonin@delpeuch.eu>", "patch": ["@@ -258 +258 @@ public class Scanner {\n-                _index++;\n+                if (_index < _limit) _index++; // index should be incremented only if it is less than limit", "@@ -35,0 +36,2 @@ package com.google.refine.grel;\n+import static org.testng.Assert.fail;\n+", "@@ -96 +98 @@ public class GrelTests extends RefineTest {\n-            Assert.fail(\"Expression failed to generate parse syntax error: \" + test);\n+            fail(\"Expression failed to generate parse syntax error: \" + test);", "@@ -112 +114 @@ public class GrelTests extends RefineTest {\n-                Assert.fail(\"Unexpected parse failure: \" + test);\n+                fail(\"Unexpected parse failure: \" + test);", "@@ -244 +246,14 @@ public class GrelTests extends RefineTest {\n-            Assert.fail(\"Unexpected parse failure for cross function: \" + test);\n+            fail(\"Unexpected parse failure for cross function: \" + test);\n+        }\n+    }\n+\n+    // Test for /\\ throwing Internal Error\n+    @Test\n+    public void testRegex() {\n+        String test = \"value.replace(/\\\\\";\n+        try {\n+            MetaParser.parse(\"grel:\" + test);\n+            fail(\"No Exception was thrown\");\n+        } catch (ParsingException e) {\n+            Assert.assertEquals(e.getMessage(),\n+                    \"Parsing error at offset 14: Missing number, string, identifier, regex, or parenthesized expression\");\n"]}, {"id": "9e82b2a790e943b47127e81698fb3bb48847648e", "message": "Metaphone3 testing improvements (#6400)\n\n* Migrate dead code to test in Metaphone3\r\n\r\n* Exclude Metaphone3 from coverage reports\r\n\r\nIt has a few orders of magnitude more instructions than the rest of\r\nour code, dominating the statistics reported in coverage results,\r\nand it is a heuristic anyway.", "patch": ["@@ -7354,104 +7354 @@ public class Metaphone3 {\n-\t/**\n-\t * @param args\n-\t */\n-\tpublic static void main(String[] args)\n-\t{\n-\t\t// example code\n-\t\t\n-\t\tMetaphone3 m3 = new Metaphone3();\n-\n-\t\t//m3.SetEncodeVowels(true);\n-\t\t//m3.SetEncodeExact(true);\n-\n-\t\tm3.SetWord(\"iron\");\n-\n-\t\tm3.Encode();\n-\n-\t\tSystem.out.println(\"iron : \" + m3.GetMetaph());\n-\t\tSystem.out.println(\"iron : (alt) \" + m3.GetAlternateMetaph());\t\n-\n-\t\tm3.SetWord(\"witz\");\n-\n-\t\tm3.Encode();\n-\n-\t\tSystem.out.println(\"witz : \" + m3.GetMetaph());\n-\t\tSystem.out.println(\"witz : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\tm3.SetWord(\"\");\n-\n-\t\tm3.Encode();\n-\n-\t\tSystem.out.println(\"BLANK : \" + m3.GetMetaph());\n-\t\tSystem.out.println(\"BLANK : (alt) \" + m3.GetAlternateMetaph());\t\n-\n-\t\t// these settings default to false\n-\t\tm3.SetEncodeExact(true);\n-\t\tm3.SetEncodeVowels(true);\n-\n-\t\tString test = new String(\"Guillermo\");\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"VILLASENOR\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"GUILLERMINA\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"PADILLA\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"BJORK\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\n-\t\t\n-\t\ttest = \"belle\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"ERICH\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"CROCE\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"GLOWACKI\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\n-\t\ttest = \"qing\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\t\n-\t\t\t\t\n-\t\ttest = \"tsing\";\n-\t\tm3.SetWord(test);\n-\t\tm3.Encode();\n-\t\tSystem.out.println(test + \" : \" + m3.GetMetaph());\t\n-\t\tSystem.out.println(test + \" : (alt) \" + m3.GetAlternateMetaph());\n-\t\t\n-\t}\n+\t// 2024-02-26: Changed the `main` method into a unit test (see Metaphone3Tests.java)\n--- /dev/null", "@@ -0,0 +1,73 @@\n+/*\n+\n+Copyright 2010, Lawrence Philips\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.clustering.binning;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class Metaphone3Tests {\n+\n+    @DataProvider(name = \"metaphone3-test-cases\")\n+    public Object[][] metaphone3TestCases() {\n+        return new Object[][] {\n+                // examples taken from the original `main` method of Metaphone3.java\n+                { \"iron\", false, \"ARN\", \"\" },\n+                { \"witz\", false, \"TS\", \"FX\" },\n+                { \"\", false, \"\", \"\" },\n+                { \"VILLASENOR\", true, \"VALASANA\", \"VASANAR\" },\n+                { \"GUILLERMINA\", true, \"GARMANA\", \"\" },\n+                { \"PADILLA\", true, \"PADALA\", \"PADA\" },\n+                { \"BJORK\", true, \"BARK\", \"\" },\n+                { \"belle\", true, \"BAL\", \"\" },\n+                { \"ERICH\", true, \"ARAK\", \"ARAX\" },\n+                { \"CROCE\", true, \"KRAXA\", \"KRASA\" },\n+                { \"GLOWACKI\", true, \"GLAKA\", \"GLAVASKA\" },\n+                { \"qing\", true, \"XANG\", \"\" },\n+                { \"tsing\", true, \"XANG\", \"\" },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"metaphone3-test-cases\")\n+    public void testLastNames(String source, boolean exactAndVowels, String metaph, String alternateMetaph) {\n+        Metaphone3 _metaphone3 = new Metaphone3();\n+        _metaphone3.SetEncodeExact(exactAndVowels);\n+        _metaphone3.SetEncodeVowels(exactAndVowels);\n+        _metaphone3.SetWord(source);\n+        _metaphone3.Encode();\n+        assertEquals(_metaphone3.GetMetaph(), metaph);\n+        assertEquals(_metaphone3.GetAlternateMetaph(), alternateMetaph);\n+    }\n+}\n"]}, {"id": "21aaf8a367f1b2ef42ccbdf43f96d72af2737153", "message": "Report importer initialization errors. Fixes #6058 (#6370)\n\n* Improved importer error handling and cleanup refactor\r\n\r\n- check for errors during createParserUIInitializationData phase\r\n  (e.g. XML or JSON parse errors) and pass them to the front end\r\n- DefaultImportingController now extends Command since it's really\r\n  a command and it provides direct access to HTTP response methods\r\n- DRY up Command and HttpUtilities redundant code\r\n- add front end error handling for when initial preview parse fails\r\n  and display error to the user\r\n- use new error dialog instead of alert()s everywhere\r\n- locally detabify Javascript near diffs to make code more readable\r\n\r\n* Report importer initialization errors. Fixes #6058\r\n\r\n- Also add XML import e2e tests including error handling\r\n\r\n* Handle XML parser errors from deeper in parse. Fixes #3638.\r\n\r\n- let the XML parser error bubble up to where it can be\r\n  reported to the front end by our error handling code\r\n\r\n* Return more detailed error info to front end", "patch": ["@@ -39 +38,0 @@ import java.io.StringWriter;\n-import java.io.Writer;", "@@ -40,0 +40 @@ import java.util.HashMap;\n+import java.util.List;", "@@ -49,2 +48,0 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import org.apache.velocity.VelocityContext;", "@@ -279,7 +277 @@ public abstract class Command {\n-            response.setCharacterEncoding(\"UTF-8\");\n-            response.setHeader(\"Content-Type\", \"application/json\");\n-            Writer w = response.getWriter();\n-            ParsingUtilities.defaultWriter.writeValue(w, new HistoryEntryResponse(historyEntry));\n-\n-            w.flush();\n-            w.close();\n+            respondJSON(response, new HistoryEntryResponse(historyEntry));", "@@ -287,3 +279 @@ public abstract class Command {\n-            response.setCharacterEncoding(\"UTF-8\");\n-            response.setHeader(\"Content-Type\", \"application/json\");\n-            respond(response, \"{ \\\"code\\\" : \\\"pending\\\" }\");\n+            respondCodePending(response);", "@@ -292,0 +283,17 @@ public abstract class Command {\n+    static protected void respondStatusOk(HttpServletResponse response) throws IOException {\n+        respondStatusOk(response, null);\n+    }\n+\n+    static protected void respondStatusOk(HttpServletResponse response, String message) throws IOException {\n+        respondStatus(response, \"ok\", message);\n+    }\n+\n+    // TODO: This seems like unnecessary redundancy, but can be reviewed along with the rest of the API responses\n+    static protected void respondOkDone(HttpServletResponse response) throws IOException {\n+        respondStatusOk(response, \"done\");\n+    }\n+\n+    static protected void respondCodePending(HttpServletResponse response) throws IOException {\n+        respondJSON(response, Map.of(\"code\", \"pending\"));\n+    }\n+", "@@ -295,11 +302 @@ public abstract class Command {\n-\n-        response.setCharacterEncoding(\"UTF-8\");\n-        response.setStatus(HttpServletResponse.SC_OK);\n-        Writer w = response.getWriter();\n-        if (w != null) {\n-            w.write(content);\n-            w.flush();\n-            w.close();\n-        } else {\n-            throw new ServletException(\"response returned a null writer\");\n-        }\n+        HttpUtilities.respond(response, content);", "@@ -307,0 +305,5 @@ public abstract class Command {\n+    /**\n+     * @deprecated for 3.8 renamed to {@link #respondStatus(HttpServletResponse, String, String)} to disambiguate the\n+     *             from the standard respond which sets `code` instead of `status`\n+     */\n+    @Deprecated", "@@ -310,11 +312,13 @@ public abstract class Command {\n-        response.setCharacterEncoding(\"UTF-8\");\n-        Writer w = response.getWriter();\n-        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);\n-        writer.writeStartObject();\n-        writer.writeStringField(\"status\", status);\n-        writer.writeStringField(\"message\", message);\n-        writer.writeEndObject();\n-        writer.flush();\n-        writer.close();\n-        w.flush();\n-        w.close();\n+        respondStatus(response, status, message);\n+    }\n+\n+    static protected void respondStatus(HttpServletResponse response, String status, String message)\n+            throws IOException {\n+        // NOTE: This method sets \"status\", not \"code\" in the reply\n+        HttpUtilities.respond(response, status, message);\n+    }\n+\n+    static protected void respondStatusError(HttpServletResponse response, String message)\n+            throws IOException {\n+        // NOTE: This method sets \"status\", not \"code\" in the reply\n+        respondStatus(response, \"error\", message);", "@@ -328,0 +333,2 @@ public abstract class Command {\n+    // TODO: options parameter is ignored here, but the only usage is an empty Properties object\n+    @Deprecated", "@@ -333,3 +339,3 @@ public abstract class Command {\n-        response.setCharacterEncoding(\"UTF-8\");\n-        response.setHeader(\"Content-Type\", \"application/json\");\n-        response.setHeader(\"Cache-Control\", \"no-cache\");\n+        // TODO: Inline the HttpUtilities code here when deprecation period expires\n+        HttpUtilities.respondJSON(response, o, options);\n+    }", "@@ -337,2 +343,3 @@ public abstract class Command {\n-        Writer w = response.getWriter();\n-        ParsingUtilities.defaultWriter.writeValue(w, o);\n+    static protected void respondCSRFError(HttpServletResponse response) throws IOException {\n+        respondCodeError(response, \"Missing or invalid csrf_token parameter\");\n+    }", "@@ -340,2 +347,2 @@ public abstract class Command {\n-        w.flush();\n-        w.close();\n+    static protected void respondCodeError(HttpServletResponse response, String message) throws IOException {\n+        respondCodeError(response, message, HttpServletResponse.SC_BAD_REQUEST);", "@@ -344 +351,9 @@ public abstract class Command {\n-    static protected void respondCSRFError(HttpServletResponse response) throws IOException {\n+    static protected void respondCodeError(HttpServletResponse response, String message, int statusCode) throws IOException {\n+        respondCodeError(response, message, statusCode, null);\n+    }\n+\n+    static protected void respondCodeError(HttpServletResponse response, String message, int statusCode, String stackTrace)\n+            throws IOException {\n+        // TODO: We always return OK for now as has been the historical practice, but would like to return meaningful\n+        // HTTP status codes in the future.\n+//        response.setStatus(statusCode);", "@@ -347 +362,6 @@ public abstract class Command {\n-        responseJSON.put(\"message\", \"Missing or invalid csrf_token parameter\");\n+        if (message != null) {\n+            responseJSON.put(\"message\", message);\n+        }\n+        if (stackTrace != null) {\n+            responseJSON.put(\"stack\", stackTrace);\n+        }", "@@ -361,20 +381,17 @@ public abstract class Command {\n-        response.setCharacterEncoding(\"UTF-8\");\n-        response.setHeader(\"Content-Type\", \"application/json\");\n-\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw);\n-        e.printStackTrace(pw);\n-        pw.flush();\n-        sw.flush();\n-\n-        Writer w = response.getWriter();\n-        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);\n-        writer.writeStartObject();\n-        writer.writeStringField(\"code\", \"error\");\n-        writer.writeStringField(\"message\", e.toString());\n-        writer.writeStringField(\"stack\", sw.toString());\n-        writer.writeEndObject();\n-        writer.flush();\n-        writer.close();\n-        w.flush();\n-        w.close();\n+        try (StringWriter sw = new StringWriter();\n+                PrintWriter pw = new PrintWriter(sw)) {\n+            e.printStackTrace(pw);\n+            pw.flush();\n+            sw.flush();\n+            // FIXME: status is currently ignored, but switch this when supported\n+//            respondCodeError(response, e.toString(), HttpServletResponse.SC_INTERNAL_SERVER_ERROR, sw.toString());\n+            respondCodeError(response, e.toString(), HttpServletResponse.SC_OK, sw.toString());\n+        }\n+    }\n+\n+    /**\n+     * Used by @link DefaultImportingController} and GData importer to report non-fatal exceptions\n+     */\n+    static protected void respondStatusErrors(HttpServletResponse response, List<Exception> exceptions)\n+            throws IOException, ServletException {\n+        respondJSON(response, Map.of(\"status\", \"error\", \"errors\", exceptions));", "@@ -388,21 +405,2 @@ public abstract class Command {\n-        VelocityContext context = new VelocityContext();\n-\n-        context.put(\"message\", message);\n-\n-        if (e != null) {\n-            StringWriter writer = new StringWriter();\n-\n-            e.printStackTrace(new PrintWriter(writer));\n-\n-            context.put(\"stack\", writer.toString());\n-        } else {\n-            context.put(\"stack\", \"\");\n-        }\n-\n-        try {\n-            servlet.getModule(\"core\").sendTextFromTemplate(\n-                    request, response, context, \"error.vt\", \"UTF-8\", \"text/html\", true);\n-\n-        } catch (Exception e1) {\n-            e1.printStackTrace();\n-        }\n+        // TODO: inline implementation from {@link HttpUtilities#respondWithErrorPage} when deprecation period expires\n+        HttpUtilities.respondWithErrorPage(servlet, request, response, message, e);", "@@ -31,2 +30,0 @@ import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;", "@@ -33,0 +32 @@ import java.io.Writer;\n+import java.util.Map;", "@@ -40 +39 @@ import javax.servlet.http.HttpServletResponse;\n-import com.fasterxml.jackson.core.JsonGenerator;\n+import org.apache.commons.lang3.exception.ExceptionUtils;", "@@ -47,0 +47,5 @@ import com.google.refine.util.ParsingUtilities;\n+/**\n+ * @deprecated deprecated for v3.8. All methods have been deprecated and this class will be removed. Most users should\n+ *             be extending {@link Command} to get access to this functionality.\n+ */\n+@Deprecated", "@@ -51,0 +56 @@ abstract public class HttpUtilities {\n+    @Deprecated", "@@ -66,0 +72 @@ abstract public class HttpUtilities {\n+    @Deprecated", "@@ -69,11 +75,8 @@ abstract public class HttpUtilities {\n-\n-        Writer w = response.getWriter();\n-        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);\n-        writer.writeStartObject();\n-        writer.writeStringField(\"status\", status);\n-        writer.writeStringField(\"message\", message);\n-        writer.writeEndObject();\n-        writer.flush();\n-        writer.close();\n-        w.flush();\n-        w.close();\n+        // FIXME: This is the only place that uses status instead of code\n+        if (message == null) {\n+            respondJSON(response, Map.of(\"status\", status));\n+        } else {\n+            respondJSON(response, Map.of(\n+                    \"status\", status,\n+                    \"message\", message));\n+        }", "@@ -81,0 +85,4 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. No internal uses. Move to {@link Command} when deprecation period expires.\n+     */\n+    @Deprecated", "@@ -85 +92 @@ abstract public class HttpUtilities {\n-        respondJSON(response, o, new Properties());\n+        respondJsonInternal(response, o);", "@@ -87,0 +95,6 @@ abstract public class HttpUtilities {\n+    /**\n+     * TODO: options parameter is ignored here, but it's always empty in the only place it's used. DRY up\n+     *\n+     * @deprecated deprecated for v3.8. No internal uses. Move to {@link Command} when deprecation period expires.\n+     */\n+    @Deprecated", "@@ -91,0 +105,8 @@ abstract public class HttpUtilities {\n+        respondJsonInternal(response, o);\n+    }\n+\n+    // TODO: This can be inlined with 2-parameter method when 3-param is removed\n+    static private void respondJsonInternal(\n+            HttpServletResponse response, Object o)\n+            throws IOException {\n+", "@@ -100,0 +122,4 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. No internal uses.\n+     */\n+    @Deprecated", "@@ -109,21 +134,8 @@ abstract public class HttpUtilities {\n-\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw);\n-        e.printStackTrace(pw);\n-        pw.flush();\n-        sw.flush();\n-\n-        response.setCharacterEncoding(\"UTF-8\");\n-        response.setHeader(\"Content-Type\", \"application/json\");\n-\n-        Writer w = response.getWriter();\n-        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);\n-        writer.writeStartObject();\n-        writer.writeStringField(\"code\", \"error\");\n-        writer.writeStringField(\"message\", e.getMessage());\n-        writer.writeStringField(\"stack\", sw.toString());\n-        writer.writeEndObject();\n-        writer.flush();\n-        writer.close();\n-        w.flush();\n-        w.close();\n+        // TODO: We would like to return an HTTP error here, but front end needs scrubbing first to\n+        // to make sure everywhere can handle it. There are known issues with things like the IllegalArgumentException\n+        // used for bad regexps\n+//        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+        respondJSON(response, Map.of(\n+                \"code\", \"error\", // respondStatus() above uses status instead of code\n+                \"message\", e.getMessage(),\n+                \"stack\", ExceptionUtils.getStackTrace(e)));", "@@ -131,0 +144,4 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. No internal uses.\n+     */\n+    @Deprecated", "@@ -135,0 +152,5 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. No internal uses. There is an implementation in the {@link Command} class for\n+     *             commands which need it.\n+     */\n+    @Deprecated", "@@ -147,0 +169,5 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. No internal uses other than call from {@link Command} where this implementation\n+     *             can be moved when deprecation period expires.\n+     */\n+    @Deprecated", "@@ -153,0 +180 @@ abstract public class HttpUtilities {\n+        // TODO: Move implementation to {@link Command} when deprecation period expires", "@@ -157,0 +185,4 @@ abstract public class HttpUtilities {\n+    /**\n+     * @deprecated deprecated for v3.8. Only internal use is invocation directly above\n+     */\n+    @Deprecated", "@@ -164,0 +196 @@ abstract public class HttpUtilities {\n+        // TODO: Move implementation to {@link Command} when deprecation period expires", "@@ -168,10 +200 @@ abstract public class HttpUtilities {\n-\n-        if (e != null) {\n-            StringWriter writer = new StringWriter();\n-\n-            e.printStackTrace(new PrintWriter(writer));\n-\n-            context.put(\"stack\", writer.toString());\n-        } else {\n-            context.put(\"stack\", \"\");\n-        }\n+        context.put(\"stack\", e == null ? \"\" : ExceptionUtils.getStackTrace(e));", "@@ -186 +209 @@ abstract public class HttpUtilities {\n-            e1.printStackTrace();\n+            logger.error(\"Error processing Velocity template\", e1);", "@@ -125,0 +126 @@ public class ExcelImporter extends TabularImportingParserBase {\n+            JSONUtilities.safePut(options, \"error\", e.toString());", "@@ -127,0 +129 @@ public class ExcelImporter extends TabularImportingParserBase {\n+            JSONUtilities.safePut(options, \"error\", e.toString());", "@@ -129,0 +132 @@ public class ExcelImporter extends TabularImportingParserBase {\n+            JSONUtilities.safePut(options, \"error\", e.toString());", "@@ -89 +88,0 @@ public class XmlImporter extends TreeImportingParserBase {\n-                InputStream is = new FileInputStream(file);", "@@ -91 +90 @@ public class XmlImporter extends TreeImportingParserBase {\n-                try {\n+                try (InputStream is = new FileInputStream(file)) {", "@@ -109,3 +108,2 @@ public class XmlImporter extends TreeImportingParserBase {\n-                    logger.warn(\"Error generating parser UI initialization data for XML file\", e);\n-                } finally {\n-                    is.close();\n+                    JSONUtilities.safePut(options, \"error\", e.toString());\n+                    logger.error(\"Error generating parser UI initialization data for XML file\", e);", "@@ -121 +119 @@ public class XmlImporter extends TreeImportingParserBase {\n-    final static private ObjectNode descendElement(XMLStreamReader parser, PreviewParsingState state) {\n+    final static private ObjectNode descendElement(XMLStreamReader parser, PreviewParsingState state) throws XMLStreamException {", "@@ -166,16 +164,8 @@ public class XmlImporter extends TreeImportingParserBase {\n-        try {\n-            while (parser.hasNext() && state.tokenCount < PREVIEW_PARSING_LIMIT) {\n-                int tokenType = parser.next();\n-                state.tokenCount++;\n-                if (tokenType == XMLStreamConstants.END_ELEMENT) {\n-                    break;\n-                } else if (tokenType == XMLStreamConstants.START_ELEMENT) {\n-                    ObjectNode childElement = descendElement(parser, state);\n-                    if (childElement != null) {\n-                        children.add(childElement);\n-                    }\n-                } else if (tokenType == XMLStreamConstants.CHARACTERS ||\n-                        tokenType == XMLStreamConstants.CDATA ||\n-                        tokenType == XMLStreamConstants.SPACE) {\n-                    ObjectNode childElement = ParsingUtilities.mapper.createObjectNode();\n-                    JSONUtilities.safePut(childElement, \"t\", parser.getText());\n+        while (parser.hasNext() && state.tokenCount < PREVIEW_PARSING_LIMIT) {\n+            int tokenType = parser.next();\n+            state.tokenCount++;\n+            if (tokenType == XMLStreamConstants.END_ELEMENT) {\n+                break;\n+            } else if (tokenType == XMLStreamConstants.START_ELEMENT) {\n+                ObjectNode childElement = descendElement(parser, state);\n+                if (childElement != null) {", "@@ -183,2 +172,0 @@ public class XmlImporter extends TreeImportingParserBase {\n-                } else {\n-                    // ignore everything else", "@@ -185,0 +174,8 @@ public class XmlImporter extends TreeImportingParserBase {\n+            } else if (tokenType == XMLStreamConstants.CHARACTERS ||\n+                    tokenType == XMLStreamConstants.CDATA ||\n+                    tokenType == XMLStreamConstants.SPACE) {\n+                ObjectNode childElement = ParsingUtilities.mapper.createObjectNode();\n+                JSONUtilities.safePut(childElement, \"t\", parser.getText());\n+                children.add(childElement);\n+            } else {\n+                // ignore everything else", "@@ -187,2 +182,0 @@ public class XmlImporter extends TreeImportingParserBase {\n-        } catch (XMLStreamException e) {\n-            logger.error(\"Error generating parser UI initialization data for XML file\", e);", "@@ -39 +38,0 @@ import java.io.StringWriter;\n-import java.io.Writer;", "@@ -41,0 +41 @@ import java.util.List;\n+import java.util.Map;", "@@ -55 +54,0 @@ import com.google.refine.commands.Command;\n-import com.google.refine.commands.HttpUtilities;", "@@ -60 +59 @@ import com.google.refine.util.ParsingUtilities;\n-public class DefaultImportingController implements ImportingController {\n+public class DefaultImportingController extends Command implements ImportingController {", "@@ -97 +96 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such sub command\");\n+            respondStatusError(response, \"No such sub command\");", "@@ -107 +106 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            respondStatusError(response, \"No such import job\");", "@@ -114 +113 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"Job already started; cannot load more data\");\n+            respondStatusError(response, \"Job already started; cannot load more data\");", "@@ -130 +129 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            respondStatusError(response, \"No such import job\");", "@@ -137 +136 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+            respondStatusError(response, \"Job not ready\");", "@@ -157 +156 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            respondStatusError(response, \"No such import job\");", "@@ -164 +163 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+            respondStatusError(response, \"Job not ready\");", "@@ -172 +171 @@ public class DefaultImportingController implements ImportingController {\n-        List<Exception> exceptions = new LinkedList<Exception>();\n+        List<Exception> exceptions = new LinkedList<>();", "@@ -176,2 +174,0 @@ public class DefaultImportingController implements ImportingController {\n-        Writer w = response.getWriter();\n-        JsonGenerator writer = ParsingUtilities.mapper.getFactory().createGenerator(w);", "@@ -179 +175,0 @@ public class DefaultImportingController implements ImportingController {\n-            writer.writeStartObject();", "@@ -182,2 +178 @@ public class DefaultImportingController implements ImportingController {\n-\n-                writer.writeStringField(\"status\", \"ok\");\n+                respondStatusOk(response);", "@@ -185,4 +180,2 @@ public class DefaultImportingController implements ImportingController {\n-                writer.writeStringField(\"status\", \"error\");\n-                writer.writeArrayFieldStart(\"errors\");\n-                writeErrors(writer, exceptions);\n-                writer.writeEndArray();\n+                // TODO: Perhaps use a different function since a wrong format guess can lead to extraneous exceptions\n+                respondStatusErrors(response, exceptions);", "@@ -190,3 +182,0 @@ public class DefaultImportingController implements ImportingController {\n-            writer.writeEndObject();\n-            writer.flush();\n-            writer.close();", "@@ -195,3 +184,0 @@ public class DefaultImportingController implements ImportingController {\n-        } finally {\n-            w.flush();\n-            w.close();", "@@ -209 +196 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            respondStatusError(response, \"No such import job\");", "@@ -218,5 +205,9 @@ public class DefaultImportingController implements ImportingController {\n-            ObjectNode result = ParsingUtilities.mapper.createObjectNode();\n-            JSONUtilities.safePut(result, \"status\", \"ok\");\n-            JSONUtilities.safePut(result, \"options\", options);\n-\n-            Command.respondJSON(response, result);\n+            String error = JSONUtilities.getString(options, \"error\", null);\n+            // Check for XML parse errors and other unexpected problems\n+            if (error != null) {\n+                respondStatusError(response, \"Error during initialization - \" + error);\n+            } else {\n+                respondJSON(response,\n+                        Map.of(\"status\", \"ok\",\n+                                \"options\", options));\n+            }", "@@ -224 +215 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"Unrecognized format or format has no parser\");\n+            respondStatusError(response, \"Unrecognized format or format has no parser\");", "@@ -234 +225 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"No such import job\");\n+            respondStatusError(response, \"No such import job\");", "@@ -242 +233 @@ public class DefaultImportingController implements ImportingController {\n-            HttpUtilities.respond(response, \"error\", \"Job not ready\");\n+            respondStatusError(response, \"Job not ready\");", "@@ -254 +245 @@ public class DefaultImportingController implements ImportingController {\n-        HttpUtilities.respond(response, \"ok\", \"done\");\n+        respondOkDone(response);", "@@ -283,4 +274 @@ public class DefaultImportingController implements ImportingController {\n-        Writer w = response.getWriter();\n-        ParsingUtilities.defaultWriter.writeValue(w, new JobResponse(\"ok\", job));\n-        w.flush();\n-        w.close();\n+        respondJSON(response, new JobResponse(\"ok\", job));", "@@ -288,0 +277,4 @@ public class DefaultImportingController implements ImportingController {\n+    /**\n+     * @deprecated for v3.8. Unused internally and will be removed in next release\n+     */\n+    @Deprecated\n"]}, {"id": "74330aa67a3b42ff3754095c47b539ceef2bc073", "message": "Log the java version during server startup (#6405)\n\n* log the java version during server startup\r\n\r\n* Add more startup debug logging. Fixes #6404\r\n\r\n- Switch from java.runtime.version to java.vm.version as (slightly) more standard\r\n- Add VM vendor, name, & info\r\n- Always log max heap size, even if it wasn't overridden (in MB for readability)\r\n- Use string interpolation instead of concatenation for logging messages\r\n- Log FileProjectManager init as Info instead of Error\r\n\r\n---------\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>", "patch": ["@@ -126 +126 @@ public class RefineServlet extends Butterfly {\n-        logger.info(\"Starting \" + FULLNAME + \"...\");\n+        logger.info(\"Starting {} ...\", FULLNAME);", "@@ -137,2 +137 @@ public class RefineServlet extends Butterfly {\n-        logger.error(\"initializing FileProjectManager with dir\");\n-        logger.error(data);\n+        logger.info(\"Initializing FileProjectManager with data dir: {}\", data);", "@@ -176,6 +176,6 @@ class RefineServer extends Server {\n-        logger.info(\"Starting Server bound to '\" + iface + \":\" + port + \"'\");\n-\n-        String memory = Configurations.get(\"refine.memory\");\n-        if (memory != null) {\n-            logger.info(\"refine.memory size: \" + memory + \" JVM Max heap: \" + Runtime.getRuntime().maxMemory() + \" bytes\");\n-        }\n+        logger.info(\"Java runtime version {} from java.home: {}\", Runtime.version().toString(), System.getProperty(\"java.home\", \"\"));\n+        logger.info(\"Java VM: {} {} {}\", System.getProperty(\"java.vm.vendor\", \"\"), System.getProperty(\"java.vm.name\", \"\"),\n+                System.getProperty(\"java.vm.version\", \"\"), System.getProperty(\"java.vm.info\", \"\"));\n+        logger.info(\"Starting Server bound to '{}:{}'\", iface, port);\n+        logger.info(\"refine.memory size: {} JVM Max heap: {} MBytes\", Configurations.get(\"refine.memory\", \"<default>\"),\n+                Runtime.getRuntime().maxMemory() / 1024 / 1024.0);\n"]}, {"id": "0d68622b33b8a19b25a482fa7623a71c3aa57c1b", "message": "Add equals(), hashCode() and toString() for Cell and subcomponents (#6388)\n\nTo ease testing and debugging.", "patch": ["@@ -42,0 +43 @@ import java.time.ZoneOffset;\n+import java.util.Objects;", "@@ -195,0 +197,5 @@ public class Cell implements HasFields {\n+        // TODO this is kept like this for now, but it should rather be a string which makes the difference\n+        // between the cell and the value clear (i.e. not be the same string representation as the value)\n+        // and include a representation of the recon field too.\n+        // (toString() should not be exposed to the end user and is only meant to be used for logging/debugging\n+        // purposes)", "@@ -197,0 +204,18 @@ public class Cell implements HasFields {\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(recon, value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Cell other = (Cell) obj;\n+        return Objects.equals(recon, other.recon) && Objects.equals(value, other.value);\n+    }\n+", "@@ -36,0 +37 @@ import java.util.ArrayList;\n+import java.util.Arrays;", "@@ -40,0 +42 @@ import java.util.Map;\n+import java.util.Objects;", "@@ -423,0 +426,38 @@ public class Recon implements HasFields {\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + Arrays.deepHashCode(features);\n+        result = prime * result + Objects.hash(candidates, error, id, identifierSpace, judgment, judgmentAction,\n+                judgmentBatchSize, judgmentHistoryEntry, match, matchRank, schemaSpace, service);\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Recon other = (Recon) obj;\n+        return Objects.equals(candidates, other.candidates) && Objects.equals(error, other.error)\n+                && Arrays.deepEquals(features, other.features) && id == other.id\n+                && Objects.equals(identifierSpace, other.identifierSpace) && judgment == other.judgment\n+                && Objects.equals(judgmentAction, other.judgmentAction) && judgmentBatchSize == other.judgmentBatchSize\n+                && judgmentHistoryEntry == other.judgmentHistoryEntry && Objects.equals(match, other.match)\n+                && matchRank == other.matchRank && Objects.equals(schemaSpace, other.schemaSpace)\n+                && Objects.equals(service, other.service);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Recon [id=\" + id + \", service=\" + service + \", identifierSpace=\" + identifierSpace + \", schemaSpace=\"\n+                + schemaSpace + \", features=\" + Arrays.toString(features) + \", candidates=\" + candidates + \", judgment=\"\n+                + judgment + \", judgmentAction=\" + judgmentAction + \", judgmentHistoryEntry=\" + judgmentHistoryEntry\n+                + \", judgmentBatchSize=\" + judgmentBatchSize + \", match=\" + match + \", error=\" + error + \", matchRank=\"\n+                + matchRank + \"]\";\n+    }\n+", "@@ -36,0 +37 @@ import java.util.ArrayList;\n+import java.util.Arrays;", "@@ -37,0 +39 @@ import java.util.List;\n+import java.util.Objects;", "@@ -142,0 +145,29 @@ public class ReconCandidate implements HasFields {\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + Arrays.hashCode(types);\n+        result = prime * result + Objects.hash(id, name, score);\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        ReconCandidate other = (ReconCandidate) obj;\n+        return Objects.equals(id, other.id) && Objects.equals(name, other.name)\n+                && Double.doubleToLongBits(score) == Double.doubleToLongBits(other.score)\n+                && Arrays.equals(types, other.types);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ReconCandidate [id=\" + id + \", name=\" + name + \", types=\" + Arrays.toString(types) + \", score=\" + score\n+                + \"]\";\n+    }", "@@ -32,0 +33 @@ import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;", "@@ -173,0 +175,12 @@ public class CellTests {\n+\n+    @Test\n+    public void testEqualsAndHashCode() {\n+        Recon recon = mock(Recon.class);\n+        Cell c1 = new Cell(\"foo\", recon);\n+        assertEquals(c1, new Cell(\"foo\", recon));\n+        assertNotEquals(c1, new Cell(\"foo\", null));\n+        assertNotEquals(c1, new Cell(89, recon));\n+        assertNotEquals(c1, new Cell(34L, null));\n+        assertNotEquals(c1, \"foo\");\n+        assertEquals(c1.hashCode(), new Cell(\"foo\", recon).hashCode());\n+    }", "@@ -29,0 +30,3 @@ package com.google.refine.model;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+", "@@ -35,0 +39,9 @@ public class ReconCandidateTests {\n+    String jsonInt = \"{\\\"id\\\":\\\"Q49213\\\",\"\n+            + \"\\\"name\\\":\\\"University of Texas at Austin\\\",\"\n+            + \"\\\"score\\\":100,\"\n+            + \"\\\"types\\\":[\\\"Q875538\\\",\\\"Q15936437\\\",\\\"Q20971972\\\",\\\"Q23002039\\\"]}\";\n+    String jsonDouble = \"{\\\"id\\\":\\\"Q49213\\\",\"\n+            + \"\\\"name\\\":\\\"University of Texas at Austin\\\",\"\n+            + \"\\\"score\\\":0.5,\"\n+            + \"\\\"types\\\":[\\\"Q875538\\\",\\\"Q15936437\\\",\\\"Q20971972\\\",\\\"Q23002039\\\"]}\";\n+", "@@ -38,6 +50,2 @@ public class ReconCandidateTests {\n-        String json = \"{\\\"id\\\":\\\"Q49213\\\",\"\n-                + \"\\\"name\\\":\\\"University of Texas at Austin\\\",\"\n-                + \"\\\"score\\\":100,\"\n-                + \"\\\"types\\\":[\\\"Q875538\\\",\\\"Q15936437\\\",\\\"Q20971972\\\",\\\"Q23002039\\\"]}\";\n-        ReconCandidate rc = ReconCandidate.loadStreaming(json);\n-        TestUtils.isSerializedTo(rc, json);\n+        ReconCandidate rc = ReconCandidate.loadStreaming(jsonInt);\n+        TestUtils.isSerializedTo(rc, jsonInt);", "@@ -48,6 +56,11 @@ public class ReconCandidateTests {\n-        String json = \"{\\\"id\\\":\\\"Q49213\\\",\"\n-                + \"\\\"name\\\":\\\"University of Texas at Austin\\\",\"\n-                + \"\\\"score\\\":0.5,\"\n-                + \"\\\"types\\\":[\\\"Q875538\\\",\\\"Q15936437\\\",\\\"Q20971972\\\",\\\"Q23002039\\\"]}\";\n-        ReconCandidate rc = ReconCandidate.loadStreaming(json);\n-        TestUtils.isSerializedTo(rc, json);\n+        ReconCandidate rc = ReconCandidate.loadStreaming(jsonDouble);\n+        TestUtils.isSerializedTo(rc, jsonDouble);\n+    }\n+\n+    @Test\n+    public void testEqualsAndHashCode() throws Exception {\n+        ReconCandidate rc1 = ReconCandidate.loadStreaming(jsonInt);\n+        assertEquals(rc1, ReconCandidate.loadStreaming(jsonInt));\n+        assertNotEquals(rc1, ReconCandidate.loadStreaming(jsonDouble));\n+        assertNotEquals(rc1, \"string\");\n+        assertEquals(rc1.hashCode(), ReconCandidate.loadStreaming(jsonInt).hashCode());", "@@ -29,0 +30,3 @@ package com.google.refine.model;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+", "@@ -63,0 +67,12 @@ public class ReconTests {\n+    String jsonNoMatch = \"{\\\"id\\\":1533651559492945033,\"\n+            + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"\n+            + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"\n+            + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"\n+            + \"\\\"j\\\":\\\"none\\\",\"\n+            + \"\\\"c\\\":[\"\n+            + \"   {\\\"id\\\":\\\"Q2892284\\\",\\\"name\\\":\\\"Baylor College of Medicine\\\",\\\"score\\\":98.57142857142858,\\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]},\"\n+            + \"   {\\\"id\\\":\\\"Q16165943\\\",\\\"name\\\":\\\"Baylor College of Medicine Academy at Ryan\\\",\\\"score\\\":82.14285714285715,\\\"types\\\":[\\\"Q149566\\\"]},\"\n+            + \"   {\\\"id\\\":\\\"Q30284245\\\",\\\"name\\\":\\\"Baylor College of Medicine Children\\\\u2019s Foundation\\\",\\\"score\\\":48.57142857142858,\\\"types\\\":[\\\"Q163740\\\"]}\"\n+            + \"]\"\n+            + \"}\";\n+", "@@ -89,11 +103,0 @@ public class ReconTests {\n-        String json = \"{\\\"id\\\":1533651559492945033,\"\n-                + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"\n-                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"\n-                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"\n-                + \"\\\"j\\\":\\\"none\\\",\"\n-                + \"\\\"c\\\":[\"\n-                + \"   {\\\"id\\\":\\\"Q2892284\\\",\\\"name\\\":\\\"Baylor College of Medicine\\\",\\\"score\\\":98.57142857142858,\\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]},\"\n-                + \"   {\\\"id\\\":\\\"Q16165943\\\",\\\"name\\\":\\\"Baylor College of Medicine Academy at Ryan\\\",\\\"score\\\":82.14285714285715,\\\"types\\\":[\\\"Q149566\\\"]},\"\n-                + \"   {\\\"id\\\":\\\"Q30284245\\\",\\\"name\\\":\\\"Baylor College of Medicine Children\\\\u2019s Foundation\\\",\\\"score\\\":48.57142857142858,\\\"types\\\":[\\\"Q163740\\\"]}\"\n-                + \"]\"\n-                + \"}\";", "@@ -103 +107 @@ public class ReconTests {\n-        TestUtils.isSerializedTo(r, json);\n+        TestUtils.isSerializedTo(r, jsonNoMatch);", "@@ -138,0 +143,8 @@ public class ReconTests {\n+    @Test\n+    public void testEqualsAndHashCode() throws Exception {\n+        Recon recon1 = Recon.loadStreaming(fullJson);\n+        assertEquals(recon1, Recon.loadStreaming(fullJson));\n+        assertNotEquals(recon1, Recon.loadStreaming(jsonNoMatch));\n+        assertNotEquals(recon1, \"string\");\n+        assertEquals(recon1.hashCode(), Recon.loadStreaming(fullJson).hashCode());\n+    }\n"]}, {"id": "d7fbc44a866a952a2cf90f336e685e3728f5a03e", "message": "Switch generic test to use SQLite instead of MySQL (#6412)\n\n* Switch test to use SQLite instead of MySQL\r\n\r\n* Address review comments", "patch": ["@@ -29 +29 @@ import com.google.refine.RefineServlet;\n-import com.google.refine.extension.database.mysql.MySQLDatabaseService;\n+import com.google.refine.extension.database.sqlite.SQLiteDatabaseService;", "@@ -37 +36,0 @@ import com.google.refine.util.ParsingUtilities;\n-@Test(groups = { \"requiresMySQL\" })", "@@ -223 +222 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n-    @Parameters({ \"mySqlDbName\", \"mySqlDbHost\", \"mySqlDbPort\", \"mySqlDbUser\", \"mySqlDbPassword\", \"mySqlTestTable\" })\n+    @Parameters({ \"sqliteDbName\", \"sqliteTestTable\" })", "@@ -225,3 +224 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n-            @Optional(DEFAULT_MYSQL_DB_NAME) String mySqlDbName, @Optional(DEFAULT_MYSQL_HOST) String mySqlDbHost,\n-            @Optional(DEFAULT_MYSQL_PORT) String mySqlDbPort, @Optional(DEFAULT_MYSQL_USER) String mySqlDbUser,\n-            @Optional(DEFAULT_MYSQL_PASSWORD) String mySqlDbPassword, @Optional(DEFAULT_TEST_TABLE) String mySqlTestTable) {\n+            @Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName, @Optional(DEFAULT_TEST_TABLE) String sqliteTestTable) {", "@@ -230,0 +228,2 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        // Much of the below is ignored, but required by validation\n+        // in {@link DatabaseImportController#getQueryInfo}", "@@ -232,12 +231,8 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n-        testDbConfig.setDatabaseHost(mySqlDbHost);\n-        testDbConfig.setDatabaseName(mySqlDbName);\n-        testDbConfig.setDatabasePassword(mySqlDbPassword);\n-        testDbConfig.setDatabasePort(Integer.parseInt(mySqlDbPort));\n-        testDbConfig.setDatabaseType(MySQLDatabaseService.DB_NAME);\n-        testDbConfig.setDatabaseUser(mySqlDbUser);\n-        testDbConfig.setUseSSL(false);\n-        query = \"SELECT count(*) FROM \" + mySqlTestTable;\n-\n-        // testTable = mySqlTestTable;\n-\n-        DatabaseService.DBType.registerDatabase(MySQLDatabaseService.DB_NAME, MySQLDatabaseService.getInstance());\n+        testDbConfig.setDatabaseHost(\"\"); // This is ignored, but not allowed to be null\n+        testDbConfig.setDatabaseName(sqliteDbName);\n+        testDbConfig.setDatabasePassword(\"\"); // This is ignored, but not allowed to be null\n+        testDbConfig.setDatabaseType(SQLiteDatabaseService.DB_NAME);\n+        testDbConfig.setDatabaseUser(\"\"); // This is ignored, but not allowed to be null\n+        query = \"SELECT count(*) FROM \" + sqliteTestTable;\n+\n+        DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());\n"]}, {"id": "f4878804960162ba6145941bfbe0d14e60133d9b", "message": "Remove use of Properties for URL query parsing, fixes #6403 (#6407)\n\n", "patch": ["@@ -36 +36 @@ import java.util.List;\n-import java.util.Properties;\n+import java.util.Map;", "@@ -86 +86 @@ public class DatabaseImportController implements ImportingController {\n-        Properties parameters = ParsingUtilities.parseUrlParameters(request);\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(request);", "@@ -88 +88 @@ public class DatabaseImportController implements ImportingController {\n-        String subCommand = parameters.getProperty(\"subCommand\");\n+        String subCommand = parameters.get(\"subCommand\");", "@@ -134 +134,2 @@ public class DatabaseImportController implements ImportingController {\n-    private void doInitializeParserUI(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doInitializeParserUI(HttpServletRequest request, HttpServletResponse response,\n+            Map<String, String> parameters)", "@@ -167 +168 @@ public class DatabaseImportController implements ImportingController {\n-            HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+            HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -170 +171 @@ public class DatabaseImportController implements ImportingController {\n-            logger.debug(\"JobID::{}\", parameters.getProperty(\"jobID\"));\n+            logger.debug(\"JobID::{}\", parameters.get(\"jobID\"));", "@@ -173 +174 @@ public class DatabaseImportController implements ImportingController {\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -292 +293,2 @@ public class DatabaseImportController implements ImportingController {\n-    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doCreateProject(HttpServletRequest request, HttpServletResponse response,\n+            Map<String, String> parameters)", "@@ -295 +297 @@ public class DatabaseImportController implements ImportingController {\n-            logger.debug(\"DatabaseImportController::doCreateProject:::{}\", parameters.getProperty(\"jobID\"));\n+            logger.debug(\"DatabaseImportController::doCreateProject:::{}\", parameters.get(\"jobID\"));", "@@ -298 +300 @@ public class DatabaseImportController implements ImportingController {\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -9,0 +10,2 @@ import java.io.StringWriter;\n+import java.util.HashMap;\n+import java.util.Map;", "@@ -142,0 +145,4 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        Map<String, String[]> parameters = new HashMap<>();\n+        parameters.put(\"controller\", new String[] { \"database/database-import-controller\" });\n+        parameters.put(\"subCommand\", new String[] { \"initialize-parser-ui\" });\n+", "@@ -145,0 +152 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        when(request.getParameterMap()).thenReturn(parameters);", "@@ -164,0 +172,5 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        Map<String, String[]> parameters = new HashMap<>();\n+        parameters.put(\"controller\", new String[] { \"database/database-import-controller\" });\n+        parameters.put(\"jobID\", new String[] { String.valueOf(jobId) });\n+        parameters.put(\"subCommand\", new String[] { \"parse-preview\" });\n+", "@@ -177,0 +190 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        when(request.getParameterMap()).thenReturn(parameters);", "@@ -196,0 +210,5 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        Map<String, String[]> parameters = new HashMap<>();\n+        parameters.put(\"controller\", new String[] { \"database/database-import-controller\" });\n+        parameters.put(\"jobID\", new String[] { String.valueOf(jobId) });\n+        parameters.put(\"subCommand\", new String[] { \"create-project\" });\n+", "@@ -209,0 +228 @@ public class DatabaseImportControllerTest extends DBExtensionTests {\n+        when(request.getParameterMap()).thenReturn(parameters);", "@@ -41 +41 @@ import java.util.List;\n-import java.util.Properties;\n+import java.util.Map;", "@@ -94,2 +94,2 @@ public class GDataImportingController implements ImportingController {\n-        Properties parameters = ParsingUtilities.parseUrlParameters(request);\n-        String subCommand = parameters.getProperty(\"subCommand\");\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(request);\n+        String subCommand = parameters.get(\"subCommand\");", "@@ -109 +109 @@ public class GDataImportingController implements ImportingController {\n-    private void doListDocuments(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doListDocuments(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -174 +174 @@ public class GDataImportingController implements ImportingController {\n-            HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+            HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -177,2 +177,2 @@ public class GDataImportingController implements ImportingController {\n-        String type = parameters.getProperty(\"docType\");\n-        String urlString = parameters.getProperty(\"docUrl\");\n+        String type = parameters.get(\"docType\");\n+        String urlString = parameters.get(\"docUrl\");", "@@ -230 +230 @@ public class GDataImportingController implements ImportingController {\n-            HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+            HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -235 +235 @@ public class GDataImportingController implements ImportingController {\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -288 +288 @@ public class GDataImportingController implements ImportingController {\n-    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -293 +293 @@ public class GDataImportingController implements ImportingController {\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -249,2 +249,2 @@ public abstract class Command {\n-        Properties options = ParsingUtilities.parseUrlParameters(request);\n-        String token = options.getProperty(\"csrf_token\");\n+        Map<String, String> options = ParsingUtilities.parseParameters(request);\n+        String token = options.get(\"csrf_token\");", "@@ -37 +37 @@ import java.io.IOException;\n-import java.util.Properties;\n+import java.util.Map;", "@@ -98,2 +98,2 @@ public class ImportingControllerCommand extends Command {\n-        Properties options = ParsingUtilities.parseUrlParameters(request);\n-        String name = options.getProperty(\"controller\");\n+        Map<String, String> options = ParsingUtilities.parseParameters(request);\n+        String name = options.get(\"controller\");", "@@ -39 +39 @@ import java.util.List;\n-import java.util.Properties;\n+import java.util.Map;", "@@ -74 +74 @@ public class CreateProjectCommand extends Command {\n-            Properties parameters = ParsingUtilities.parseUrlParameters(request);\n+            Map<String, String> parameters = ParsingUtilities.parseParameters(request);", "@@ -80 +80 @@ public class CreateProjectCommand extends Command {\n-            String format = parameters.getProperty(\"format\");\n+            String format = parameters.get(\"format\");", "@@ -94 +94 @@ public class CreateProjectCommand extends Command {\n-                if (\"false\".equals(parameters.getProperty(\"split-into-columns\"))) {\n+                if (\"false\".equals(parameters.get(\"split-into-columns\"))) {", "@@ -96,2 +96,2 @@ public class CreateProjectCommand extends Command {\n-                } else if (\",\".equals(parameters.getProperty(\"separator\")) ||\n-                        \"\\\\t\".equals(parameters.getProperty(\"separator\"))) {\n+                } else if (\",\".equals(parameters.get(\"separator\")) ||\n+                        \"\\\\t\".equals(parameters.get(\"separator\"))) {", "@@ -113 +113 @@ public class CreateProjectCommand extends Command {\n-            String optionsString = parameters.getProperty(\"options\");\n+            String optionsString = parameters.get(\"options\");", "@@ -123 +123 @@ public class CreateProjectCommand extends Command {\n-            String projectName = parameters.getProperty(\"project-name\");\n+            String projectName = parameters.get(\"project-name\");", "@@ -140,2 +140,2 @@ public class CreateProjectCommand extends Command {\n-    static private void adjustLegacyOptions(String format, Properties parameters, ObjectNode optionObj) {\n-        if (\",\".equals(parameters.getProperty(\"separator\"))) {\n+    static private void adjustLegacyOptions(String format, Map<String, String> parameters, ObjectNode optionObj) {\n+        if (\",\".equals(parameters.get(\"separator\"))) {", "@@ -143 +143 @@ public class CreateProjectCommand extends Command {\n-        } else if (\"\\\\t\".equals(parameters.getProperty(\"separator\"))) {\n+        } else if (\"\\\\t\".equals(parameters.get(\"separator\"))) {", "@@ -157 +157 @@ public class CreateProjectCommand extends Command {\n-            String format, Properties parameters, ObjectNode optionObj, String legacyName, String newName) {\n+            String format, Map<String, String> parameters, ObjectNode optionObj, String legacyName, String newName) {", "@@ -159 +159 @@ public class CreateProjectCommand extends Command {\n-        String s = parameters.getProperty(legacyName);\n+        String s = parameters.get(legacyName);", "@@ -171 +171 @@ public class CreateProjectCommand extends Command {\n-            Properties parameters,\n+            Map<String, String> parameters,", "@@ -177 +177 @@ public class CreateProjectCommand extends Command {\n-        String s = parameters.getProperty(legacyName);\n+        String s = parameters.get(legacyName);", "@@ -40 +40 @@ import java.net.URLConnection;\n-import java.util.Properties;\n+import java.util.Map;", "@@ -73 +73 @@ public class ImportProjectCommand extends Command {\n-            Properties options = ParsingUtilities.parseUrlParameters(request);\n+            Map<String, String> options = ParsingUtilities.parseParameters(request);", "@@ -85 +85 @@ public class ImportProjectCommand extends Command {\n-                    String projectName = options.getProperty(\"project-name\");\n+                    String projectName = options.get(\"project-name\");", "@@ -104 +104 @@ public class ImportProjectCommand extends Command {\n-            Properties options,\n+            Map<String, String> options,", "@@ -42 +41,0 @@ import java.util.Map;\n-import java.util.Properties;", "@@ -83,2 +82,2 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        Properties parameters = ParsingUtilities.parseUrlParameters(request);\n-        String subCommand = parameters.getProperty(\"subCommand\");\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(request);\n+        String subCommand = parameters.get(\"subCommand\");", "@@ -100 +99 @@ public class DefaultImportingController extends Command implements ImportingCont\n-    private void doLoadRawData(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doLoadRawData(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -103 +102 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -123 +122 @@ public class DefaultImportingController extends Command implements ImportingCont\n-    private void doUpdateFileSelection(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doUpdateFileSelection(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -126 +125 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -150 +149 @@ public class DefaultImportingController extends Command implements ImportingCont\n-    private void doUpdateFormatAndOptions(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doUpdateFormatAndOptions(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -153 +152 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -190 +189 @@ public class DefaultImportingController extends Command implements ImportingCont\n-    private void doInitializeParserUI(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doInitializeParserUI(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -193 +192 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -219 +218 @@ public class DefaultImportingController extends Command implements ImportingCont\n-    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Properties parameters)\n+    private void doCreateProject(HttpServletRequest request, HttpServletResponse response, Map<String, String> parameters)", "@@ -222 +221 @@ public class DefaultImportingController extends Command implements ImportingCont\n-        long jobID = Long.parseLong(parameters.getProperty(\"jobID\"));\n+        long jobID = Long.parseLong(parameters.get(\"jobID\"));", "@@ -116,0 +117,6 @@ public class ImportingUtilities {\n+    /**\n+     * @deprecated Use\n+     *             {@link #loadDataAndPrepareJob(HttpServletRequest, HttpServletResponse, Map, ImportingJob, ObjectNode)}\n+     *             instead.\n+     */\n+    @Deprecated", "@@ -123,0 +130,16 @@ public class ImportingUtilities {\n+        Map<String, String> parametersMap = propsToMap(parameters);\n+        loadDataAndPrepareJob(request, response, parametersMap, job, config);\n+    }\n+\n+    private static Map<String, String> propsToMap(Properties properties) {\n+        return properties.entrySet().stream()\n+                .collect(Collectors.toMap(e -> (String) e.getKey(), e -> (String) e.getValue()));\n+    }\n+\n+    static public void loadDataAndPrepareJob(\n+            HttpServletRequest request,\n+            HttpServletResponse response,\n+            Map<String, String> parameters,\n+            final ImportingJob job,\n+            ObjectNode config) throws IOException, ServletException {\n+", "@@ -185,0 +208,5 @@ public class ImportingUtilities {\n+    /**\n+     * @deprecated Use {@link #retrieveContentFromPostRequest(HttpServletRequest, Map, File, ObjectNode, Progress)}\n+     *             instead.\n+     */\n+    @Deprecated", "@@ -191,0 +219,12 @@ public class ImportingUtilities {\n+\n+        Map<String, String> parametersMap = propsToMap(parameters);\n+        retrieveContentFromPostRequest(request, parametersMap, rawDataDir, retrievalRecord, progress);\n+    }\n+\n+    static public void retrieveContentFromPostRequest(\n+            HttpServletRequest request,\n+            Map<String, String> parameters,\n+            File rawDataDir,\n+            ObjectNode retrievalRecord,\n+            final Progress progress) throws IOException, FileUploadException {\n+", "@@ -48,0 +49 @@ import java.util.GregorianCalendar;\n+import java.util.Map;", "@@ -50,0 +52 @@ import java.util.TimeZone;\n+import java.util.stream.Collectors;", "@@ -105,0 +108,16 @@ public class ParsingUtilities {\n+    /**\n+     * Parses parameters from the given HttpServletRequest and returns them as a Map.\n+     *\n+     * @param request\n+     *            HttpServletRequest containing parameters.\n+     * @return Map containing parameter names and their first values.\n+     */\n+    public static Map<String, String> parseParameters(HttpServletRequest request) {\n+        return request.getParameterMap().entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue()[0]));\n+    }\n+\n+    /**\n+     * @deprecated Use {@link #parseParameters(HttpServletRequest request)} instead.\n+     */\n+    @Deprecated", "@@ -118,0 +137,4 @@ public class ParsingUtilities {\n+    /**\n+     * @deprecated Use {@link #parseParameters(HttpServletRequest request)} instead.\n+     */\n+    @Deprecated", "@@ -131,0 +154,4 @@ public class ParsingUtilities {\n+    /**\n+     * @deprecated Use {@link #parseParameters(HttpServletRequest request)} instead.\n+     */\n+    @Deprecated", "@@ -49,0 +50 @@ import java.util.List;\n+import java.util.Map;", "@@ -224 +225 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(req);", "@@ -275 +276 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(req);", "@@ -540 +541 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        Properties parameters = ParsingUtilities.parseUrlParameters(req);\n+        Map<String, String> parameters = ParsingUtilities.parseParameters(req);", "@@ -42,0 +43,2 @@ import java.time.format.DateTimeFormatter;\n+import java.util.HashMap;\n+import java.util.Map;", "@@ -45,0 +48,3 @@ import java.util.zip.GZIPOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.mockito.Mockito;", "@@ -142,0 +148,17 @@ public class ParsingUtilitiesTests extends RefineTest {\n+\n+    @Test\n+    public void testParseParameters() {\n+        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n+\n+        Mockito.when(request.getParameterMap()).thenReturn(\n+                Map.of(\"param1\", new String[] { \"value1\" },\n+                        \"param2\", new String[] { \"value2\", \"value3\" }));\n+\n+        Map<String, String> result = ParsingUtilities.parseParameters(request);\n+\n+        Map<String, String> expectedResult = new HashMap<>();\n+        expectedResult.put(\"param1\", \"value1\");\n+        expectedResult.put(\"param2\", \"value2\");\n+\n+        Assert.assertEquals(expectedResult, result);\n+    }\n"]}, {"id": "cfe9d377135a7b2063119ff261252ae9de0b14d1", "message": "Introduce test utility to compare project contents (#6383)\n\n* Introduce test utility to compare project contents\r\n\r\nCloses #6372.\r\n\r\n* Move constant to EPSILON\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>\r\n\r\n* Fix compilation error\r\n\r\n---------\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>", "patch": ["@@ -63 +63 @@ import com.google.refine.util.StringUtils;\n-public class Cell implements HasFields {\n+public class Cell implements HasFields, Serializable {", "@@ -64,0 +65 @@ public class Cell implements HasFields {\n+    private static final long serialVersionUID = 7456683757764146620L;", "@@ -49,0 +50 @@ import java.util.Properties;\n+import java.util.stream.Collectors;", "@@ -72,0 +74 @@ import com.google.refine.io.FileProjectManager;\n+import com.google.refine.messages.OpenRefineMessage;", "@@ -86,0 +89 @@ public class RefineTest {\n+    public static final double EPSILON = 0.0000001;", "@@ -451,0 +455,54 @@ public class RefineTest {\n+\n+    /**\n+     * Checks that the grid contents are equal in both projects. Differences in \"cell indices\" are not taken into\n+     * account as this is an internal detail: the goal is to assert equality of the user-facing parts of project data.\n+     * \n+     * @param actual\n+     *            the actual project state\n+     * @param expected\n+     *            the expected project state\n+     */\n+    public static void assertProjectEquals(Project actual, Project expected) {\n+        assertEquals(actual.columnModel.getColumnNames(), expected.columnModel.getColumnNames(), \"mismatching column names\");\n+        int columnCount = actual.columnModel.columns.size();\n+        // TODO also check that ReconConfig and ReconStats are identical?\n+        assertEquals(actual.rows.size(), expected.rows.size(), \"mismatching number of rows\");\n+\n+        List<Integer> actualCellIndices = actual.columnModel.columns.stream()\n+                .map(Column::getCellIndex)\n+                .collect(Collectors.toList());\n+        List<Integer> expectedCellIndices = expected.columnModel.columns.stream()\n+                .map(Column::getCellIndex)\n+                .collect(Collectors.toList());\n+        for (int i = 0; i != actual.rows.size(); i++) {\n+            Row actualRow = actual.rows.get(i);\n+            Row expectedRow = expected.rows.get(i);\n+            for (int j = 0; j != columnCount; j++) {\n+                Cell actualCell = actualRow.getCell(actualCellIndices.get(j));\n+                Cell expectedCell = expectedRow.getCell(expectedCellIndices.get(j));\n+\n+                // special case for floating-point numbers to accept rounding errors\n+                if (expectedCell != null && expectedCell.value instanceof Double && actualCell != null && actualCell.value != null) {\n+                    assertEquals(\n+                            (double) actualCell.value,\n+                            (double) expectedCell.value,\n+                            EPSILON,\n+                            String.format(\"mismatching cells in row %d, column '%s'\", i, actual.columnModel.columns.get(j)));\n+                } else {\n+                    assertEquals(\n+                            actualCell == null ? null : actualCell.value,\n+                            expectedCell == null ? null : expectedCell.value,\n+                            String.format(\"mismatching cells in row %d, column '%s'\", i, actual.columnModel.columns.get(j)));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility method to return a default column name, for the purpose of generating expected grid contents in a concise\n+     * way in tests.\n+     */\n+    public static String numberedColumn(int index) {\n+        return OpenRefineMessage.importer_utilities_column() + \" \" + index;\n+    }\n+", "@@ -38,2 +37,0 @@ import static org.mockito.Mockito.verify;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;", "@@ -46,0 +45 @@ import java.io.OutputStream;\n+import java.io.Serializable;", "@@ -49 +47,0 @@ import java.text.NumberFormat;\n-import java.time.Duration;", "@@ -51,0 +50 @@ import java.time.OffsetDateTime;\n+import java.time.ZoneId;", "@@ -52,0 +52 @@ import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;", "@@ -70,0 +71 @@ import org.testng.annotations.Test;\n+import com.google.refine.model.Project;", "@@ -75 +75,0 @@ public class ExcelImporterTests extends ImporterTest {\n-    private static final double EPSILON = 0.0000001;", "@@ -78 +77,0 @@ public class ExcelImporterTests extends ImporterTest {\n-    private static final int COLUMNS = 13;", "@@ -91,0 +91,3 @@ public class ExcelImporterTests extends ImporterTest {\n+    private static final OffsetDateTime EXPECTED_DATE_TIME = NOW.truncatedTo(ChronoUnit.MILLIS).atZone(ZoneId.systemDefault())\n+            .toOffsetDateTime();\n+    private static final String EXPECTED_DATE = NOW_STRING.substring(0, 10);", "@@ -145,31 +147,15 @@ public class ExcelImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), ROWS);\n-        Assert.assertEquals(project.rows.get(1).cells.size(), COLUMNS);\n-        Assert.assertEquals(((Number) project.rows.get(1).getCellValue(0)).doubleValue(), 1.1, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(2).getCellValue(0)).doubleValue(), 2.2, EPSILON);\n-\n-        Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n-        Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n-\n-        // Skip col 2 where old Calendar test was\n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\");\n-\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n-        Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n-\n-        assertEquals(project.rows.get(1).getCellValue(6), 1L);\n-        assertEquals(project.rows.get(2).getCellValue(6), 2L);\n-\n-        assertEquals(project.rows.get(1).getCellValue(7), 1L);\n-        assertEquals(project.rows.get(2).getCellValue(7), 2L);\n-\n-        assertEquals(project.rows.get(1).getCellValue(8), 1.0);\n-        assertEquals(project.rows.get(2).getCellValue(8), 2.0);\n-\n-        assertEquals(project.rows.get(1).getCellValue(9), \"0001\");\n-        assertEquals(project.rows.get(2).getCellValue(9), \"0002\");\n-\n-        assertEquals(project.rows.get(2).getCellValue(10), \"(617) 235-1322\");\n-\n-        assertEquals(project.rows.get(2).getCellValue(11), NOW_STRING.substring(0, 10));\n-\n-        assertEquals(project.rows.get(2).getCellValue(12), 1234.56);\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4), numberedColumn(5),\n+                        numberedColumn(6), numberedColumn(7), numberedColumn(8), numberedColumn(9), numberedColumn(10), numberedColumn(11),\n+                        numberedColumn(12), numberedColumn(13) },\n+                new Serializable[][] {\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -206,32 +192,15 @@ public class ExcelImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), ROWS);\n-        Assert.assertEquals(project.rows.get(1).cells.size(), COLUMNS);\n-        Assert.assertEquals(((Number) project.rows.get(1).getCellValue(0)).doubleValue(), 1.1, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(2).getCellValue(0)).doubleValue(), 2.2, EPSILON);\n-\n-        Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n-        Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n-\n-        // Skip col 2 where old Calendar test was\n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3))); // Date\n-        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n-\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n-        Assert.assertNull(project.rows.get(1).getCellValue(5));\n-\n-        assertEquals(project.rows.get(1).getCellValue(6), 1L);\n-        assertEquals(project.rows.get(2).getCellValue(6), 2L);\n-\n-        assertEquals(project.rows.get(1).getCellValue(7), 1L);\n-        assertEquals(project.rows.get(2).getCellValue(7), 2L);\n-\n-        assertEquals(project.rows.get(1).getCellValue(8), 1.0);\n-        assertEquals(project.rows.get(2).getCellValue(8), 2.0);\n-\n-        assertEquals(project.rows.get(1).getCellValue(9), \"0001\");\n-        assertEquals(project.rows.get(2).getCellValue(9), \"0002\");\n-\n-        assertEquals(project.rows.get(2).getCellValue(10), \"(617) 235-1322\");\n-\n-        assertEquals(project.rows.get(2).getCellValue(11), NOW_STRING.substring(0, 10)); // date only\n-\n-        assertEquals(project.rows.get(2).getCellValue(12), 1234.56);\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4), numberedColumn(5),\n+                        numberedColumn(6), numberedColumn(7), numberedColumn(8), numberedColumn(9), numberedColumn(10), numberedColumn(11),\n+                        numberedColumn(12), numberedColumn(13) },\n+                new Serializable[][] {\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56 },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -269,22 +237,0 @@ public class ExcelImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), ROWS);\n-        Assert.assertEquals(project.rows.get(1).cells.size(), COLUMNS);\n-\n-        final NumberFormat numberFormat = DecimalFormat.getInstance(Locale.getDefault());\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(0), numberFormat.format(1.1));\n-        Assert.assertEquals((String) project.rows.get(2).getCellValue(0), numberFormat.format(2.2));\n-\n-        assertEquals((String) project.rows.get(1).getCellValue(1), \"FALSE\");\n-        assertEquals((String) project.rows.get(2).getCellValue(1), \"TRUE\");\n-\n-        // Skip col 2 where old Calendar test was\n-        assertEquals((String) project.rows.get(1).getCellValue(3), NOW_STRING); // Date\n-\n-        assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n-        assertEquals((String) project.rows.get(1).getCellValue(5), \"\");\n-\n-        assertEquals((String) project.rows.get(1).getCellValue(6), \"1\");\n-        assertEquals((String) project.rows.get(2).getCellValue(6), \"2\");\n-\n-        assertEquals(project.rows.get(1).getCellValue(7), \"1\");\n-        assertEquals(project.rows.get(2).getCellValue(7), \"2\");\n-", "@@ -293,11 +240,20 @@ public class ExcelImporterTests extends ImporterTest {\n-        assertEquals(project.rows.get(1).getCellValue(8), decimalFormat.format(100.00) + \"%\");\n-        assertEquals(project.rows.get(2).getCellValue(8), decimalFormat.format(200.00) + \"%\");\n-\n-        assertEquals(project.rows.get(1).getCellValue(9), \"0001\");\n-        assertEquals(project.rows.get(2).getCellValue(9), \"0002\");\n-\n-        assertEquals(project.rows.get(ROWS - 1).getCellValue(10), \"(617) 235-1322\");\n-\n-        assertEquals(project.rows.get(ROWS - 1).getCellValue(11), NOW_STRING.substring(0, 10)); // date only\n-\n-        assertEquals(project.rows.get(ROWS - 1).getCellValue(12), \"$\" + numberFormat.format(1234.56));\n+        final NumberFormat numberFormat = DecimalFormat.getInstance(Locale.getDefault());\n+        String expectedCurrency = \"$\" + numberFormat.format(1234.56);\n+        // TODO this currently renders \",00\" in a French locale, which is a bug: it should be \"0,00\"\n+        String expectedBuggyCell = (String) project.rows.get(0).cells.get(8).value;\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4), numberedColumn(5),\n+                        numberedColumn(6), numberedColumn(7), numberedColumn(8), numberedColumn(9), numberedColumn(10), numberedColumn(11),\n+                        numberedColumn(12), numberedColumn(13) },\n+                new Serializable[][] {\n+                        { numberFormat.format(0.0), \"TRUE\", null, NOW_STRING, \" Row 0 Col 5\", \"\", \"0\", \"0\", expectedBuggyCell, \"0000\",\n+                                \"(617) 235-1322\", EXPECTED_DATE, expectedCurrency },\n+                        { numberFormat.format(1.1), \"FALSE\", null, NOW_STRING, \" Row 1 Col 5\", \"\", \"1\", \"1\",\n+                                decimalFormat.format(100.0) + \"%\", \"0001\", \"(617) 235-1322\", EXPECTED_DATE, expectedCurrency },\n+                        { numberFormat.format(2.2), \"TRUE\", null, NOW_STRING, \" Row 2 Col 5\", \"\", \"2\", \"2\",\n+                                decimalFormat.format(200.0) + \"%\", \"0002\", \"(617) 235-1322\", EXPECTED_DATE, expectedCurrency },\n+                        { numberFormat.format(3.3), \"FALSE\", null, NOW_STRING, \" Row 3 Col 5\", \"\", \"3\", \"3\",\n+                                decimalFormat.format(300.0) + \"%\", \"0003\", \"(617) 235-1322\", EXPECTED_DATE, expectedCurrency },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -342,6 +298,14 @@ public class ExcelImporterTests extends ImporterTest {\n-        // The original value reads 2021-04-18 in the Excel file.\n-        // We make sure it is not shifted by a day because of timezone handling\n-        assertEquals(project.rows.get(0).getCellValue(0), \"2021-04-18\");\n-        // Same, with 2021-01-01 (in winter / no DST)\n-        assertEquals(project.rows.get(1).getCellValue(0), \"2021-01-01\");\n-\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4) },\n+                new Serializable[][] {\n+                        // The original value reads 2021-04-18 in the Excel file.\n+                        // We make sure it is not shifted by a day because of timezone handling\n+                        { \"2021-04-18\", null, null, null },\n+                        // Same, with 2021-01-01 (in winter / no DST)\n+                        { \"2021-01-01\", null, null, null },\n+                        // TODO those null rows should probably not be created (and similarly for the null columns)?\n+                        { null, null, null, null },\n+                        { null, null, null, null },\n+                        { null, null, null, null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -376,19 +340,31 @@ public class ExcelImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), ROWS * SHEETS);\n-        Assert.assertEquals(project.rows.get(1).cells.size(), COLUMNS);\n-        Assert.assertEquals(project.columnModel.columns.size(), COLUMNS + SHEETS - 1);\n-\n-        Assert.assertEquals(((Number) project.rows.get(1).getCellValue(0)).doubleValue(), 1.1, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(2).getCellValue(0)).doubleValue(), 2.2, EPSILON);\n-        // Check the value read from the second sheet.\n-        Assert.assertEquals(((Number) project.rows.get(ROWS).getCellValue(0)).doubleValue(), 0.0, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(ROWS).getCellValue(COLUMNS)).doubleValue(), 1.0, EPSILON);\n-\n-        Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n-        Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n-\n-        // Skip col 2 where old Calendar test was\n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\"); // Date\n-        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n-\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n-        Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4), numberedColumn(5),\n+                        numberedColumn(6), numberedColumn(7), numberedColumn(8), numberedColumn(9), numberedColumn(10), numberedColumn(11),\n+                        numberedColumn(12), numberedColumn(13), numberedColumn(14), numberedColumn(15) },\n+                new Serializable[][] {\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -430,19 +406,31 @@ public class ExcelImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), ROWS * SHEETS);\n-        Assert.assertEquals(project.rows.get(1).cells.size(), COLUMNS);\n-        Assert.assertEquals(project.columnModel.columns.size(), COLUMNS + SHEETS - 1);\n-\n-        Assert.assertEquals(((Number) project.rows.get(1).getCellValue(0)).doubleValue(), 1.1, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(2).getCellValue(0)).doubleValue(), 2.2, EPSILON);\n-        // Check the value read from the second sheet.\n-        Assert.assertEquals(((Number) project.rows.get(ROWS).getCellValue(0)).doubleValue(), 0.0, EPSILON);\n-        Assert.assertEquals(((Number) project.rows.get(ROWS).getCellValue(COLUMNS)).doubleValue(), 1.0, EPSILON);\n-\n-        Assert.assertFalse((Boolean) project.rows.get(1).getCellValue(1));\n-        Assert.assertTrue((Boolean) project.rows.get(2).getCellValue(1));\n-\n-        // Skip col 2 where old Calendar test was\n-        assertTrue(ParsingUtilities.isDate(project.rows.get(1).getCellValue(3)), \"Cell value is not a date\"); // Date\n-        assertTrue(Duration.between(NOW, (OffsetDateTime) project.rows.get(1).getCellValue(3)).toMillis() < 1);\n-\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(4), \" Row 1 Col 5\");\n-        Assert.assertNull((String) project.rows.get(1).getCellValue(5));\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4), numberedColumn(5),\n+                        numberedColumn(6), numberedColumn(7), numberedColumn(8), numberedColumn(9), numberedColumn(10), numberedColumn(11),\n+                        numberedColumn(12), numberedColumn(13), numberedColumn(14), numberedColumn(15) },\n+                new Serializable[][] {\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, null, null },\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 1L, null },\n+                        { 0L, true, null, EXPECTED_DATE_TIME, \" Row 0 Col 5\", null, 0L, 0L, 0.0, \"0000\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 1.1, false, null, EXPECTED_DATE_TIME, \" Row 1 Col 5\", null, 1L, 1L, 1.0, \"0001\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 2.2, true, null, EXPECTED_DATE_TIME, \" Row 2 Col 5\", null, 2L, 2L, 2.0, \"0002\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                        { 3.3, false, null, EXPECTED_DATE_TIME, \" Row 3 Col 5\", null, 3L, 3L, 3.0, \"0003\", \"(617) 235-1322\", EXPECTED_DATE,\n+                                1234.56, 2L, 3L },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -29,0 +30 @@ package com.google.refine.importers;\n+import java.io.Serializable;", "@@ -39,0 +41 @@ import org.testng.annotations.Test;\n+import com.google.refine.model.Project;", "@@ -100,9 +102,8 @@ public class FixedWidthImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), 3); // Column names count as a row?\n-        Assert.assertEquals(project.rows.get(1).cells.size(), 3);\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(0), \"NDB_No\");\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(1), \"Shrt_Desc\");\n-        Assert.assertEquals((String) project.rows.get(1).getCellValue(2), \"Water\");\n-        Assert.assertEquals(project.rows.get(2).cells.size(), 3);\n-        Assert.assertEquals((String) project.rows.get(2).getCellValue(0), \"TooSho\");\n-        Assert.assertEquals((String) project.rows.get(2).getCellValue(1), \"rt\");\n-        Assert.assertNull(project.rows.get(2).getCellValue(2));\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"Col 1\", \"Col 2\", \"Col 3\" }, // TODO those should be column names instead\n+                        { \"NDB_No\", \"Shrt_Desc\", \"Water\" },\n+                        { \"TooSho\", \"rt\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -39,0 +40 @@ import java.io.InputStream;\n+import java.io.Serializable;", "@@ -61,0 +63 @@ import com.google.refine.importing.ImportingJob;\n+import com.google.refine.model.Project;", "@@ -159,6 +161,7 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 4, 1);\n-        Row row = project.rows.get(0);\n-        Assert.assertNotNull(row);\n-        Assert.assertNotNull(row.getCell(1));\n-        Assert.assertEquals(row.getCell(0).value, \"University of Cambridge\");\n-        Assert.assertEquals(row.getCell(1).value, \"Amy Zhang\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - school\", \"_ - name\", \"_ - student-faculty-score\", \"_ - intl-student-score\" },\n+                new Serializable[][] {\n+                        { \"University of Cambridge\", \"Amy Zhang\", \"100\", \"95\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -178,6 +181,7 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 4, 1);\n-        Row row = project.rows.get(0);\n-        Assert.assertNotNull(row);\n-        Assert.assertNotNull(row.getCell(1));\n-        Assert.assertEquals(row.getCell(0).value, \"  University of Cambridge  \");\n-        Assert.assertEquals(row.getCell(1).value, \"          Amy Zhang                   \");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - school\", \"_ - name\", \"_ - student-faculty-score\", \"_ - intl-student-score\" },\n+                new Serializable[][] {\n+                        { \"  University of Cambridge  \", \"          Amy Zhang                   \", \"100\", \"95\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -189 +192,0 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 4, 12);", "@@ -191,6 +194,17 @@ public class JsonImporterTests extends ImporterTest {\n-        Row row = project.rows.get(0);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 4);\n-        Assert.assertNotNull(row.getCell(1));\n-        Assert.assertEquals(row.getCell(1).value, \"Author 1, The\");\n-        Assert.assertEquals(project.rows.get(1).getCell(1).value, \"Author 1, Another\");\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - title\", \"_ - publish_date\", \"_ - authors - _ - name\" },\n+                new Serializable[][] {\n+                        { 1L, \"Book title 1\", \"2010-05-26\", \"Author 1, The\" },\n+                        { null, null, null, \"Author 1, Another\" },\n+                        { 2L, \"Book title 2\", \"2010-05-26\", \"Author 2, The\" },\n+                        { null, null, null, \"Author 2, Another\" },\n+                        { 3L, \"Book title 3\", \"2010-05-26\", \"Author 3, The\" },\n+                        { null, null, null, \"Author 3, Another\" },\n+                        { 4L, \"Book title 4\", \"2010-05-26\", \"Author 4, The\" },\n+                        { null, null, null, \"Author 4, Another\" },\n+                        { 5L, \"Book title 5\", \"2010-05-26\", \"Author 5, The\" },\n+                        { null, null, null, \"Author 5, Another\" },\n+                        { 6L, \"Book title 6\", \"2010-05-26\", \"Author 6, The\" },\n+                        { null, null, null, \"Author 6, Another\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -204,5 +218,11 @@ public class JsonImporterTests extends ImporterTest {\n-        Row row = project.rows.get(3);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 4);\n-        Assert.assertNotNull(row.getCell(1));\n-        Assert.assertEquals(row.getCell(1).value, \"With line\\n break\");\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - author\", \"_ - title\", \"_ - publish_date\" },\n+                new Serializable[][] {\n+                        { 1L, \"Author 1, The\", \"Book title 1\", \"2010-05-26\" },\n+                        { 2L, \"Author 2, The\", \"Book title 2\", \"2010-05-26\" },\n+                        { 3L, \"Author 3, The\", \"Book title 3\", \"2010-05-26\" },\n+                        { 4L, \"With line\\n break\", \"Book title 4\", \"2010-05-26\" },\n+                        { 5L, \"Author 5, The\", \"Book title 5\", \"2010-05-26\" },\n+                        { 6L, \"Author 6, The\", \"Book title 6\", \"2010-05-26\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -216,9 +236,11 @@ public class JsonImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.getColumnByCellIndex(4).getName(), JsonImporter.ANONYMOUS + \" - genre\");\n-\n-        Row row0 = project.rows.get(0);\n-        Assert.assertNotNull(row0);\n-        Assert.assertEquals(row0.cells.size(), 4);\n-\n-        Row row5 = project.rows.get(5);\n-        Assert.assertNotNull(row5);\n-        Assert.assertEquals(row5.cells.size(), 5);\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - author\", \"_ - title\", \"_ - publish_date\", \"_ - genre\" },\n+                new Serializable[][] {\n+                        { 1L, \"Author 1, The\", \"Book title 1\", \"2010-05-26\", null },\n+                        { 2L, \"Author 2, The\", \"Book title 2\", \"2010-05-26\", null },\n+                        { 3L, \"Author 3, The\", \"Book title 3\", \"2010-05-26\", null },\n+                        { 4L, \"Author 4, The\", \"Book title 4\", \"2010-05-26\", null },\n+                        { 5L, \"Author 5, The\", \"Book title 5\", \"2010-05-26\", null },\n+                        { 6L, \"Author 6, The\", \"Book title 6\", \"2010-05-26\", \"New element not seen in other records\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -230 +251,0 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 5, 6);", "@@ -232,6 +253,11 @@ public class JsonImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columnGroups.size(), 1);\n-        Assert.assertEquals(project.columnModel.columnGroups.get(0).keyColumnIndex, 3);\n-        Assert.assertEquals(project.columnModel.columnGroups.get(0).startColumnIndex, 3);\n-        Assert.assertNull(project.columnModel.columnGroups.get(0).parentGroup);\n-        Assert.assertEquals(project.columnModel.columnGroups.get(0).subgroups.size(), 0);\n-        Assert.assertEquals(project.columnModel.columnGroups.get(0).columnSpan, 2);\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - title\", \"_ - publish_date\", \"_ - author - author-name\", \"_ - author - author-dob\" },\n+                new Serializable[][] {\n+                        { 1L, \"Book title 1\", \"2010-05-26\", \"Author 1, The\", \"1950-01-15\" },\n+                        { 2L, \"Book title 2\", \"2010-05-26\", \"Author 2, The\", \"1950-02-15\" },\n+                        { 3L, \"Book title 3\", \"2010-05-26\", \"Author 3, The\", \"1950-03-15\" },\n+                        { 4L, \"Book title 4\", \"2010-05-26\", \"Author 4, The\", \"1950-04-15\" },\n+                        { 5L, \"Book title 5\", \"2010-05-26\", \"Author 5, The\", \"1950-05-15\" },\n+                        { 6L, \"Book title 6\", \"2010-05-26\", \"Author 6, The\", \"1950-06-15\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -253 +279,22 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 3, 16);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - type\", \"_ - armed_force - id\" },\n+                new Serializable[][] {\n+                        { \"/en/afrika_korps\", \"/military/military_unit\", \"/en/wehrmacht\" },\n+                        { \"/en/sacred_band_of_thebes\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/en/british_16_air_assault_brigade\", \"/military/military_unit\", \"/en/british_army\" },\n+                        { \"/en/pathfinder_platoon\", \"/military/military_unit\", \"/en/british_army\" },\n+                        { \"/en/sacred_band\", \"/military/military_unit\", \"/m/0ch7qgz\" },\n+                        { \"/en/3rd_ship_flotilla\", \"/military/military_unit\", \"/en/polish_navy\" },\n+                        { \"/m/0c0kxn9\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c0kxq9\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c0kxqh\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c0kxqp\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c0kxqw\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c1wxl3\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0c1wxlp\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0ck96kz\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0cm3j23\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                        { \"/m/0cw8hb4\", \"/military/military_unit\", \"/m/0chtrwn\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -285 +332,11 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 9, 2);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - school\", \"_ - student-faculty-score\", \"_ - intl-student-score\", \"_ - intl-faculty-score\", \"_ - rank\",\n+                        \"_ - peer-review-score\", \"_ - emp-review-score\", \"_ - score\", \"_ - citations-score\" },\n+                new Serializable[][] {\n+                        { \"University of Cambridge\\n                            United Kingdom\", \"100\", \"95\", \"96\", \"#1\", \"100\", \"100\",\n+                                \"100.0\", \"93\" },\n+                        { \"Harvard University\\n                            United States\", \"97\", \"87\", \"71\", \"#2\", \"100\", \"100\", \"99.2\",\n+                                \"100\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -393,9 +449,0 @@ public class JsonImporterTests extends ImporterTest {\n-        assertProjectCreated(project, 2, 21, 4);\n-\n-        Assert.assertEquals(project.columnModel.getColumnByCellIndex(0).getName(), JsonImporter.ANONYMOUS + \" - id\");\n-        Assert.assertEquals(project.columnModel.getColumnByCellIndex(1).getName(), JsonImporter.ANONYMOUS + \" - cell - cell\");\n-\n-        Row row = project.rows.get(8);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, \"\"); // Make sure empty strings are preserved", "@@ -403,51 +451,26 @@ public class JsonImporterTests extends ImporterTest {\n-        // null, true, false 0,1,-2.1,0.23,-0.24,3.14e100\n-\n-        row = project.rows.get(12);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertNull(row.cells.get(1).value);\n-\n-        row = project.rows.get(13);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Boolean.TRUE);\n-\n-        row = project.rows.get(14);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Boolean.FALSE);\n-\n-        row = project.rows.get(15);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Long.valueOf(0));\n-\n-        row = project.rows.get(16);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Long.valueOf(1));\n-\n-        row = project.rows.get(17);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Double.parseDouble(\"-2.1\"));\n-\n-        row = project.rows.get(18);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Double.valueOf((double) 0.23));\n-\n-        row = project.rows.get(19);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertEquals(row.cells.get(1).value, Double.valueOf((double) -0.24));\n-\n-        row = project.rows.get(20);\n-        Assert.assertNotNull(row);\n-        Assert.assertEquals(row.cells.size(), 2);\n-        Assert.assertFalse(Double.isNaN((Double) row.cells.get(1).value));\n-        Assert.assertEquals(row.cells.get(1).value, Double.valueOf((double) 3.14e100));\n-\n-        // null, true, false 0,1,-2.1,0.23,-0.24,3.14e100\n-\n-        // TODO: check data types\n+        Project expectedProject = createProject(\n+                new String[] { \"_ - id\", \"_ - cell - cell\" },\n+                new Serializable[][] {\n+                        { 1L, \"39766\" },\n+                        { null, \"T1009\" },\n+                        { null, \"foo\" },\n+                        { null, \"DEU\" },\n+                        { null, \"19\" },\n+                        { null, \"01:49\" },\n+                        { 2L, \"39766\" },\n+                        { null, \"T1009\" },\n+                        { null, \"\" },\n+                        { null, \"DEU\" },\n+                        { null, \"19\" },\n+                        { null, \"01:49\" },\n+                        { null, null },\n+                        { null, true },\n+                        { null, false },\n+                        { null, 0L },\n+                        { null, 1L },\n+                        { null, -2.1 },\n+                        { null, 0.23 },\n+                        { null, -0.24 },\n+                        { null, 3.14E100 },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -464,0 +488 @@ public class JsonImporterTests extends ImporterTest {\n+        // we don't make specific assertions about project contents because the expected grid is rather big.", "@@ -499,2 +523,8 @@ public class JsonImporterTests extends ImporterTest {\n-        Assert.assertNotNull(project.columnModel.getColumnByName(\"File\"));\n-        Assert.assertEquals(project.rows.get(0).getCell(0).value, \"json-sample-format-1.json\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"File\", \"_ - library - _ - book1 - genre\", \"_ - library - _ - book1 - author - author-name\",\n+                        \"_ - library - _ - book1 - author - author-dob\" },\n+                new Serializable[][] {\n+                        { \"json-sample-format-1.json\", \"genre1\", \"author1\", \"date\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -30 +29,0 @@ package com.google.refine.importers;\n-import static org.testng.Assert.assertEquals;", "@@ -32,0 +32 @@ import static org.testng.Assert.fail;\n+import java.io.Serializable;", "@@ -41,0 +42,2 @@ import org.testng.annotations.Test;\n+import com.google.refine.model.Project;\n+", "@@ -78,5 +80,6 @@ public class LineBasedImporterTests extends ImporterTest {\n-        assertEquals(project.columnModel.columns.size(), 1);\n-        assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        assertEquals(project.rows.size(), 1);\n-        assertEquals(project.rows.get(0).cells.size(), 1);\n-        assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\" },\n+                new Serializable[][] {\n+                        { \"data1\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -96,5 +99,8 @@ public class LineBasedImporterTests extends ImporterTest {\n-        assertEquals(project.rows.size(), 3);\n-        assertEquals(project.rows.get(0).cells.size(), 1);\n-        assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        assertEquals(project.rows.get(1).cells.get(0).value, \"data2\");\n-        assertEquals(project.rows.get(2).cells.get(0).value, \"data3\\rdata4\");\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1) },\n+                new Serializable[][] {\n+                        { \"data1\" },\n+                        { \"data2\" },\n+                        { \"data3\\rdata4\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -114,6 +120,9 @@ public class LineBasedImporterTests extends ImporterTest {\n-        assertEquals(project.rows.size(), 4);\n-        assertEquals(project.rows.get(0).cells.size(), 1);\n-        assertEquals(project.rows.get(0).cells.get(0).value, \"dataa\");\n-        assertEquals(project.rows.get(1).cells.get(0).value, \"datab\");\n-        assertEquals(project.rows.get(2).cells.get(0).value, \"datac\");\n-        assertEquals(project.rows.get(3).cells.get(0).value, \"datad\");\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1) },\n+                new Serializable[][] {\n+                        { \"dataa\" },\n+                        { \"datab\" },\n+                        { \"datac\" },\n+                        { \"datad\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -35,2 +34,0 @@ package com.google.refine.importers;\n-import static org.testng.Assert.assertEquals;\n-", "@@ -41,0 +40 @@ import java.io.InputStream;\n+import java.io.Serializable;", "@@ -55 +54 @@ import com.google.refine.importing.ImportingUtilities;\n-import com.google.refine.model.Row;\n+import com.google.refine.model.Project;", "@@ -107,12 +106,38 @@ public class MarcImporterTests extends XmlImporterTests {\n-        assertEquals(project.rows.size(), 30);\n-        assertEquals(project.rows.get(1).cells.size(), 6);\n-\n-        Row r0 = project.rows.get(0);\n-        assertEquals(r0.getCellValue(1), \"001\");\n-        assertEquals(r0.getCellValue(3), \"010\");\n-        assertEquals(project.rows.get(1).getCellValue(1), \"003\");\n-        assertEquals(project.rows.get(1).getCellValue(2), \"DLC\");\n-        Row r2 = project.rows.get(2);\n-        assertEquals(r2.getCellValue(1), \"005\");\n-        assertEquals(r2.getCellValue(5), \"\u00a34.99\");\n-        assertEquals(project.rows.get(29).getCellValue(3), \"700\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"marc:record - marc:leader\", \"marc:record - marc:controlfield - tag\", \"marc:record - marc:controlfield\",\n+                        \"marc:record - marc:datafield - tag\", \"marc:record - marc:datafield - ind2\", \"marc:record - marc:datafield - ind1\",\n+                        \"marc:record - marc:datafield - marc:subfield - code\", \"marc:record - marc:datafield - marc:subfield\" },\n+                new Serializable[][] {\n+                        { \"00762cam a22002658a 4500\", \"001\", \"93032341\", \"010\", null, null, \"a\", \"93032341\" },\n+                        { null, \"003\", \"DLC\", \"020\", null, null, \"a\", \"0192814591 :\" },\n+                        { null, \"005\", \"20000302171755.0\", null, null, null, \"c\", \"\u00a34.99\" },\n+                        { null, \"008\", \"930830s1994    enk           000 0 eng\", \"040\", null, null, \"a\", \"DLC\" },\n+                        { null, null, null, null, null, null, \"c\", \"DLC\" },\n+                        { null, null, null, null, null, null, \"d\", \"DLC\" },\n+                        { null, null, null, \"050\", \"0\", \"0\", \"a\", \"PR2801.A2\" },\n+                        { null, null, null, null, null, null, \"b\", \"S66 1994\" },\n+                        { null, null, null, \"082\", \"0\", \"0\", \"a\", \"822.3/3\" },\n+                        { null, null, null, null, null, null, \"2\", \"20\" },\n+                        { null, null, null, \"100\", null, \"1\", \"a\", \"Shakespeare, William,\" },\n+                        { null, null, null, null, null, null, \"d\", \"1564-1616.\" },\n+                        { null, null, null, \"245\", \"0\", \"1\", \"a\", \"All's well that ends well /\" },\n+                        { null, null, null, null, null, null, \"c\", \"edited by Susan Snyder.\" },\n+                        { null, null, null, \"260\", null, null, \"a\", \"Oxford ;\" },\n+                        { null, null, null, null, null, null, \"a\", \"New York :\" },\n+                        { null, null, null, null, null, null, \"b\", \"Oxford University Press,\" },\n+                        { null, null, null, null, null, null, \"c\", \"1994.\" },\n+                        { null, null, null, \"263\", null, null, \"a\", \"9402\" },\n+                        { null, null, null, \"300\", null, null, \"a\", \"p. cm.\" },\n+                        { null, null, null, \"440\", \"4\", null, \"a\", \"The World's classics\" },\n+                        { null, null, null, \"651\", \"0\", null, \"a\", \"Florence (Italy)\" },\n+                        { null, null, null, null, null, null, \"x\", \"Drama.\" },\n+                        { null, null, null, \"650\", \"0\", null, \"a\", \"Runaway husbands\" },\n+                        { null, null, null, null, null, null, \"x\", \"Drama.\" },\n+                        { null, null, null, \"650\", \"0\", null, \"a\", \"Married women\" },\n+                        { null, null, null, null, null, null, \"x\", \"Drama.\" },\n+                        { null, null, null, \"655\", \"7\", null, \"a\", \"Comedies.\" },\n+                        { null, null, null, null, null, null, \"2\", \"gsafd\" },\n+                        { null, null, null, \"700\", null, \"1\", \"a\", \"Snyder, Susan.\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -39,3 +38,0 @@ import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertNull;\n-import static org.testng.Assert.assertTrue;", "@@ -45,0 +43,2 @@ import java.io.InputStream;\n+import java.io.Serializable;\n+import java.time.LocalDate;", "@@ -46,0 +46,2 @@ import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;", "@@ -57 +58 @@ import org.testng.annotations.Test;\n-import com.google.refine.model.Row;\n+import com.google.refine.model.Project;", "@@ -111,11 +112,17 @@ public class OdsImporterTests extends ImporterTest {\n-        assertEquals(project.rows.size(), ROWS);\n-        Row row = project.rows.get(0);\n-        assertEquals(row.cells.size(), COLUMNS);\n-        assertEquals((String) row.getCellValue(1), \"2 Days In New York\");\n-        assertEquals(((OffsetDateTime) row.getCellValue(3)).toString().substring(0, 10), \"2012-03-28\");\n-        assertEquals(((Number) row.getCellValue(5)).doubleValue(), 4.5, EPSILON);\n-\n-        assertFalse((Boolean) row.getCellValue(7));\n-        assertTrue((Boolean) project.rows.get(1).getCellValue(7));\n-\n-        assertNull((String) project.rows.get(2).getCellValue(2));\n+        // TODO dates should not be interpreted in a particular time zone like this\n+        DateTimeFormatter format = DateTimeFormatter.ISO_LOCAL_DATE;\n+        OffsetDateTime expectedDate = LocalDate.from(format.parse(\"2012-03-28\"))\n+                .atStartOfDay()\n+                .atZone(ZoneId.systemDefault())\n+                .toOffsetDateTime();\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Category\", \"Title\", \"Director\", \"Release Date\", \"Gross\", \"Rating\", \"Rank\", \"Good?\" },\n+                new Serializable[][] {\n+                        { \"Narrative Features\", \"2 Days In New York\", \"Julie Delpy\", expectedDate, 1.0E7, 4.5, 1.0, false },\n+                        { \"Narrative Features\", \"Booster\", null, null, null, null, null, true },\n+                        { \"Narrative Features\", \"Dark Horse\", null, null, null, null, null, null },\n+                        { \"Narrative Features\", \"Fairhaven\", null, null, null, null, null, null },\n+                        { null, null, null, null, null, null, null, null }, // TODO: should likely not be there?\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -38 +38 @@ import java.io.InputStream;\n-import java.io.StringReader;\n+import java.io.Serializable;", "@@ -39,0 +40 @@ import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;", "@@ -71 +72 @@ public class RdfTripleImporterTests extends ImporterTest {\n-    @Test(enabled = false)\n+    @Test", "@@ -74,7 +75 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        StringReader reader = new StringReader(sampleRdf);\n-\n-        try {\n-            parseOneFile(SUT, reader);\n-        } catch (Exception e) {\n-            Assert.fail();\n-        }\n+        InputStream input = new ByteArrayInputStream(sampleRdf.getBytes(StandardCharsets.UTF_8));", "@@ -82 +77 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        assertColumnNamesMatch(project, new String[] { \"subject\", \"http://rdf.mybase.com/ns/music.artist.album\" });\n+        parseOneFile(SUT, input);", "@@ -84,5 +79,6 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 2);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://rdf.mybase.com/ns/en.bob_dylan\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://rdf.mybase.com/ns/music.artist.album\" },\n+                new Serializable[][] {\n+                        { \"http://rdf.mybase.com/ns/en.bob_dylan\", \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -101,8 +97,8 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://rdf.mybase.com/ns/music.artist.album\",\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        // rows\n-        Assert.assertEquals(project.rows.size(), 3);\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://rdf.mybase.com/ns/music.artist.album\" },\n+                new Serializable[][] {\n+                        { \"http://rdf.mybase.com/ns/en.bob_dylan\", \"http://rdf.mybase.com/ns/en.bringing_it_all_back_home\" },\n+                        { null, \"http://rdf.mybase.com/ns/en.under_the_red_sky\" },\n+                        { null, \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -110,9 +105,0 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        // row0\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://rdf.mybase.com/ns/en.bob_dylan\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"http://rdf.mybase.com/ns/en.bringing_it_all_back_home\");\n-\n-        // row1\n-        Assert.assertEquals(project.rows.get(1).cells.size(), 2);\n-        Assert.assertNull(project.rows.get(1).cells.get(0));\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"http://rdf.mybase.com/ns/en.under_the_red_sky\");", "@@ -121,5 +107,0 @@ public class RdfTripleImporterTests extends ImporterTest {\n-\n-        // row2\n-        Assert.assertEquals(project.rows.get(2).cells.size(), 2);\n-        Assert.assertNull(project.rows.get(2).cells.get(0));\n-        Assert.assertEquals(project.rows.get(2).cells.get(1).value, \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\");", "@@ -140,20 +122,8 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://rdf.mybase.com/ns/music.artist.album\",\n-                \"http://rdf.mybase.com/ns/music.artist.genre\"\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        // rows\n-        Assert.assertEquals(project.rows.size(), 2);\n-\n-        // row0\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://rdf.mybase.com/ns/en.bob_dylan\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"http://rdf.mybase.com/ns/en.bringing_it_all_back_home\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"http://rdf.mybase.com/ns/en.folk_rock\");\n-\n-        // row1\n-        Assert.assertEquals(project.rows.get(1).cells.size(), 2);\n-        Assert.assertNull(project.rows.get(1).cells.get(0));\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://rdf.mybase.com/ns/music.artist.album\", \"http://rdf.mybase.com/ns/music.artist.genre\" },\n+                new Serializable[][] {\n+                        { \"http://rdf.mybase.com/ns/en.bob_dylan\", \"http://rdf.mybase.com/ns/en.bringing_it_all_back_home\",\n+                                \"http://rdf.mybase.com/ns/en.folk_rock\" },\n+                        { null, \"http://rdf.mybase.com/ns/en.blood_on_the_tracks\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -172,10 +142,6 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://rdf.mybase.com/ns/common.topic.alias\",\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://rdf.mybase.com/ns/en.bob_dylan\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"Robert Zimmerman@en\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://rdf.mybase.com/ns/common.topic.alias\" },\n+                new Serializable[][] {\n+                        { \"http://rdf.mybase.com/ns/en.bob_dylan\", \"Robert Zimmerman@en\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -239,14 +205,7 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://www.example.org/meeting_organization#attending\",\n-                \"http://www.example.org/personal_details#hasEmail\",\n-                \"http://www.example.org/personal_details#GivenName\",\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://www.example.org/people#fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"http://meetings.example.com/cal#m1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"mailto:fred@example.com\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"Fred\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://www.example.org/meeting_organization#attending\",\n+                        \"http://www.example.org/personal_details#hasEmail\", \"http://www.example.org/personal_details#GivenName\" },\n+                new Serializable[][] {\n+                        { \"http://www.example.org/people#fred\", \"http://meetings.example.com/cal#m1\", \"mailto:fred@example.com\", \"Fred\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -269,14 +228,7 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://www.example.org/meeting_organization#attending\",\n-                \"http://www.example.org/personal_details#hasEmail\",\n-                \"http://www.example.org/personal_details#GivenName\",\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://www.example.org/people#fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"http://meetings.example.com/cal#m1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"mailto:fred@example.com\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"Fred\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://www.example.org/meeting_organization#attending\",\n+                        \"http://www.example.org/personal_details#hasEmail\", \"http://www.example.org/personal_details#GivenName\" },\n+                new Serializable[][] {\n+                        { \"http://www.example.org/people#fred\", \"http://meetings.example.com/cal#m1\", \"mailto:fred@example.com\", \"Fred\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -297,18 +249,7 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://www.example.org/personal_details#GivenName\",\n-                \"http://www.example.org/personal_details#hasEmail\",\n-                \"http://www.example.org/meeting_organization#attending\"\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        String[][] gridValues = {\n-                { \"http://www.example.org/people#fred\", \"Fred\", \"mailto:fred@example.com\", \"http://meetings.example.com/cal#m1\" }\n-        };\n-\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://www.example.org/people#fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"Fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"mailto:fred@example.com\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"http://meetings.example.com/cal#m1\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://www.example.org/personal_details#GivenName\",\n+                        \"http://www.example.org/personal_details#hasEmail\", \"http://www.example.org/meeting_organization#attending\" },\n+                new Serializable[][] {\n+                        { \"http://www.example.org/people#fred\", \"Fred\", \"mailto:fred@example.com\", \"http://meetings.example.com/cal#m1\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -392,14 +333,7 @@ public class RdfTripleImporterTests extends ImporterTest {\n-        String[] columns = {\n-                \"subject\",\n-                \"http://www.example.org/personal_details#hasEmail\",\n-                \"http://www.example.org/personal_details#GivenName\",\n-                \"http://www.example.org/meeting_organization#attending\"\n-        };\n-        assertColumnNamesMatch(project, columns);\n-\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"http://www.example.org/people#fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"mailto:fred@example.com\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"Fred\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"http://meetings.example.com/cal#m1\");\n+        Project expectedProject = createProject(\n+                new String[] { \"subject\", \"http://www.example.org/personal_details#hasEmail\",\n+                        \"http://www.example.org/personal_details#GivenName\", \"http://www.example.org/meeting_organization#attending\" },\n+                new Serializable[][] {\n+                        { \"http://www.example.org/people#fred\", \"mailto:fred@example.com\", \"Fred\", \"http://meetings.example.com/cal#m1\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -40,0 +41 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -56 +57 @@ import org.testng.annotations.Test;\n-import com.google.refine.messages.OpenRefineMessage;\n+import com.google.refine.model.Project;", "@@ -99,4 +100,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -119,9 +122,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -143,10 +143,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertTrue(project.rows.get(0).cells.get(1).value instanceof Long);\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, Long.parseLong(\"234\"));\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", 234L, \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -167,9 +164,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), OpenRefineMessage.importer_utilities_column() + \" 1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), OpenRefineMessage.importer_utilities_column() + \" 2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), OpenRefineMessage.importer_utilities_column() + \" 3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -190,6 +185,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \" data1 \");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \" 3.4 \");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \" data3 \");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \" data1 \", \" 3.4 \", \" data3 \" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -210,6 +206,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \" data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, 12L);\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \" data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \" data1\", 12L, \" data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -230,6 +227,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"3.4\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"data1\", \"3.4\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -250,6 +248,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \" data1 \");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \" 3.4 \");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \" data3 \");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \" data1 \", \" 3.4 \", \" data3 \" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -270,6 +269,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, Double.parseDouble(\"3.4\"));\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"data1\", 3.4, \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -290,6 +290,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \" data1\");\n-        Assert.assertNull(project.rows.get(0).cells.get(1));\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \" data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \" data1\", null, \" data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -312,9 +313,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1 sub1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2 sub2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3 sub3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1 sub1\", \"col2 sub2\", \"col3 sub3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -337,15 +336,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 6);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.columnModel.columns.get(3).getName(), OpenRefineMessage.importer_utilities_column() + \" 4\");\n-        Assert.assertEquals(project.columnModel.columns.get(4).getName(), OpenRefineMessage.importer_utilities_column() + \" 5\");\n-        Assert.assertEquals(project.columnModel.columns.get(5).getName(), OpenRefineMessage.importer_utilities_column() + \" 6\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 6);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"data4\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(4).value, \"data5\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(5).value, \"data6\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\", numberedColumn(4), numberedColumn(5), numberedColumn(6) },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\", \"data4\", \"data5\", \"data6\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -367,8 +358,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"\\\"To Be\\\" is often followed by \\\"or not To Be\\\"\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"\\\"To Be\\\" is often followed by \\\"or not To Be\\\"\", \"data2\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -391,9 +381,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -416,9 +404,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -445,9 +431,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1 sub1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2 sub2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3 sub3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1 sub1\", \"col2 sub2\", \"col3 sub3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -479,13 +463,8 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1 sub1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2 sub2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3 sub3\");\n-        Assert.assertEquals(project.rows.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data-row1-cell1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data-row1-cell2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data-row1-cell3\");\n-        Assert.assertEquals(project.rows.get(1).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(1).cells.get(0).value, \"data-row2-cell1\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"data-row2-cell2\");\n-        Assert.assertNull(project.rows.get(1).cells.get(2));\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1 sub1\", \"col2 sub2\", \"col3 sub3\" },\n+                new Serializable[][] {\n+                        { \"data-row1-cell1\", \"data-row1-cell2\", \"data-row1-cell3\" },\n+                        { \"data-row2-cell1\", \"data-row2-cell2\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -505,6 +484,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 4);\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\\\"\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4) },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\\\"\", \"data3\", \"data4\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -526,8 +506,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"\\\"To\\n Be\\\" is often followed by \\\"or not To\\n Be\\\"\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"\\\"To\\n Be\\\" is often followed by \\\"or not To\\n Be\\\"\", \"data2\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -549,8 +528,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"A line with many \\n\\n\\n\\n\\n empty lines\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"A line with many \\n\\n\\n\\n\\n empty lines\", \"data2\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -573,9 +551,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -596,7 +571,7 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"col1\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"col2\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"col3\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"data2\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"data3\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"col1\", \"col2\", \"col3\" },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\", \"data3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -618,5 +593,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(0).value, \"NDB_No\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, \"Shrt_Desc\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(2).value, \"Water\");\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"NDB_No\", \"Shrt_Desc\", \"Water\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -638,6 +614,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(0).value, \"data1\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, \"data2\\\"\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(2).value, \"data3\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(3).value, \"data4\");\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4) },\n+                new Serializable[][] {\n+                        { \"data1\", \"data2\\\"\", \"data3\", \"data4\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -661,6 +637,6 @@ public class SeparatorBasedImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.rows.size(), 1);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 4);\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(0).value, \"da\\rta1\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(1).value, \"dat\\ta2\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(2).value, \"data3\");\n-        Assert.assertEquals((String) project.rows.get(0).cells.get(3).value, \"dat\\na4\");\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3), numberedColumn(4) },\n+                new Serializable[][] {\n+                        { \"da\\rta1\", \"dat\\ta2\", \"data3\", \"dat\\na4\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -35,0 +36 @@ package com.google.refine.importers;\n+import java.io.Serializable;", "@@ -48,0 +50 @@ import org.testng.annotations.Test;\n+import com.google.refine.model.Project;", "@@ -93,6 +95,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"a\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"b\\n2\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(2).value, \"f\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"a\", \"b\\n2\", \"c\" },\n+                        { \"d\", \"e\", \"f\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -122,5 +126,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"e\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(2).value, \"f\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"a\", \"b\\n2\", \"c\" },\n+                        { \"d\", \"e\", \"f\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -204,7 +211,12 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 7);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"Europ\u00e4isches Zentrum f\u00fcr die F\u00f6rderung der Berufsbildung\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"Cedefop\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"EUROFOUND\");\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"Offizieller Name\");\n-        Assert.assertEquals(project.columnModel.columns.get(6).getName(), \"Anmerkungen\");\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 7);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Offizieller Name\", \"Abk\u00fcrzung\", \"Website\", \"Standort\", \"Staat\", \"Gr\u00fcndung\", \"Anmerkungen\" },\n+                new Serializable[][] {\n+                        { \"Europ\u00e4isches Zentrum f\u00fcr die F\u00f6rderung der Berufsbildung\", \"Cedefop\", \"http://www.cedefop.europa.eu/\",\n+                                \"Thessaloniki\", \"{{Griechenland}}\", \"1975\", \"\" },\n+                        { \"Europ\u00e4ische Stiftung zur Verbesserung der Lebens- und Arbeitsbedingungen\", \"EUROFOUND\",\n+                                \"http://www.eurofound.europa.eu/\", \"Dublin\", \"{{Irland}}\", \"1975\", \"\" },\n+                        { \"Europ\u00e4ische Beobachtungsstelle f\u00fcr Drogen und Drogensucht\", \"EMCDDA\", \"http://www.emcdda.europa.eu/\", \"Lissabon\",\n+                                \"{{Portugal}}\", \"1993\", \"\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -237,4 +249,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 6);\n-        Assert.assertNull(project.rows.get(1).cells.get(2));\n-        Assert.assertNull(project.rows.get(1).cells.get(3));\n-        Assert.assertEquals(project.rows.get(1).cells.get(4).value, \"Butter\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Shopping List\", \"Column\", \"Column2\", \"Column3\", \"Column4\", \"Column5\" },\n+                new Serializable[][] {\n+                        { \"Bread & Butter\", \"Pie\", \"Buns\", \"Danish\", \"Croissant\", null },\n+                        { \"Cheese\", \"Ice cream\", null, null, \"Butter\", \"Yogurt\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -263,6 +279,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 5);\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"b\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"http://gnu.org\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(4).value, \"http://microsoft.com/\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(4).value, \"http://gnu.org\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(2).value, \"http://microsoft.com/\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"price\", \"fruit\", \"Column\", \"merchant\", \"Column2\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"http://gnu.org\", \"c\", \"http://microsoft.com/\" },\n+                        { \"d\", \"e\", \"http://microsoft.com/\", \"f\", \"http://gnu.org\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -291,6 +309,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 5);\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"b\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(2).value, \"http://gnu.org\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(4).value, \"http://microsoft.com/\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(4).value, \"http://gnu.org\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(2).value, \"http://microsoft.com/\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"price\", \"fruit\", \"Column\", \"merchant\", \"Column2\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"http://gnu.org\", \"c\", \"http://microsoft.com/\" },\n+                        { \"d\", \"e\", \"http://microsoft.com/\", \"f\", \"http://gnu.org\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -320,5 +340,8 @@ public class WikitextImporterTests extends ImporterTest {\n-        Assert.assertEquals(project.columnModel.columns.size(), 3);\n-        Assert.assertEquals(project.rows.size(), 2);\n-        Assert.assertEquals(project.rows.get(0).cells.size(), 3);\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"{{free to read}}\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"[[File:My logo.svg]]\");\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"{{free to read}}\", \"b\", \"c\" },\n+                        { \"d\", \"[[File:My logo.svg]]\", \"f\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -35 +34,0 @@ import java.util.Properties;\n-import org.testng.Assert;", "@@ -97,4 +96,9 @@ public class BlankDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(2).value);\n-        Assert.assertNull(project.rows.get(1).cells.get(2));\n-        Assert.assertEquals(\"c\", project.rows.get(2).cells.get(2).value);\n-        Assert.assertNull(project.rows.get(3).cells.get(2));\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", null },\n+                        { \"e\", \"f\", \"c\" },\n+                        { null, null, null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -111,4 +115,9 @@ public class BlankDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(2).value);\n-        Assert.assertNull(project.rows.get(1).cells.get(2));\n-        Assert.assertNull(project.rows.get(2).cells.get(2));\n-        Assert.assertNull(project.rows.get(3).cells.get(2));\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", null },\n+                        { \"e\", \"f\", null },\n+                        { null, null, null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -137,4 +146,9 @@ public class BlankDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(3).value);\n-        Assert.assertNull(project.rows.get(1).cells.get(3));\n-        Assert.assertEquals(\"c\", project.rows.get(2).cells.get(3).value);\n-        Assert.assertNull(project.rows.get(3).cells.get(3));\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", null },\n+                        { \"e\", \"f\", \"c\" },\n+                        { null, null, null },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -35 +34,0 @@ import java.util.Properties;\n-import org.testng.Assert;", "@@ -96,4 +95,9 @@ public class FillDownTests extends RefineTest {\n-        Assert.assertEquals(\"a\", project.rows.get(0).cells.get(0).value);\n-        Assert.assertEquals(\"a\", project.rows.get(1).cells.get(0).value);\n-        Assert.assertEquals(\"e\", project.rows.get(2).cells.get(0).value);\n-        Assert.assertEquals(\"e\", project.rows.get(3).cells.get(0).value);\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"a\", \"d\", null },\n+                        { \"e\", \"f\", null },\n+                        { \"e\", null, \"h\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -112,4 +116,9 @@ public class FillDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(2).value);\n-        Assert.assertEquals(\"c\", project.rows.get(1).cells.get(2).value);\n-        Assert.assertNull(project.rows.get(2).cells.get(2));\n-        Assert.assertEquals(\"h\", project.rows.get(3).cells.get(2).value);\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", \"c\" },\n+                        { \"e\", \"f\", null },\n+                        { null, null, \"h\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -128,4 +137,9 @@ public class FillDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(2).value);\n-        Assert.assertEquals(\"c\", project.rows.get(1).cells.get(2).value);\n-        Assert.assertEquals(\"c\", project.rows.get(2).cells.get(2).value);\n-        Assert.assertEquals(\"h\", project.rows.get(3).cells.get(2).value);\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", \"c\" },\n+                        { \"e\", \"f\", \"c\" },\n+                        { null, null, \"h\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -154,4 +168,9 @@ public class FillDownTests extends RefineTest {\n-        Assert.assertEquals(\"c\", project.rows.get(0).cells.get(3).value);\n-        Assert.assertEquals(\"c\", project.rows.get(1).cells.get(3).value);\n-        Assert.assertNull(project.rows.get(2).cells.get(3));\n-        Assert.assertEquals(\"h\", project.rows.get(3).cells.get(3).value);\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\", \"second\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { null, \"d\", \"c\" },\n+                        { \"e\", \"f\", null },\n+                        { null, null, \"h\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -40 +39,0 @@ import org.slf4j.LoggerFactory;\n-import org.testng.Assert;", "@@ -104,5 +103,6 @@ public class JoinMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one,two,three,four\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one,two,three,four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -120,5 +120,6 @@ public class JoinMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one,     ,two,     ,three,     ,four\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one,     ,two,     ,three,     ,four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -36,2 +35,0 @@ package com.google.refine.operations.cell;\n-import static org.mockito.Mockito.mock;\n-", "@@ -43 +40,0 @@ import java.util.Properties;\n-import com.fasterxml.jackson.databind.node.ObjectNode;", "@@ -45 +41,0 @@ import org.slf4j.LoggerFactory;\n-import org.testng.Assert;", "@@ -56 +51,0 @@ import com.google.refine.RefineTest;\n-import com.google.refine.importers.SeparatorBasedImporter;", "@@ -74 +68,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-    private ObjectNode options;", "@@ -76 +69,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-    private SeparatorBasedImporter importer;", "@@ -93 +85,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        options = mock(ObjectNode.class);", "@@ -95 +86,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-", "@@ -98 +88,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        importer = new SeparatorBasedImporter();", "@@ -108 +97,0 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        options = null;", "@@ -154,30 +143,8 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        // Expected output from the GUI.\n-        // ID,a,b,c,d\n-        // 1,1,3,,\n-        // 2,,4,5,\n-        // 3,2,5,,3\n-        Assert.assertEquals(project.columnModel.columns.size(), 5);\n-        Assert.assertEquals(project.columnModel.columns.get(0).getName(), \"ID\");\n-        Assert.assertEquals(project.columnModel.columns.get(1).getName(), \"a\");\n-        Assert.assertEquals(project.columnModel.columns.get(2).getName(), \"b\");\n-        Assert.assertEquals(project.columnModel.columns.get(3).getName(), \"c\");\n-        Assert.assertEquals(project.columnModel.columns.get(4).getName(), \"d\");\n-        Assert.assertEquals(project.rows.size(), 3);\n-\n-        // The actual row data structure has to leave the columns model untouched for redo/undo purpose.\n-        // So we have 2 empty columns(column 1,2) on the row level.\n-        // 1,1,3,,\n-        Assert.assertEquals(project.rows.get(0).cells.get(0).value, \"1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(3).value, \"1\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(4).value, \"3\");\n-\n-        // 2,,4,5,\n-        Assert.assertEquals(project.rows.get(1).cells.get(0).value, \"2\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(4).value, \"4\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(5).value, \"5\");\n-\n-        // 3,2,5,,3\n-        Assert.assertEquals(project.rows.get(2).cells.get(0).value, \"3\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(3).value, \"2\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(4).value, \"5\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(6).value, \"3\");\n+        Project expectedProject = createProject(\n+                new String[] { \"ID\", \"a\", \"b\", \"c\", \"d\" },\n+                new Serializable[][] {\n+                        { \"1\", \"1\", \"3\", null, null },\n+                        { \"2\", null, \"4\", \"5\", null },\n+                        { \"3\", \"2\", \"5\", null, \"3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -213,27 +180,8 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        int merchantCol = project.columnModel.getColumnByName(\"merchant\").getCellIndex();\n-        int fruitCol = project.columnModel.getColumnByName(\"fruit\").getCellIndex();\n-        int priceCol = project.columnModel.getColumnByName(\"price\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(merchantCol), \"Katie\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(merchantCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(merchantCol), \"John\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(fruitCol), \"apple\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(fruitCol), \"pear\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(fruitCol), \"banana\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(priceCol), \"1.2\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(priceCol), \"1.5\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(priceCol), \"3.1\");\n-    }\n-\n-    private void prepareOptions(\n-            String sep, int limit, int skip, int ignoreLines,\n-            int headerLines, boolean guessValueType, boolean ignoreQuotes) {\n-\n-        whenGetStringOption(\"separator\", options, sep);\n-        whenGetIntegerOption(\"limit\", options, limit);\n-        whenGetIntegerOption(\"skipDataLines\", options, skip);\n-        whenGetIntegerOption(\"ignoreLines\", options, ignoreLines);\n-        whenGetIntegerOption(\"headerLines\", options, headerLines);\n-        whenGetBooleanOption(\"guessCellValueTypes\", options, guessValueType);\n-        whenGetBooleanOption(\"processQuotes\", options, !ignoreQuotes);\n-        whenGetBooleanOption(\"storeBlankCellsAsNulls\", options, true);\n+        Project expectedProject = createProject(\n+                new String[] { \"merchant\", \"fruit\", \"price\" },\n+                new Serializable[][] {\n+                        { \"Katie\", \"apple\", \"1.2\" },\n+                        { null, \"pear\", \"1.5\" },\n+                        { \"John\", \"banana\", \"3.1\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -40 +39,0 @@ import org.slf4j.LoggerFactory;\n-import org.testng.Assert;", "@@ -111,8 +110,7 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol),\n-                \"two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -131,11 +129,14 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"two\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"three\");\n-        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"four\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two\" },\n+                        { null, \"three\" },\n+                        { null, \"four\" },\n+                        { null, \"fiveSix\" },\n+                        { null, \"Sev\u00e8\u00cbight\" },\n+                        { null, \"nin\u00e991011twelve\" },\n+                        { null, \"thirteen\" },\n+                        { null, \"14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -155,11 +156,9 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"two;\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"three \");\n-        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"four\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:\" },\n+                        { null, \"two;\" },\n+                        { null, \"three \" },\n+                        { null, \"four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -178,11 +177,9 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;five\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"Six \");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"Sev\u00e8\");\n-        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;five\" },\n+                        { null, \"Six \" },\n+                        { null, \"Sev\u00e8\" },\n+                        { null, \"\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -201,13 +198,10 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;fiveS\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"ix S\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"ev\u00e8\u00cb\");\n-        Assert.assertEquals(project.rows.get(3).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(3).getCellValue(valueCol), \"ight;nin\u00e991011twelve thirteen 14\u00c0\");\n-        Assert.assertEquals(project.rows.get(4).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(4).getCellValue(valueCol), \"ifteen\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveS\" },\n+                        { null, \"ix S\" },\n+                        { null, \"ev\u00e8\u00cb\" },\n+                        { null, \"ight;nin\u00e991011twelve thirteen 14\u00c0\" },\n+                        { null, \"ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -226,9 +220,8 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"twelve thirteen 14\");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"\u00c0ifteen\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011\" },\n+                        { null, \"twelve thirteen 14\" },\n+                        { null, \"\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -247,9 +240,8 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        int keyCol = project.columnModel.getColumnByName(\"Key\").getCellIndex();\n-        int valueCol = project.columnModel.getColumnByName(\"Value\").getCellIndex();\n-\n-        Assert.assertEquals(project.rows.get(0).getCellValue(keyCol), \"Record_1\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(valueCol), \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e9\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(1).getCellValue(valueCol), \"91011twelve thirteen \");\n-        Assert.assertEquals(project.rows.get(2).getCellValue(keyCol), null);\n-        Assert.assertEquals(project.rows.get(2).getCellValue(valueCol), \"14\u00c0ifteen\");\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e9\" },\n+                        { null, \"91011twelve thirteen \" },\n+                        { null, \"14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -7 +6,0 @@ import java.util.Properties;\n-import org.testng.Assert;", "@@ -51,5 +50,10 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-        Assert.assertEquals(\"num1:2\", project.rows.get(0).cells.get(0).value);\n-        Assert.assertEquals(\"num2:3\", project.rows.get(1).cells.get(0).value);\n-        Assert.assertEquals(\"num1:6\", project.rows.get(2).cells.get(0).value);\n-        Assert.assertEquals(\"num1:5\", project.rows.get(3).cells.get(0).value);\n-        Assert.assertEquals(\"num2:9\", project.rows.get(4).cells.get(0).value);\n+        Project expectedProject = createProject(\n+                new String[] { \"a\" },\n+                new Serializable[][] {\n+                        { \"num1:2\" },\n+                        { \"num2:3\" },\n+                        { \"num1:6\" },\n+                        { \"num1:5\" },\n+                        { \"num2:9\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -76 +75,0 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        int aCol = project.columnModel.getColumnByName(\"a\").getCellIndex();", "@@ -80,7 +78,0 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(0).getCellValue(aCol), \"1|2\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(bCol), \"d\");\n-        Assert.assertEquals(project.rows.get(0).getCellValue(cCol), \"e\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(aCol), \"3\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(bCol), \"f\");\n-        Assert.assertEquals(project.rows.get(1).getCellValue(cCol), \"g\");\n-", "@@ -91 +83,9 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(0).getCellValue(aCol), \"1|2\");\n+        Project expectedProject = createProject(\n+                new String[] { \"a\" },\n+                new Serializable[][] {\n+                        { \"1|2\" },\n+                        { \"3\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+\n+        // deleted cell indices are nulled out", "@@ -94 +93,0 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(1).getCellValue(aCol), \"3\");", "@@ -38,0 +39 @@ import java.io.IOException;\n+import java.io.Serializable;", "@@ -146,0 +148 @@ public class ExtendDataOperationTests extends RefineTest {\n+    Cell reconCell1, reconCell2, reconCell3, reconCell4;", "@@ -169 +171,2 @@ public class ExtendDataOperationTests extends RefineTest {\n-        row.setCell(0, reconciledCell(\"Iran\", \"Q794\"));\n+        reconCell1 = reconciledCell(\"Iran\", \"Q794\");\n+        row.setCell(0, reconCell1);", "@@ -172 +175,2 @@ public class ExtendDataOperationTests extends RefineTest {\n-        row.setCell(0, reconciledCell(\"Japan\", \"Q17\"));\n+        reconCell2 = reconciledCell(\"Japan\", \"Q17\");\n+        row.setCell(0, reconCell2);", "@@ -175 +179,2 @@ public class ExtendDataOperationTests extends RefineTest {\n-        row.setCell(0, reconciledCell(\"Tajikistan\", \"Q863\"));\n+        reconCell3 = reconciledCell(\"Tajikistan\", \"Q863\");\n+        row.setCell(0, reconCell3);", "@@ -178 +183,2 @@ public class ExtendDataOperationTests extends RefineTest {\n-        row.setCell(0, reconciledCell(\"United States of America\", \"Q30\"));\n+        reconCell4 = reconciledCell(\"United States of America\", \"Q30\");\n+        row.setCell(0, reconCell4);", "@@ -283,5 +289,9 @@ public class ExtendDataOperationTests extends RefineTest {\n-            // Inspect rows\n-            Assert.assertTrue(\"IR\".equals(project.rows.get(0).getCellValue(1)), \"Bad country code for Iran.\");\n-            Assert.assertTrue(\"JP\".equals(project.rows.get(1).getCellValue(1)), \"Bad country code for Japan.\");\n-            Assert.assertNull(project.rows.get(2).getCell(1), \"Expected a null country code.\");\n-            Assert.assertTrue(\"US\".equals(project.rows.get(3).getCellValue(1)), \"Bad country code for United States.\");\n+            Project expectedProject = createProject(\n+                    new String[] { \"country\", \"ISO 3166-1 alpha-2 code\" },\n+                    new Serializable[][] {\n+                            { reconCell1, \"IR\" },\n+                            { reconCell2, \"JP\" },\n+                            { reconCell3, null },\n+                            { reconCell4, \"US\" },\n+                    });\n+            assertProjectEquals(project, expectedProject);", "@@ -334,5 +344,9 @@ public class ExtendDataOperationTests extends RefineTest {\n-            // Test to be updated as countries change currencies!\n-            Assert.assertTrue(Math.round((double) project.rows.get(2).getCellValue(1)) == 2,\n-                    \"Incorrect number of currencies returned for Tajikistan.\");\n-            Assert.assertTrue(Math.round((double) project.rows.get(3).getCellValue(1)) == 1,\n-                    \"Incorrect number of currencies returned for United States.\");\n+            Project expectedProject = createProject(\n+                    new String[] { \"country\", \"currency\" },\n+                    new Serializable[][] {\n+                            { reconCell1, 1.0 },\n+                            { reconCell2, 1.0 },\n+                            { reconCell3, 2.0 },\n+                            { reconCell4, 1.0 },\n+                    });\n+            assertProjectEquals(project, expectedProject);", "@@ -89,6 +89,11 @@ public class RowReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"h\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(1).value, \"b\");\n-        Assert.assertEquals(project.rows.get(3).cells.get(1).value, \"F\");\n-        Assert.assertEquals(project.rows.get(4).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(5).cells.get(1).value, \"d\");\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\" },\n+                new Serializable[][] {\n+                        { \"1\", \"h\" },\n+                        { \"2\", \"f\" },\n+                        { \"8\", \"b\" },\n+                        { \"9\", \"F\" },\n+                        { \"10\", \"f\" },\n+                        { \"\", \"d\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -107,6 +112,11 @@ public class RowReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(5).cells.get(1).value, \"h\");\n-        Assert.assertEquals(project.rows.get(4).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(3).cells.get(1).value, \"b\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(1).value, \"F\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"d\"); // controlled by blankPosition, not reverse\n+        Project expectedProject = createProject(\n+                new String[] { \"key\", \"first\" },\n+                new Serializable[][] {\n+                        { \"\", \"d\" },\n+                        { \"10\", \"f\" },\n+                        { \"9\", \"F\" },\n+                        { \"8\", \"b\" },\n+                        { \"2\", \"f\" },\n+                        { \"1\", \"h\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n"]}, {"id": "c1a5dbbd8d6dced80f75a5bde3b5153eea853ea0", "message": "Introduce a test helper to run an operation on a project (#6389)\n\n* Introduce a test helper to run an operation on a project\r\n\r\n* Revert back to running in a separate thread\r\n\r\n* Update main/tests/server/src/com/google/refine/RefineTest.java\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>", "patch": ["@@ -74,0 +75 @@ import com.google.refine.messages.OpenRefineMessage;\n+import com.google.refine.model.AbstractOperation;", "@@ -436,0 +438,33 @@ public class RefineTest {\n+    /**\n+     * Runs an operation on a project, waiting until it completes and returning how long it took.\n+     * \n+     * @returns the duration of the operation in milliseconds\n+     */\n+    protected long runOperation(AbstractOperation operation, Project project) throws Exception {\n+        return runOperation(operation, project, -1);\n+    }\n+\n+    /**\n+     * Runs an operation on a project. If it's a long-running operation, its process is run in the main thread until\n+     * completion.\n+     * \n+     * @long timeout the maximum time (in milliseconds) this operation should take (only honored for long running\n+     *       operations). Ignored if negative.\n+     * @returns the duration of the operation in milliseconds\n+     */\n+    protected long runOperation(AbstractOperation operation, Project project, long timeout) throws Exception {\n+        long start = System.currentTimeMillis();\n+        Process process = operation.createProcess(project, new Properties());\n+        if (process.isImmediate()) {\n+            process.performImmediate();\n+        } else {\n+            runAndWait(project.getProcessManager(), process, (int) timeout);\n+        }\n+        long end = System.currentTimeMillis();\n+        return end - start;\n+    }\n+\n+    /**\n+     * @deprecated use {@link #runOperation(AbstractOperation, Project)}\n+     */\n+    @Deprecated", "@@ -442 +476 @@ public class RefineTest {\n-            while (process.isRunning() && time < timeout) {\n+            while (process.isRunning() && (time < timeout || timeout < 0)) {", "@@ -33 +32,0 @@ import java.util.List;\n-import java.util.Properties;", "@@ -48 +46,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -93,2 +91,2 @@ public class BlankDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -112,2 +110,2 @@ public class BlankDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -143,2 +141,2 @@ public class BlankDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -33 +32,0 @@ import java.util.List;\n-import java.util.Properties;", "@@ -48 +46,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -92,2 +90,2 @@ public class FillDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -113,2 +111,2 @@ public class FillDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -134,2 +132,2 @@ public class FillDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -165,2 +163,2 @@ public class FillDownTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -37 +36,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -49 +47,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -100,2 +98,2 @@ public class JoinMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -117,2 +115,2 @@ public class JoinMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -39 +38,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -59 +57,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -139,3 +137 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-\n-        process.performImmediate();\n+        runOperation(op, project);", "@@ -177,2 +173,2 @@ public class KeyValueColumnizeTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -37 +36,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -48 +46,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -107,2 +105,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -126,2 +124,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -153,2 +151,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -174,2 +172,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -195,2 +193,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -217,2 +215,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -237,2 +235,2 @@ public class SplitMultiValuedCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -5 +4,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -17 +15,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -47,2 +45,2 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -70 +69,0 @@ import com.google.refine.process.Process;\n-import com.google.refine.process.ProcessManager;", "@@ -115 +113,0 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-    private Properties options;", "@@ -123,6 +120,0 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-    private void runAndWait(EngineDependentOperation op, int timeout) throws Exception {\n-        ProcessManager pm = project.getProcessManager();\n-        Process process = op.createProcess(project, options);\n-        runAndWait(pm, process, timeout);\n-    }\n-", "@@ -165 +157 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-                    500,\n+                    5,", "@@ -169,4 +161 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            // We have 100 rows and 500 ms per row but only two distinct\n-            // values so we should not wait much more than ~1000 ms to get the\n-            // results.\n-            runAndWait(op, 1500);\n+            runOperation(op, project, 1500);", "@@ -216 +205 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            runAndWait(op, 3000);\n+            runOperation(op, project, 3000);", "@@ -257 +246 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            runAndWait(op, 3000);\n+            runOperation(op, project, 3000);", "@@ -300,3 +289 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            // 6 requests (4 retries @1 sec) + final response\n-            long start = System.currentTimeMillis();\n-            runAndWait(op, 4500);\n+            long elapsed = runOperation(op, project, 4500);", "@@ -305 +291,0 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            long elapsed = System.currentTimeMillis() - start;", "@@ -348,3 +334 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            // 6 requests (4 retries 200, 400, 800, 200 msec) + final response\n-            long start = System.currentTimeMillis();\n-            runAndWait(op, 2500);\n+            long elapsed = runOperation(op, project, 2500);", "@@ -353 +337 @@ public class ColumnAdditionByFetchingURLsOperationTests extends RefineTest {\n-            long elapsed = System.currentTimeMillis() - start;\n+            // 6 requests (4 retries 200, 400, 800, 200 msec) + final response", "@@ -32 +31,0 @@ import java.util.Arrays;\n-import java.util.Properties;", "@@ -43 +41,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -80,2 +78,2 @@ public class ColumnReorderOperationTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -77 +76,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.LongRunningProcessStub;", "@@ -286,2 +285,2 @@ public class ExtendDataOperationTests extends RefineTest {\n-            LongRunningProcessStub process = new LongRunningProcessStub(op.createProcess(project, options));\n-            process.run();\n+\n+            runOperation(op, project);", "@@ -341,2 +340 @@ public class ExtendDataOperationTests extends RefineTest {\n-            LongRunningProcessStub process = new LongRunningProcessStub(op.createProcess(project, options));\n-            process.run();\n+            runOperation(op, project);", "@@ -389,2 +387 @@ public class ExtendDataOperationTests extends RefineTest {\n-            LongRunningProcessStub process = new LongRunningProcessStub(op.createProcess(project, options));\n-            process.run();\n+            runOperation(op, project);", "@@ -436,2 +433 @@ public class ExtendDataOperationTests extends RefineTest {\n-            LongRunningProcessStub process = new LongRunningProcessStub(op.createProcess(project, options));\n-            process.run();\n+            runOperation(op, project);", "@@ -36 +35,0 @@ import java.util.Collections;\n-import java.util.Properties;", "@@ -52 +50,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -118,2 +116,2 @@ public class ReconJudgeSimilarCellsTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -34 +33,0 @@ import java.util.Collections;\n-import java.util.Properties;", "@@ -93 +92,2 @@ public class ReconMarkNewTopicsOperationTests extends RefineTest {\n-        op.createProcess(project, new Properties()).performImmediate();\n+\n+        runOperation(op, project);", "@@ -123 +123,2 @@ public class ReconMarkNewTopicsOperationTests extends RefineTest {\n-        op.createProcess(project, new Properties()).performImmediate();\n+\n+        runOperation(op, project);", "@@ -148,2 +148 @@ public class ReconOperationTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        runAndWait(project.getProcessManager(), process, 1000);\n+        runOperation(op, project, 1000);", "@@ -34 +33,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -78 +77,2 @@ public class ReconUseValuesAsIdsOperationTests extends RefineTest {\n-        op.createProcess(project, new Properties()).performImmediate();\n+\n+        runOperation(op, project);", "@@ -31 +30,0 @@ import java.io.Serializable;\n-import java.util.Properties;", "@@ -46 +44,0 @@ import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.process.Process;", "@@ -86,2 +84,2 @@ public class RowReorderOperationTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -109,2 +107,2 @@ public class RowReorderOperationTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);", "@@ -132,2 +130,2 @@ public class RowReorderOperationTests extends RefineTest {\n-        Process process = op.createProcess(project, new Properties());\n-        process.performImmediate();\n+\n+        runOperation(op, project);\n"]}, {"id": "ec7ebbce1c8d8e52a8815671ee1693e5a33b193b", "message": "Remove duplicate test runs in MarcImporterTests (#6431)\n\n", "patch": ["@@ -52,0 +53 @@ import org.testng.annotations.Test;\n+import com.google.refine.importers.tree.TreeImportingParserBase;", "@@ -58 +59 @@ import com.google.refine.util.ParsingUtilities;\n-public class MarcImporterTests extends XmlImporterTests {\n+public class MarcImporterTests extends ImporterTest {", "@@ -145,0 +147,5 @@ public class MarcImporterTests extends XmlImporterTests {\n+    @Override\n+    protected void parseOneFile(TreeImportingParserBase parser, InputStream inputStream, ObjectNode options) {\n+        parseOneInputStream(parser, inputStream, options);\n+    }\n+\n"]}, {"id": "a88c4db8613544152303065c5e1043bdad742b62", "message": "Ignore JSON comments by default (#6429)\n\n* Ignore JSON comments by default\r\n* Fixes #3243", "patch": ["@@ -46,0 +47 @@ import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.json.JsonReadFeature;", "@@ -93 +94,2 @@ public class JsonImporter extends TreeImportingParserBase {\n-                JsonFactory factory = new JsonFactory();\n+                JsonFactory factory = JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS)\n+                        .enable(JsonReadFeature.ALLOW_YAML_COMMENTS).build();", "@@ -208,0 +211,4 @@ public class JsonImporter extends TreeImportingParserBase {\n+        JSONTreeReader jsonTreeReader = new JSONTreeReader(is);\n+        jsonTreeReader.parser.enable(JsonParser.Feature.ALLOW_COMMENTS);\n+        jsonTreeReader.parser.enable(JsonParser.Feature.ALLOW_YAML_COMMENTS);\n+", "@@ -210 +216 @@ public class JsonImporter extends TreeImportingParserBase {\n-                new JSONTreeReader(is), rootColumnGroup, limit, options, exceptions);\n+                jsonTreeReader, rootColumnGroup, limit, options, exceptions);", "@@ -114,0 +115,11 @@ public class JsonImporterTests extends ImporterTest {\n+    @Test\n+    public void canParseSampleWithComments() {\n+        RunTest(getSampleWithComments());\n+        assertProjectCreated(project, 4, 6);\n+\n+        Row row = project.rows.get(0);\n+        Assert.assertNotNull(row);\n+        Assert.assertNotNull(row.getCell(1));\n+        Assert.assertEquals(row.getCell(1).value, \"Author 1, The\");\n+    }\n+", "@@ -566,0 +578,17 @@ public class JsonImporterTests extends ImporterTest {\n+    static String getSampleWithComments() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        for (int i = 1; i < 7; i++) {\n+            sb.append(getTypicalElement(i));\n+            if (i < 6) {\n+                sb.append(\",\");\n+            }\n+        }\n+        sb.append(\"// zyadtaha testing c++ commments \\n\");\n+        sb.append(\"/* zyadtaha testing c commments */ \\n\");\n+        sb.append(\"# zyadtaha testing python commments \\n\");\n+        sb.append(\"]\");\n+        System.out.println(sb.toString());\n+        return sb.toString();\n+    }\n+\n"]}, {"id": "bb2cb40fe6f7749b8b218613ba723647700784d1", "message": "Fix unmocked HTTP call in tests (#6449)\n\nFollow-up to #6360.", "patch": ["@@ -521,26 +521,43 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-        String url = \"https://example.com/file.csv \";\n-        String message = String.format(\"HTTP error %d : %s for URL %s\", 404,\n-                \"Not Found\", url.trim());\n-        MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n-        StringBody stringBody = new StringBody(url, ContentType.MULTIPART_FORM_DATA);\n-        builder = builder.addPart(\"download\", stringBody);\n-        HttpEntity entity = builder.build();\n-\n-        ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        entity.writeTo(os);\n-        ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n-\n-        HttpServletRequest req = mock(HttpServletRequest.class);\n-        when(req.getContentType()).thenReturn(entity.getContentType());\n-        when(req.getParameter(\"download\")).thenReturn(url);\n-        when(req.getMethod()).thenReturn(\"POST\");\n-        when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n-        when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n-\n-        ImportingJob job = ImportingManager.createJob();\n-        Map<String, String> parameters = ParsingUtilities.parseParameters(req);\n-        ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n-        Progress dummyProgress = new Progress() {\n-\n-            @Override\n-            public void setProgress(String message, int percent) {\n+        try (MockWebServer server = new MockWebServer()) {\n+            String url = server.url(\"input.csv \").toString();\n+            server.enqueue(new MockResponse()\n+                    .setHttp2ErrorCode(404)\n+                    .setStatus(\"HTTP/1.1 404 Not Found\"));\n+\n+            String message = String.format(\"HTTP error %d : %s for URL %s\", 404,\n+                    \"Not Found\", url.trim());\n+            MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n+            StringBody stringBody = new StringBody(url, ContentType.MULTIPART_FORM_DATA);\n+            builder = builder.addPart(\"download\", stringBody);\n+            HttpEntity entity = builder.build();\n+\n+            ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            entity.writeTo(os);\n+            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());\n+\n+            HttpServletRequest req = mock(HttpServletRequest.class);\n+            when(req.getContentType()).thenReturn(entity.getContentType());\n+            when(req.getParameter(\"download\")).thenReturn(url);\n+            when(req.getMethod()).thenReturn(\"POST\");\n+            when(req.getContentLength()).thenReturn((int) entity.getContentLength());\n+            when(req.getInputStream()).thenReturn(new MockServletInputStream(is));\n+\n+            ImportingJob job = ImportingManager.createJob();\n+            Map<String, String> parameters = ParsingUtilities.parseParameters(req);\n+            ObjectNode retrievalRecord = ParsingUtilities.mapper.createObjectNode();\n+            Progress dummyProgress = new Progress() {\n+\n+                @Override\n+                public void setProgress(String message, int percent) {\n+                }\n+\n+                @Override\n+                public boolean isCanceled() {\n+                    return false;\n+                }\n+            };\n+            try {\n+                ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, dummyProgress);\n+                fail(\"No Exception was thrown\");\n+            } catch (ClientProtocolException exception) {\n+                assertEquals(exception.getMessage(), message);", "@@ -548,11 +564,0 @@ public class ImportingUtilitiesTests extends ImporterTest {\n-\n-            @Override\n-            public boolean isCanceled() {\n-                return false;\n-            }\n-        };\n-        try {\n-            ImportingUtilities.retrieveContentFromPostRequest(req, parameters, job.getRawDataDir(), retrievalRecord, dummyProgress);\n-            fail(\"No Exception was thrown\");\n-        } catch (ClientProtocolException exception) {\n-            assertEquals(exception.getMessage(), message);\n"]}, {"id": "85a0add99a90b6df748598b87444ff4103283293", "message": "Add module names to About page. Fixes #5546 (#6421)\n\n- add Butterfly's list of loaded modules to the info\r\n  returned by the GetVersion command\r\n- Add that information to the About page HTML & update\r\n  the Javascript to populate it\r\n- also repair broken OpenRefine & JVM version display", "patch": ["@@ -224,0 +225,9 @@ public class RefineServlet extends Butterfly {\n+    /**\n+     * Get a list of the names of currently loaded modules.\n+     *\n+     * @return an array of module names in alphabetical order\n+     */\n+    public String[] getModuleNames() {\n+        return _modulesByName.keySet().stream().sorted().toArray(String[]::new);\n+    }\n+", "@@ -65,2 +65 @@ public class GetVersionCommand extends Command {\n-        // public String java_runtime_version = Runtime.getRuntime().version(); // Java 9 or later\n-        public String java_runtime_version = System.getProperty(\"java.runtime.version\", \"?\");\n+        public String java_runtime_version = Runtime.getRuntime().version().toString();", "@@ -68,0 +68,2 @@ public class GetVersionCommand extends Command {\n+        @JsonProperty(\"module_names\")\n+        public String[] modules = servlet.getModuleNames();\n"]}, {"id": "93544711fd67647c763073a8f8feb629b89f4482", "message": "Remove Denormalize operation. Fixes #6467. (#6468)\n\n", "patch": ["+++ /dev/null", "@@ -1,70 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.commands.row;\n-\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import com.google.refine.commands.Command;\n-import com.google.refine.model.AbstractOperation;\n-import com.google.refine.model.Project;\n-import com.google.refine.operations.row.DenormalizeOperation;\n-import com.google.refine.process.Process;\n-\n-public class DenormalizeCommand extends Command {\n-\n-    @Override\n-    public void doPost(HttpServletRequest request, HttpServletResponse response)\n-            throws ServletException, IOException {\n-        if (!hasValidCSRFToken(request)) {\n-            respondCSRFError(response);\n-            return;\n-        }\n-\n-        try {\n-            Project project = getProject(request);\n-\n-            AbstractOperation op = new DenormalizeOperation();\n-            Process process = op.createProcess(project, new Properties());\n-\n-            performProcessAndRespond(request, response, project, process);\n-        } catch (Exception e) {\n-            respondException(response, e);\n-        }\n-    }\n-}\n+++ /dev/null", "@@ -1,100 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.operations.row;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-\n-import com.google.refine.history.HistoryEntry;\n-import com.google.refine.model.AbstractOperation;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Project;\n-import com.google.refine.model.RecordModel.CellDependency;\n-import com.google.refine.model.RecordModel.RowDependency;\n-import com.google.refine.model.Row;\n-import com.google.refine.model.changes.MassRowChange;\n-import com.google.refine.operations.OperationDescription;\n-\n-public class DenormalizeOperation extends AbstractOperation {\n-\n-    @JsonCreator\n-    public DenormalizeOperation() {\n-    }\n-\n-    @Override\n-    protected String getBriefDescription(Project project) {\n-        return OperationDescription.row_denormalize_brief();\n-    }\n-\n-    @Override\n-    protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {\n-        List<Row> newRows = new ArrayList<Row>();\n-\n-        List<Row> oldRows = project.rows;\n-        for (int r = 0; r < oldRows.size(); r++) {\n-            Row oldRow = oldRows.get(r);\n-            Row newRow = null;\n-\n-            RowDependency rd = project.recordModel.getRowDependency(r);\n-            if (rd.cellDependencies != null) {\n-                newRow = oldRow.dup();\n-\n-                for (CellDependency cd : rd.cellDependencies) {\n-                    if (cd != null) {\n-                        int contextRowIndex = cd.rowIndex;\n-                        int contextCellIndex = cd.cellIndex;\n-\n-                        if (contextRowIndex >= 0 && contextRowIndex < oldRows.size()) {\n-                            Row contextRow = oldRows.get(contextRowIndex);\n-                            Cell contextCell = contextRow.getCell(contextCellIndex);\n-\n-                            newRow.setCell(contextCellIndex, contextCell);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            newRows.add(newRow != null ? newRow : oldRow);\n-        }\n-\n-        return new HistoryEntry(\n-                historyEntryID,\n-                project,\n-                getBriefDescription(project),\n-                DenormalizeOperation.this,\n-                new MassRowChange(newRows));\n-    }\n-}\n+++ /dev/null", "@@ -1,25 +0,0 @@\n-\n-package com.google.refine.commands.row;\n-\n-import java.io.IOException;\n-\n-import javax.servlet.ServletException;\n-\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.commands.CommandTestBase;\n-\n-public class DenormalizeCommandTests extends CommandTestBase {\n-\n-    @BeforeMethod\n-    public void setUpCommand() {\n-        command = new DenormalizeCommand();\n-    }\n-\n-    @Test\n-    public void testCSRFProtection() throws ServletException, IOException {\n-        command.doPost(request, response);\n-        assertCSRFCheckFailed();\n-    }\n-}\n+++ /dev/null", "@@ -1,51 +0,0 @@\n-/*******************************************************************************\n- * Copyright (C) 2018, OpenRefine contributors\n- * All rights reserved.\n- * \n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice,\n- *    this list of conditions and the following disclaimer in the documentation\n- *    and/or other materials provided with the distribution.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n- * POSSIBILITY OF SUCH DAMAGE.\n- ******************************************************************************/\n-\n-package com.google.refine.operations.row;\n-\n-import org.testng.annotations.BeforeSuite;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.RefineTest;\n-import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.util.TestUtils;\n-\n-public class DenormalizeOperationTests extends RefineTest {\n-\n-    @BeforeSuite\n-    public void registerOperation() {\n-        OperationRegistry.registerOperation(getCoreModule(), \"denormalize\", DenormalizeOperation.class);\n-    }\n-\n-    @Test\n-    public void serializeDenormalizeOperation() throws Exception {\n-        String json = \"{\"\n-                + \"\\\"op\\\":\\\"core/denormalize\\\",\"\n-                + \"\\\"description\\\":\\\"Denormalize\\\"}\";\n-        TestUtils.isSerializedTo(new DenormalizeOperation(), json);\n-    }\n-}\n"]}, {"id": "c7009256758e56ac88b59bd3bb58179aa60a2c52", "message": "First batch of importer and operation tests (#6441)\n\n* Expand importer test suite\r\n\r\n* Expand cell operation test suite\r\n\r\n* Expand column operation test suite", "patch": ["@@ -111,0 +112,53 @@ public class FixedWidthImporterTests extends ImporterTest {\n+    @Test\n+    public void readNoColumnNames() throws Exception {\n+        ArrayNode columnWidths = ParsingUtilities.mapper.createArrayNode();\n+        JSONUtilities.append(columnWidths, 6);\n+        JSONUtilities.append(columnWidths, 9);\n+        JSONUtilities.append(columnWidths, 5);\n+        whenGetArrayOption(\"columnWidths\", options, columnWidths);\n+\n+        whenGetIntegerOption(\"ignoreLines\", options, 0);\n+        whenGetIntegerOption(\"headerLines\", options, 0);\n+        whenGetIntegerOption(\"skipDataLines\", options, 0);\n+        whenGetIntegerOption(\"limit\", options, -1);\n+        whenGetBooleanOption(\"storeBlankCellsAsNulls\", options, true);\n+\n+        StringReader reader = new StringReader(\"NDB_NoShrt_DescWater\\nTooShort\\n\");\n+\n+        parseOneFile(SUT, reader);\n+\n+        Project expectedProject = createProject(\n+                new String[] { numberedColumn(1), numberedColumn(2), numberedColumn(3) },\n+                new Serializable[][] {\n+                        { \"NDB_No\", \"Shrt_Desc\", \"Water\" },\n+                        { \"TooSho\", \"rt\", null },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void readColumnHeader() throws Exception {\n+        ArrayNode columnWidths = ParsingUtilities.mapper.createArrayNode();\n+        JSONUtilities.append(columnWidths, 6);\n+        JSONUtilities.append(columnWidths, 9);\n+        JSONUtilities.append(columnWidths, 5);\n+        whenGetArrayOption(\"columnWidths\", options, columnWidths);\n+\n+        whenGetIntegerOption(\"ignoreLines\", options, 0);\n+        whenGetIntegerOption(\"headerLines\", options, 1);\n+        whenGetIntegerOption(\"skipDataLines\", options, 0);\n+        whenGetIntegerOption(\"limit\", options, -1);\n+        whenGetBooleanOption(\"storeBlankCellsAsNulls\", options, true);\n+\n+        StringReader reader = new StringReader(\"NDB_NoShrt_DescWater\\n012345green....00342\\n\");\n+\n+        parseOneFile(SUT, reader);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"NDB_No\", \"Shrt_Desc\", \"Water\" },\n+                new Serializable[][] {\n+                        { \"012345\", \"green....\", \"00342\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+", "@@ -68,0 +69,53 @@ public class LineBasedImporterTests extends ImporterTest {\n+    @Test\n+    public void testLineBasedImporter() throws Exception {\n+        String contents = \"\"\n+                + \"foo\\n\"\n+                + \"bar\\n\"\n+                + \"baz\";\n+\n+        try {\n+            prepareOptions(\"\\\\r?\\\\n\", 1, 0, false);\n+            parseOneFile(SUT, new StringReader(contents));\n+        } catch (Exception e) {\n+            fail(\"Exception during file parse\", e);\n+        }\n+\n+        Project expected = createProject(new String[] { numberedColumn(1) },\n+                new Serializable[][] {\n+                        { \"foo\" },\n+                        { \"bar\" },\n+                        { \"baz\" }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testLinesPerRow() throws Exception {\n+        String contents = \"\"\n+                + \"a\\n\"\n+                + \"b\\n\"\n+                + \"c\\n\"\n+                + \"d\\n\"\n+                + \"e\\n\"\n+                + \"f\\n\";\n+\n+        try {\n+            prepareOptions(\"\\\\r?\\\\n\", 2, 0, false);\n+            parseOneFile(SUT, new StringReader(contents));\n+        } catch (Exception e) {\n+            fail(\"Exception during file parse\", e);\n+        }\n+\n+        Project expected = createProject(new String[] {\n+                numberedColumn(1),\n+                numberedColumn(2) },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"c\", \"d\" },\n+                        { \"e\", \"f\" }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -89,0 +90,33 @@ public class OdsImporterTests extends ImporterTest {\n+    @Test\n+    public void readMultiSheetOds() throws Exception {\n+\n+        ArrayNode sheets = ParsingUtilities.mapper.createArrayNode();\n+        sheets.add(ParsingUtilities.mapper\n+                .readTree(\"{name: \\\"file-source#Test Sheet 0\\\", fileNameAndSheetIndex: \\\"file-source#0\\\", rows: 3, selected: true}\"));\n+        sheets.add(ParsingUtilities.mapper\n+                .readTree(\"{name: \\\"file-source#Test Sheet 1\\\", fileNameAndSheetIndex: \\\"file-source#1\\\", rows: 3, selected: true}\"));\n+        whenGetArrayOption(\"sheets\", options, sheets);\n+\n+        whenGetIntegerOption(\"ignoreLines\", options, 0);\n+        whenGetIntegerOption(\"headerLines\", options, 1);\n+        whenGetIntegerOption(\"skipDataLines\", options, 0);\n+        whenGetIntegerOption(\"limit\", options, -1);\n+        whenGetBooleanOption(\"storeBlankCellsAsNulls\", options, true);\n+\n+        InputStream stream = this.getClass().getClassLoader().getResourceAsStream(\"sample.ods\");\n+\n+        parseOneFile(SUT, stream);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"c\", \"d\" },\n+                        { \"e\", \"f\" },\n+                        { null, null },\n+                        { 3.0, 4.0 },\n+                        { 5.0, 6.0 },\n+                        { null, null },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+", "@@ -31,0 +32 @@ import java.util.ArrayList;\n+import java.util.Arrays;", "@@ -40,0 +42,2 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine;", "@@ -41,0 +45 @@ import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet;", "@@ -52,0 +57,3 @@ public class BlankDownTests extends RefineTest {\n+    Project projectToBlankDown = null;\n+    Project projectForRecordKey = null;\n+    ListFacet.ListFacetConfig facet;", "@@ -68,0 +76,23 @@ public class BlankDownTests extends RefineTest {\n+\n+        projectToBlankDown = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", \"b\", \"d\" },\n+                        { \"e\", \"b\", \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }\n+                });\n+\n+        projectForRecordKey = createProject(new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"a\", \"b\" },\n+                        { \"e\", \"b\" },\n+                        { \"e\", \"g\" },\n+                        { \"e\", \"g\" }\n+                });\n+\n+        facet = new ListFacet.ListFacetConfig();\n+        facet.name = \"hello\";\n+        facet.expression = \"grel:value\";\n+        facet.columnName = \"hello\";", "@@ -73,0 +104,2 @@ public class BlankDownTests extends RefineTest {\n+        ProjectManager.singleton.deleteProject(projectToBlankDown.id);\n+        ProjectManager.singleton.deleteProject(projectForRecordKey.id);", "@@ -87,4 +119,2 @@ public class BlankDownTests extends RefineTest {\n-    public void testBlankDownRecords() throws Exception {\n-        AbstractOperation op = new BlankDownOperation(\n-                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),\n-                \"second\");\n+    public void testBlankDownRecordsNoFacets() throws Exception {\n+        BlankDownOperation operation = new BlankDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"), \"bar\");", "@@ -92 +122 @@ public class BlankDownTests extends RefineTest {\n-        runOperation(op, project);\n+        runOperation(operation, projectToBlankDown);", "@@ -94,2 +124 @@ public class BlankDownTests extends RefineTest {\n-        Project expectedProject = createProject(\n-                new String[] { \"key\", \"first\", \"second\" },\n+        Project expectedProject = createProject(new String[] { \"foo\", \"bar\", \"hello\" },", "@@ -98,3 +127,4 @@ public class BlankDownTests extends RefineTest {\n-                        { null, \"d\", null },\n-                        { \"e\", \"f\", \"c\" },\n-                        { null, null, null },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", \"b\", \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, null, \"i\" }", "@@ -102 +132,2 @@ public class BlankDownTests extends RefineTest {\n-        assertProjectEquals(project, expectedProject);\n+\n+        assertProjectEquals(projectToBlankDown, expectedProject);", "@@ -106,4 +137,2 @@ public class BlankDownTests extends RefineTest {\n-    public void testBlankDownRows() throws Exception {\n-        AbstractOperation op = new BlankDownOperation(\n-                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n-                \"second\");\n+    public void testBlankDownRowsNoFacets() throws Exception {\n+        BlankDownOperation operation = new BlankDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"), \"bar\");", "@@ -111 +140 @@ public class BlankDownTests extends RefineTest {\n-        runOperation(op, project);\n+        runOperation(operation, projectToBlankDown);", "@@ -113,2 +142 @@ public class BlankDownTests extends RefineTest {\n-        Project expectedProject = createProject(\n-                new String[] { \"key\", \"first\", \"second\" },\n+        Project expectedProject = createProject(new String[] { \"foo\", \"bar\", \"hello\" },", "@@ -117,3 +145,4 @@ public class BlankDownTests extends RefineTest {\n-                        { null, \"d\", null },\n-                        { \"e\", \"f\", null },\n-                        { null, null, null },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, null, \"i\" }", "@@ -121 +150,2 @@ public class BlankDownTests extends RefineTest {\n-        assertProjectEquals(project, expectedProject);\n+\n+        assertProjectEquals(projectToBlankDown, expectedProject);", "@@ -153,0 +184,63 @@ public class BlankDownTests extends RefineTest {\n+\n+    @Test\n+    public void testBlankDownRowsFacets() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"c\", \"c\"),\n+                new DecoratedValue(\"f\", \"f\"),\n+                new DecoratedValue(\"i\", \"i\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        BlankDownOperation operation = new BlankDownOperation(engineConfig, \"bar\");\n+\n+        runOperation(operation, projectToBlankDown);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", \"b\", \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }\n+                });\n+\n+        assertProjectEquals(projectToBlankDown, expected);\n+    }\n+\n+    @Test\n+    public void testBlankDownRecordsFacets() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"c\", \"c\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RecordBased);\n+        BlankDownOperation operation = new BlankDownOperation(engineConfig, \"bar\");\n+\n+        runOperation(operation, projectToBlankDown);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", \"b\", \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }\n+                });\n+\n+        assertProjectEquals(projectToBlankDown, expected);\n+    }\n+\n+    @Test\n+    public void testBlankDownRecordKey() throws Exception {\n+        BlankDownOperation operation = new BlankDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"), \"foo\");\n+\n+        runOperation(operation, projectForRecordKey);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { null, \"b\" },\n+                        { \"e\", \"b\" },\n+                        { null, \"g\" },\n+                        { null, \"g\" }\n+                });\n+\n+        assertProjectEquals(projectForRecordKey, expected);\n+    }\n+", "@@ -31,0 +32 @@ import java.util.ArrayList;\n+import java.util.Arrays;", "@@ -40,0 +42,2 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine;", "@@ -41,0 +45 @@ import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet;", "@@ -52,0 +57,2 @@ public class FillDownTests extends RefineTest {\n+    Project toFillDown = null;\n+    ListFacet.ListFacetConfig facet;", "@@ -68,0 +75,13 @@ public class FillDownTests extends RefineTest {\n+        toFillDown = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"\", \"i\" }\n+                });\n+\n+        facet = new ListFacet.ListFacetConfig();\n+        facet.name = \"hello\";\n+        facet.expression = \"grel:value\";\n+        facet.columnName = \"hello\";", "@@ -73,0 +93 @@ public class FillDownTests extends RefineTest {\n+        ProjectManager.singleton.deleteProject(toFillDown.id);", "@@ -107,4 +127,2 @@ public class FillDownTests extends RefineTest {\n-    public void testFillDownRecords() throws Exception {\n-        AbstractOperation op = new FillDownOperation(\n-                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),\n-                \"second\");\n+    public void testFillDownRecordsNoFacets() throws Exception {\n+        FillDownOperation operation = new FillDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"), \"bar\");", "@@ -112 +130 @@ public class FillDownTests extends RefineTest {\n-        runOperation(op, project);\n+        runOperation(operation, toFillDown);", "@@ -114,2 +132 @@ public class FillDownTests extends RefineTest {\n-        Project expectedProject = createProject(\n-                new String[] { \"key\", \"first\", \"second\" },\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },", "@@ -118,3 +135,4 @@ public class FillDownTests extends RefineTest {\n-                        { null, \"d\", \"c\" },\n-                        { \"e\", \"f\", null },\n-                        { null, null, \"h\" },\n+                        { \"\", \"b\", \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }", "@@ -122 +140,2 @@ public class FillDownTests extends RefineTest {\n-        assertProjectEquals(project, expectedProject);\n+\n+        assertProjectEquals(toFillDown, expected);", "@@ -128,4 +147,2 @@ public class FillDownTests extends RefineTest {\n-    public void testFillDownRows() throws Exception {\n-        AbstractOperation op = new FillDownOperation(\n-                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n-                \"second\");\n+    public void testFillDownRowsNoFacets() throws Exception {\n+        FillDownOperation operation = new FillDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"), \"bar\");", "@@ -133 +150 @@ public class FillDownTests extends RefineTest {\n-        runOperation(op, project);\n+        runOperation(operation, toFillDown);", "@@ -135,2 +152 @@ public class FillDownTests extends RefineTest {\n-        Project expectedProject = createProject(\n-                new String[] { \"key\", \"first\", \"second\" },\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },", "@@ -139,3 +155,4 @@ public class FillDownTests extends RefineTest {\n-                        { null, \"d\", \"c\" },\n-                        { \"e\", \"f\", \"c\" },\n-                        { null, null, \"h\" },\n+                        { \"\", \"b\", \"d\" },\n+                        { \"e\", \"b\", \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }", "@@ -143 +160,2 @@ public class FillDownTests extends RefineTest {\n-        assertProjectEquals(project, expectedProject);\n+\n+        assertProjectEquals(toFillDown, expected);", "@@ -175,0 +194,61 @@ public class FillDownTests extends RefineTest {\n+\n+    @Test\n+    public void testFillDownRowsFacets() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"h\", \"h\"),\n+                new DecoratedValue(\"i\", \"i\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        FillDownOperation operation = new FillDownOperation(engineConfig, \"bar\");\n+\n+        runOperation(operation, toFillDown);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"g\", \"i\" }\n+                });\n+\n+        assertProjectEquals(toFillDown, expected);\n+    }\n+\n+    @Test\n+    public void testFillDownRecordsFacets() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"c\", \"c\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RecordBased);\n+        FillDownOperation operation = new FillDownOperation(engineConfig, \"bar\");\n+\n+        runOperation(operation, toFillDown);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", \"b\", \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"\", \"i\" }\n+                });\n+\n+        assertProjectEquals(toFillDown, expected);\n+    }\n+\n+    @Test\n+    public void testFillDownRowsKeyColumn() throws Exception {\n+        FillDownOperation operation = new FillDownOperation(EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"), \"foo\");\n+\n+        runOperation(operation, toFillDown);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"a\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { \"e\", \"g\", \"h\" },\n+                        { \"e\", \"\", \"i\" }\n+                });\n+\n+        assertProjectEquals(toFillDown, expected);\n+    }\n+++ /dev/null", "@@ -1,126 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.operations.cell;\n-\n-import java.io.Serializable;\n-\n-import org.slf4j.LoggerFactory;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.BeforeSuite;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.RefineTest;\n-import com.google.refine.model.AbstractOperation;\n-import com.google.refine.model.Project;\n-import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.util.ParsingUtilities;\n-import com.google.refine.util.TestUtils;\n-\n-public class JoinMultiValuedCellsTests extends RefineTest {\n-\n-    Project project;\n-\n-    @Override\n-    @BeforeTest\n-    public void init() {\n-        logger = LoggerFactory.getLogger(this.getClass());\n-    }\n-\n-    @BeforeSuite\n-    public void registerOperation() {\n-        OperationRegistry.registerOperation(getCoreModule(), \"multivalued-cell-join\", MultiValuedCellJoinOperation.class);\n-    }\n-\n-    @BeforeMethod\n-    public void createProject() {\n-        project = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one\" },\n-                        { null, \"two\" },\n-                        { null, \"three\" },\n-                        { null, \"four\" }\n-                });\n-    }\n-\n-    @Test\n-    public void serializeMultiValuedCellJoinOperation() throws Exception {\n-        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-join\\\",\"\n-                + \"\\\"description\\\":\\\"Join multi-valued cells in column value column\\\",\"\n-                + \"\\\"columnName\\\":\\\"value column\\\",\"\n-                + \"\\\"keyColumnName\\\":\\\"key column\\\",\"\n-                + \"\\\"separator\\\":\\\",\\\"}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellJoinOperation.class), json);\n-    }\n-\n-    /*\n-     * Test to demonstrate the intended behaviour of the function\n-     */\n-\n-    @Test\n-    public void testJoinMultiValuedCells() throws Exception {\n-        AbstractOperation op = new MultiValuedCellJoinOperation(\n-                \"Value\",\n-                \"Key\",\n-                \",\");\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one,two,three,four\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testJoinMultiValuedCellsMultipleSpaces() throws Exception {\n-        AbstractOperation op = new MultiValuedCellJoinOperation(\n-                \"Value\",\n-                \"Key\",\n-                \",     ,\");\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one,     ,two,     ,three,     ,four\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-}", "@@ -185,0 +186,88 @@ public class KeyValueColumnizeTests extends RefineTest {\n+    @Test\n+    public void testKeyValueColumnizeNotes() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"Key\", \"Value\", \"Notes\" },\n+                new Serializable[][] {\n+                        { \"merchant\", \"Katie\", \"ref\" },\n+                        { \"fruit\", \"apple\", \"catalogue\" },\n+                        { \"price\", \"1.2\", \"pricelist\" },\n+                        { \"merchant\", \"John\", \"knowledge\" },\n+                        { \"fruit\", \"banana\", \"survey\" },\n+                        { \"price\", \"3.1\", \"legislation\" }\n+                });\n+\n+        KeyValueColumnizeOperation operation = new KeyValueColumnizeOperation(\n+                \"Key\",\n+                \"Value\",\n+                \"Notes\");\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"merchant\", \"fruit\", \"price\", \"Notes : merchant\", \"Notes : fruit\", \"Notes : price\" },\n+                new Serializable[][] {\n+                        { \"Katie\", \"apple\", \"1.2\", \"ref\", \"catalogue\", \"pricelist\" },\n+                        { \"John\", \"banana\", \"3.1\", \"knowledge\", \"survey\", \"legislation\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testKeyValueColumnizeIdenticalValues() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"Key\", \"Value\", \"wd\" },\n+                new Serializable[][] {\n+                        { \"merchant\", \"Katie\", \"34\" },\n+                        { \"fruit\", \"apple\", \"34\" },\n+                        { \"price\", \"1.2\", \"34\" },\n+                        { \"merchant\", \"John\", \"56\" },\n+                        { \"fruit\", \"banana\", \"56\" },\n+                        { \"price\", \"3.1\", \"56\" }\n+                });\n+\n+        KeyValueColumnizeOperation operation = new KeyValueColumnizeOperation(\n+                \"Key\",\n+                \"Value\",\n+                null);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"wd\", \"merchant\", \"fruit\", \"price\" },\n+                new Serializable[][] {\n+                        { \"34\", \"Katie\", \"apple\", \"1.2\" },\n+                        { \"56\", \"John\", \"banana\", \"3.1\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testCopyRowsWithNoKeys() throws Exception {\n+        // when a key cell is empty, if there are other columns around, we simply copy those\n+        Project project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"merchant\", \"Katie\" },\n+                        { \"fruit\", \"apple\" },\n+                        { \"price\", \"1.2\", },\n+                        { null, \"John\", },\n+                        { \"fruit\", \"banana\" },\n+                        { \"price\", \"3.1\", }\n+                });\n+\n+        KeyValueColumnizeOperation operation = new KeyValueColumnizeOperation(\n+                \"Key\",\n+                \"Value\",\n+                null);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"merchant\", \"fruit\", \"price\" },\n+                new Serializable[][] {\n+                        { \"Katie\", \"apple\", \"1.2\" },\n+                        { null, \"banana\", \"3.1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -29,0 +30,3 @@ package com.google.refine.operations.cell;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;", "@@ -33,0 +37 @@ import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;", "@@ -37,0 +42,6 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.Project;", "@@ -149,0 +160,64 @@ public class MassOperationTests extends RefineTest {\n+    private Project project;\n+    private static EngineConfig engineConfig;\n+    private ListFacetConfig facet;\n+    private List<Edit> edits;\n+    private List<Edit> editsWithFromBlank;\n+\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\" },\n+                        { \"v3\", \"a\" },\n+                        { \"\", \"a\" },\n+                        { \"\", \"b\" },\n+                        { new EvalError(\"error\"), \"a\" },\n+                        { \"v1\", \"b\" }\n+                });\n+        facet = new ListFacetConfig();\n+        facet.columnName = \"bar\";\n+        facet.name = \"bar\";\n+        facet.expression = \"grel:value\";\n+        facet.selection = Collections.singletonList(new DecoratedValue(\"a\", \"a\"));\n+        engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        edits = Collections.singletonList(new Edit(Collections.singletonList(\"v1\"), false, false, \"v2\"));\n+        editsWithFromBlank = Arrays.asList(edits.get(0), new Edit(Collections.emptyList(), true, false, \"hey\"));\n+    }\n+\n+    @Test\n+    public void testSimpleReplace() throws Exception {\n+        MassEditOperation operation = new MassEditOperation(engineConfig, \"foo\", \"grel:value\", editsWithFromBlank);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"v2\", \"a\" },\n+                        { \"v3\", \"a\" },\n+                        { \"hey\", \"a\" },\n+                        { \"\", \"b\" },\n+                        { new EvalError(\"error\"), \"a\" },\n+                        { \"v1\", \"b\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testRecordsMode() throws Exception {\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RecordBased);\n+        MassEditOperation operation = new MassEditOperation(engineConfig, \"foo\", \"grel:value\", editsWithFromBlank);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"v2\", \"a\" },\n+                        { \"v3\", \"a\" },\n+                        { \"hey\", \"a\" },\n+                        { \"hey\", \"b\" },\n+                        { new EvalError(\"error\"), \"a\" },\n+                        { \"v1\", \"b\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n--- /dev/null", "@@ -0,0 +1,170 @@\n+/*\n+\n+Copyright 2010, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.operations.cell;\n+\n+import java.io.Serializable;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Project;\n+import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.util.ParsingUtilities;\n+import com.google.refine.util.TestUtils;\n+\n+public class MultiValuedCellJoinOperationTests extends RefineTest {\n+\n+    Project project;\n+    Project projectWithRecords;\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+    }\n+\n+    @BeforeSuite\n+    public void registerOperation() {\n+        OperationRegistry.registerOperation(getCoreModule(), \"multivalued-cell-join\", MultiValuedCellJoinOperation.class);\n+    }\n+\n+    @BeforeMethod\n+    public void createProject() {\n+        project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two\" },\n+                        { null, \"three\" },\n+                        { null, \"four\" }\n+                });\n+        projectWithRecords = createProject(\n+                new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a\", \"b\" },\n+                        { null, \"c\", \"d\" },\n+                        { \"record2\", \"\", \"f\" },\n+                        { null, \"g\", \"\" },\n+                        { null, null, null }\n+                });\n+    }\n+\n+    @Test\n+    public void serializeMultiValuedCellJoinOperation() throws Exception {\n+        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-join\\\",\"\n+                + \"\\\"description\\\":\\\"Join multi-valued cells in column value column\\\",\"\n+                + \"\\\"columnName\\\":\\\"value column\\\",\"\n+                + \"\\\"keyColumnName\\\":\\\"key column\\\",\"\n+                + \"\\\"separator\\\":\\\",\\\"}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellJoinOperation.class), json);\n+    }\n+\n+    /*\n+     * Test to demonstrate the intended behaviour of the function\n+     */\n+\n+    @Test\n+    public void testJoinMultiValuedCells() throws Exception {\n+        AbstractOperation op = new MultiValuedCellJoinOperation(\n+                \"Value\",\n+                \"Key\",\n+                \",\");\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one,two,three,four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testJoinMultiValuedCellsMultipleSpaces() throws Exception {\n+        AbstractOperation op = new MultiValuedCellJoinOperation(\n+                \"Value\",\n+                \"Key\",\n+                \",     ,\");\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one,     ,two,     ,three,     ,four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testJoin() throws Exception {\n+        AbstractOperation operation = new MultiValuedCellJoinOperation(\"foo\", \"key\", \",\");\n+\n+        runOperation(operation, projectWithRecords);\n+\n+        Project expected = createProject(new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a,c\", \"b\" },\n+                        { null, null, \"d\" },\n+                        { \"record2\", \"g\", \"f\" },\n+                });\n+\n+        assertProjectEquals(projectWithRecords, expected);\n+    }\n+\n+    @Test\n+    public void testCustomKey() throws Exception {\n+        AbstractOperation operation = new MultiValuedCellJoinOperation(\"bar\", \"foo\", \",\");\n+\n+        runOperation(operation, projectWithRecords);\n+\n+        Project expected = createProject(\n+                new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a\", \"b\" },\n+                        { null, \"c\", \"d,f\" },\n+                        { \"record2\", \"\", null },\n+                        { null, \"g\", \"\" },\n+                });\n+\n+        assertProjectEquals(projectWithRecords, expected);\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,309 @@\n+/*\n+\n+Copyright 2010, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.operations.cell;\n+\n+import java.io.Serializable;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Project;\n+import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.util.ParsingUtilities;\n+import com.google.refine.util.TestUtils;\n+\n+public class MultiValuedCellSplitOperationTests extends RefineTest {\n+\n+    Project project;\n+    Project biggerProject;\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+        OperationRegistry.registerOperation(getCoreModule(), \"multivalued-cell-split\", MultiValuedCellSplitOperation.class);\n+    }\n+\n+    @BeforeMethod\n+    public void createProject() {\n+        project = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" }\n+                });\n+        biggerProject = createProject(\n+                new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a||b\", \"c\" },\n+                        { null, \"c|d\", \"e\" },\n+                        { null, 12, \"f\" },\n+                        { \"record2\", \"\", \"g\" },\n+                        { null, \"h|i\", \"\" },\n+                        { null, null, \"j\" },\n+                        { null, null, null }\n+                });\n+    }\n+\n+    @Test\n+    public void serializeMultiValuedCellSplitOperationWithSeparator() throws Exception {\n+        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"\n+                + \"\\\"description\\\":\\\"Split multi-valued cells in column Value\\\",\"\n+                + \"\\\"columnName\\\":\\\"Value\\\",\"\n+                + \"\\\"keyColumnName\\\":\\\"Key\\\",\"\n+                + \"\\\"mode\\\":\\\"separator\\\",\"\n+                + \"\\\"separator\\\":\\\":\\\",\"\n+                + \"\\\"regex\\\":false}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);\n+    }\n+\n+    @Test\n+    public void serializeMultiValuedCellSplitOperationWithLengths() throws Exception {\n+        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"\n+                + \"\\\"description\\\":\\\"Split multi-valued cells in column Value\\\",\"\n+                + \"\\\"columnName\\\":\\\"Value\\\",\"\n+                + \"\\\"keyColumnName\\\":\\\"Key\\\",\"\n+                + \"\\\"mode\\\":\\\"lengths\\\",\"\n+                + \"\\\"fieldLengths\\\":[1,1]}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);\n+    }\n+\n+    /**\n+     * Test to demonstrate the intended behaviour of the function, for issue #1268\n+     * https://github.com/OpenRefine/OpenRefine/issues/1268\n+     */\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextSeparator() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \":\",\n+                false);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsRegExSeparator() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \"\\\\W\",\n+                true);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one\" },\n+                        { null, \"two\" },\n+                        { null, \"three\" },\n+                        { null, \"four\" },\n+                        { null, \"fiveSix\" },\n+                        { null, \"Sev\u00e8\u00cbight\" },\n+                        { null, \"nin\u00e991011twelve\" },\n+                        { null, \"thirteen\" },\n+                        { null, \"14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsLengths() throws Exception {\n+        int[] lengths = { 4, 4, 6, 4 };\n+\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                lengths);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:\" },\n+                        { null, \"two;\" },\n+                        { null, \"three \" },\n+                        { null, \"four\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextCase() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \"(?<=\\\\p{Lower}|[\\\\p{Lower}][\\\\s])(?=\\\\p{Upper})\",\n+                true);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;five\" },\n+                        { null, \"Six \" },\n+                        { null, \"Sev\u00e8\" },\n+                        { null, \"\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextCaseReverse() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \"(?<=\\\\p{Upper}|[\\\\p{Upper}][\\\\s])(?=\\\\p{Lower})\",\n+                true);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveS\" },\n+                        { null, \"ix S\" },\n+                        { null, \"ev\u00e8\u00cb\" },\n+                        { null, \"ight;nin\u00e991011twelve thirteen 14\u00c0\" },\n+                        { null, \"ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextNumber() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \"(?<=\\\\p{Digit}|[\\\\p{Digit}][\\\\s])(?=\\\\p{L})\",\n+                true);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011\" },\n+                        { null, \"twelve thirteen 14\" },\n+                        { null, \"\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplitMultiValuedCellsTextNumberReverse() throws Exception {\n+        AbstractOperation op = new MultiValuedCellSplitOperation(\n+                \"Value\",\n+                \"Key\",\n+                \"(?<=\\\\p{L}|[\\\\p{L}][\\\\s])(?=\\\\p{Digit})\",\n+                true);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"Key\", \"Value\" },\n+                new Serializable[][] {\n+                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e9\" },\n+                        { null, \"91011twelve thirteen \" },\n+                        { null, \"14\u00c0ifteen\" },\n+                });\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testSplit() throws Exception {\n+        AbstractOperation SUT = new MultiValuedCellSplitOperation(\"foo\", \"key\", \"|\", false);\n+\n+        runOperation(SUT, biggerProject);\n+\n+        Project expected = createProject(\n+                new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a\", \"c\" },\n+                        { null, \"\", null },\n+                        { null, \"b\", null },\n+                        { null, \"c\", \"e\" },\n+                        { null, \"d\", null },\n+                        { null, 12, \"f\" },\n+                        { \"record2\", \"\", \"g\" },\n+                        { null, \"h\", \"\" },\n+                        { null, \"i\", \"j\" },\n+                        { null, null, null }\n+                });\n+\n+        assertProjectEquals(biggerProject, expected);\n+    }\n+\n+    @Test\n+    public void testSplitRespectsKeyColumn() throws Exception {\n+        AbstractOperation SUT = new MultiValuedCellSplitOperation(\"foo\", \"bar\", \"|\", false);\n+\n+        runOperation(SUT, biggerProject);\n+\n+        Project expected = createProject(\n+                new String[] { \"key\", \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"record1\", \"a\", \"c\" },\n+                        { null, \"\", null },\n+                        { null, \"b\", null },\n+                        { null, \"c\", \"e\" },\n+                        { null, \"d\", null },\n+                        { null, 12, \"f\" },\n+                        { \"record2\", \"\", \"g\" },\n+                        { null, \"h\", \"\" },\n+                        { null, \"i\", null },\n+                        { null, null, \"j\" },\n+                        { null, null, null }\n+                });\n+\n+        assertProjectEquals(biggerProject, expected);\n+    }\n+\n+}\n+++ /dev/null", "@@ -1,247 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.operations.cell;\n-\n-import java.io.Serializable;\n-\n-import org.slf4j.LoggerFactory;\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.RefineTest;\n-import com.google.refine.model.AbstractOperation;\n-import com.google.refine.model.Project;\n-import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.util.ParsingUtilities;\n-import com.google.refine.util.TestUtils;\n-\n-public class SplitMultiValuedCellsTests extends RefineTest {\n-\n-    Project project;\n-\n-    @Override\n-    @BeforeTest\n-    public void init() {\n-        logger = LoggerFactory.getLogger(this.getClass());\n-        OperationRegistry.registerOperation(getCoreModule(), \"multivalued-cell-split\", MultiValuedCellSplitOperation.class);\n-    }\n-\n-    @BeforeMethod\n-    public void createProject() {\n-        project = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" }\n-                });\n-    }\n-\n-    @Test\n-    public void serializeMultiValuedCellSplitOperationWithSeparator() throws Exception {\n-        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"\n-                + \"\\\"description\\\":\\\"Split multi-valued cells in column Value\\\",\"\n-                + \"\\\"columnName\\\":\\\"Value\\\",\"\n-                + \"\\\"keyColumnName\\\":\\\"Key\\\",\"\n-                + \"\\\"mode\\\":\\\"separator\\\",\"\n-                + \"\\\"separator\\\":\\\":\\\",\"\n-                + \"\\\"regex\\\":false}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);\n-    }\n-\n-    @Test\n-    public void serializeMultiValuedCellSplitOperationWithLengths() throws Exception {\n-        String json = \"{\\\"op\\\":\\\"core/multivalued-cell-split\\\",\"\n-                + \"\\\"description\\\":\\\"Split multi-valued cells in column Value\\\",\"\n-                + \"\\\"columnName\\\":\\\"Value\\\",\"\n-                + \"\\\"keyColumnName\\\":\\\"Key\\\",\"\n-                + \"\\\"mode\\\":\\\"lengths\\\",\"\n-                + \"\\\"fieldLengths\\\":[1,1]}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, MultiValuedCellSplitOperation.class), json);\n-    }\n-\n-    /**\n-     * Test to demonstrate the intended behaviour of the function, for issue #1268\n-     * https://github.com/OpenRefine/OpenRefine/issues/1268\n-     */\n-\n-    @Test\n-    public void testSplitMultiValuedCellsTextSeparator() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \":\",\n-                false);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one\" },\n-                        { null, \"two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsRegExSeparator() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \"\\\\W\",\n-                true);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one\" },\n-                        { null, \"two\" },\n-                        { null, \"three\" },\n-                        { null, \"four\" },\n-                        { null, \"fiveSix\" },\n-                        { null, \"Sev\u00e8\u00cbight\" },\n-                        { null, \"nin\u00e991011twelve\" },\n-                        { null, \"thirteen\" },\n-                        { null, \"14\u00c0ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsLengths() throws Exception {\n-        int[] lengths = { 4, 4, 6, 4 };\n-\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                lengths);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:\" },\n-                        { null, \"two;\" },\n-                        { null, \"three \" },\n-                        { null, \"four\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsTextCase() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \"(?<=\\\\p{Lower}|[\\\\p{Lower}][\\\\s])(?=\\\\p{Upper})\",\n-                true);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:two;three four;five\" },\n-                        { null, \"Six \" },\n-                        { null, \"Sev\u00e8\" },\n-                        { null, \"\u00cbight;nin\u00e991011twelve thirteen 14\u00c0ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsTextCaseReverse() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \"(?<=\\\\p{Upper}|[\\\\p{Upper}][\\\\s])(?=\\\\p{Lower})\",\n-                true);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:two;three four;fiveS\" },\n-                        { null, \"ix S\" },\n-                        { null, \"ev\u00e8\u00cb\" },\n-                        { null, \"ight;nin\u00e991011twelve thirteen 14\u00c0\" },\n-                        { null, \"ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsTextNumber() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \"(?<=\\\\p{Digit}|[\\\\p{Digit}][\\\\s])(?=\\\\p{L})\",\n-                true);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e991011\" },\n-                        { null, \"twelve thirteen 14\" },\n-                        { null, \"\u00c0ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-\n-    @Test\n-    public void testSplitMultiValuedCellsTextNumberReverse() throws Exception {\n-        AbstractOperation op = new MultiValuedCellSplitOperation(\n-                \"Value\",\n-                \"Key\",\n-                \"(?<=\\\\p{L}|[\\\\p{L}][\\\\s])(?=\\\\p{Digit})\",\n-                true);\n-\n-        runOperation(op, project);\n-\n-        Project expectedProject = createProject(\n-                new String[] { \"Key\", \"Value\" },\n-                new Serializable[][] {\n-                        { \"Record_1\", \"one:two;three four;fiveSix Sev\u00e8\u00cbight;nin\u00e9\" },\n-                        { null, \"91011twelve thirteen \" },\n-                        { null, \"14\u00c0ifteen\" },\n-                });\n-        assertProjectEquals(project, expectedProject);\n-    }\n-}\n--- /dev/null", "@@ -0,0 +1,175 @@\n+\n+package com.google.refine.operations.cell;\n+\n+import java.io.Serializable;\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.Project;\n+import com.google.refine.operations.OnError;\n+import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.util.ParsingUtilities;\n+import com.google.refine.util.TestUtils;\n+\n+public class TextTransformOperationTests extends RefineTest {\n+\n+    @BeforeSuite\n+    public void registerOperation() {\n+        OperationRegistry.registerOperation(getCoreModule(), \"text-transform\", TextTransformOperation.class);\n+    }\n+\n+    protected Project project;\n+\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+    }\n+\n+    @Test\n+    public void serializeTransformOperation() throws Exception {\n+        String json = \"{\"\n+                + \"   \\\"op\\\":\\\"core/text-transform\\\",\"\n+                + \"   \\\"description\\\":\\\"Text transform on cells in column organization_json using expression grel:value.parseJson()[\\\\\\\"employment-summary\\\\\\\"].join('###')\\\",\"\n+                + \"   \\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"\n+                + \"   \\\"columnName\\\":\\\"organization_json\\\",\"\n+                + \"   \\\"expression\\\":\\\"grel:value.parseJson()[\\\\\\\"employment-summary\\\\\\\"].join('###')\\\",\"\n+                + \"   \\\"onError\\\":\\\"set-to-blank\\\",\"\n+                + \"   \\\"repeat\\\": false,\"\n+                + \"   \\\"repeatCount\\\": 0\"\n+                + \"}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, TextTransformOperation.class), json);\n+    }\n+\n+    @Test\n+    public void testTransformColumnInRowsMode() throws Exception {\n+        TextTransformOperation operation = new TextTransformOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:cells[\\\"foo\\\"].value+'_'+value\",\n+                OnError.SetToBlank,\n+                false, 0);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"v1_a\", \"d\" },\n+                        { \"v3\", \"v3_a\", \"f\" },\n+                        { \"\", \"_a\", \"g\" },\n+                        { \"\", \"_b\", \"h\" },\n+                        { new EvalError(\"error\"), null, \"i\" },\n+                        { \"v1\", \"v1_b\", \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testTransformIdentity() throws Exception {\n+        TextTransformOperation operation = new TextTransformOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:value\",\n+                OnError.SetToBlank,\n+                false, 0);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testTransformNull() throws Exception {\n+        TextTransformOperation operation = new TextTransformOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:null\",\n+                OnError.SetToBlank,\n+                false, 0);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", null, \"d\" },\n+                        { \"v3\", null, \"f\" },\n+                        { \"\", null, \"g\" },\n+                        { \"\", null, \"h\" },\n+                        { new EvalError(\"error\"), null, \"i\" },\n+                        { \"v1\", null, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testTransformColumnInRecordsMode() throws Exception {\n+        TextTransformOperation operation = new TextTransformOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:cells[\\\"foo\\\"].value+'_'+row.record.rowCount\",\n+                OnError.SetToBlank,\n+                false, 0);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"v1_1\", \"d\" },\n+                        { \"v3\", \"v3_4\", \"f\" },\n+                        { \"\", \"_4\", \"g\" },\n+                        { \"\", \"_4\", \"h\" },\n+                        { new EvalError(\"error\"), null, \"i\" },\n+                        { \"v1\", \"v1_1\", \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testTransformColumnNonLocalOperationInRowsMode() throws Exception {\n+        TextTransformOperation operation = new TextTransformOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:value + '_' + facetCount(value, 'value', 'bar')\",\n+                OnError.SetToBlank,\n+                false, 0);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a_4\", \"d\" },\n+                        { \"v3\", \"a_4\", \"f\" },\n+                        { \"\", \"a_4\", \"g\" },\n+                        { \"\", \"b_2\", \"h\" },\n+                        { new EvalError(\"error\"), \"a_4\", \"i\" },\n+                        { \"v1\", \"b_2\", \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+}", "@@ -6,2 +5,0 @@ import java.io.Serializable;\n-import org.testng.annotations.AfterMethod;\n-import org.testng.annotations.BeforeMethod;", "@@ -11 +8,0 @@ import org.testng.annotations.Test;\n-import com.google.refine.ProjectManager;", "@@ -15,0 +13 @@ import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.util.TestUtils;", "@@ -19,2 +16,0 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-    Project project = null;\n-", "@@ -26,3 +22,22 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-    @BeforeMethod\n-    public void setUp() {\n-        project = createProject(\n+    @Test\n+    public void serializeTransposeColumnsIntoRowsTestsFixedLength() throws Exception {\n+        String json = \"{\" +\n+                \"  \\\"columnCount\\\" : 2,\" +\n+                \"  \\\"combinedColumnName\\\" : \\\"b\\\",\" +\n+                \"  \\\"description\\\" : \\\"Transpose cells in 2 columns(s) starting with b 1 into rows in one new column named b\\\",\" +\n+                \"  \\\"fillDown\\\" : false,\" +\n+                \"  \\\"ignoreBlankCells\\\" : true,\" +\n+                \"  \\\"keyColumnName\\\" : null,\" +\n+                \"  \\\"op\\\" : \\\"core/transpose-columns-into-rows\\\",\" +\n+                \"  \\\"prependColumnName\\\" : false,\" +\n+                \"  \\\"separator\\\" : null,\" +\n+                \"  \\\"startColumnName\\\" : \\\"b 1\\\",\" +\n+                \"  \\\"valueColumnName\\\" : null\" +\n+                \"}\";\n+        TestUtils.isSerializedTo(new TransposeColumnsIntoRowsOperation(\n+                \"b 1\", 2, true, false, \"b\", false, null), json);\n+    }\n+\n+    @Test\n+    public void testCreateHistoryEntry_transposeIntoOneColumn_removeRowForNullOrEmptyCell() throws Exception {\n+        Project project = createProject(", "@@ -34,0 +50,15 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n+\n+        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\"num1\", -1, true, false, \"a\", true, \":\");\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"a\" },\n+                new Serializable[][] {\n+                        { \"num1:2\" },\n+                        { \"num2:3\" },\n+                        { \"num1:6\" },\n+                        { \"num1:5\" },\n+                        { \"num2:9\" },\n+                });\n+        assertProjectEquals(project, expectedProject);", "@@ -37,3 +67,28 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-    @AfterMethod\n-    public void tearDown() {\n-        ProjectManager.singleton.deleteProject(project.id);\n+    /**\n+     * This shows how the transpose columns into rows operation can, in certain cases, be an inverse to the transpose\n+     * rows into columns operation.\n+     */\n+    @Test\n+    public void testTransposeBackToRecords() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"a\", \"b 1\", \"b 2\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"5\", \"3\" },\n+                        { \"7\", \"8\", \"11\", \"9\" }\n+                });\n+\n+        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\n+                \"b 1\", 2, true, false, \"b\", false, null);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"a\", \"b\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"3\" },\n+                        { null, \"5\", null },\n+                        { \"7\", \"8\", \"9\" },\n+                        { null, \"11\", null }\n+                });\n+\n+        assertProjectEquals(project, expectedProject);", "@@ -43,2 +98,65 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-    public void testCreateHistoryEntry_transposeIntoOneColumn_removeRowForNullOrEmptyCell() throws Exception {\n-        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\"num1\", -1, true, false, \"a\", true, \":\");\n+    public void testTransposeBackToRecordsNoLimit() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"a\", \"b 1\", \"b 2\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"5\", \"3\" },\n+                        { \"7\", \"8\", \"11\", \"9\" }\n+                });\n+\n+        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\n+                \"b 1\", 0, true, false, \"b\", false, null);\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"a\", \"b\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\" },\n+                        { null, \"5\" },\n+                        { null, \"3\" },\n+                        { \"7\", \"8\", },\n+                        { null, \"11\" },\n+                        { null, \"9\" }\n+                });\n+\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testTransposeBackToRecordsKeyValue() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"a\", \"b 1\", \"b 2\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"5\", \"3\" },\n+                        { \"7\", \"8\", \"11\", \"9\" }\n+                });\n+\n+        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\n+                \"b 1\", 2, true, false, \"key\", \"value\");\n+\n+        runOperation(op, project);\n+\n+        Project expectedProject = createProject(\n+                new String[] { \"a\", \"key\", \"value\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"b 1\", \"2\", \"3\" },\n+                        { null, \"b 2\", \"5\", null },\n+                        { \"7\", \"b 1\", \"8\", \"9\" },\n+                        { null, \"b 2\", \"11\", null }\n+                });\n+\n+        assertProjectEquals(project, expectedProject);\n+    }\n+\n+    @Test\n+    public void testBlankValues() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"num1\", \"num2\" },\n+                new Serializable[][] {\n+                        { \"2\", \"3\" },\n+                        { \"6\", \"\", },\n+                        { \"5\", \"9\" }\n+                });\n+\n+        AbstractOperation op = new TransposeColumnsIntoRowsOperation(\n+                \"num1\", -1, true, false, \"a\", true, \":\");", "@@ -55 +173 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n-                        { \"num2:9\" },\n+                        { \"num2:9\" }", "@@ -56,0 +175 @@ public class TransposeColumnsIntoRowsOperationTest extends RefineTest {\n+\n--- /dev/null", "@@ -0,0 +1,124 @@\n+/*\n+\n+Copyright 2010, Google Inc.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+    * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+*/\n+\n+package com.google.refine.operations.cell;\n+\n+import java.io.Serializable;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.model.Project;\n+import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.util.ParsingUtilities;\n+import com.google.refine.util.TestUtils;\n+\n+public class TransposeRowsIntoColumnsOperationTests extends RefineTest {\n+\n+    Project project;\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+        OperationRegistry.registerOperation(getCoreModule(), \"transpose-rows-into-columns\", TransposeRowsIntoColumnsOperation.class);\n+    }\n+\n+    @BeforeMethod\n+    public void setUpGrid() {\n+        project = createProject(\n+                new String[] { \"a\", \"b\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"3\" },\n+                        { \"4\", \"5\", \"6\" },\n+                        { \"7\", \"8\", \"9\" },\n+                        { \"10\", \"11\", \"12\" }\n+                });\n+    }\n+\n+    @Test\n+    public void testTransposeRowsIntoColumnsOperation() throws Exception {\n+        String json = \"{\\\"op\\\":\\\"core/transpose-rows-into-columns\\\",\"\n+                + \"\\\"description\\\":\\\"Transpose every 3 cells in column start column into separate columns\\\",\"\n+                + \"\\\"columnName\\\":\\\"start column\\\",\"\n+                + \"\\\"rowCount\\\":3}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, TransposeRowsIntoColumnsOperation.class), json);\n+    }\n+\n+    @Test\n+    public void testTransposeRowsIntoColumns() throws Exception {\n+        TransposeRowsIntoColumnsOperation operation = new TransposeRowsIntoColumnsOperation(\"b\", 2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"a\", \"b 1\", \"b 2\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"5\", \"3\" },\n+                        { \"4\", null, null, \"6\" },\n+                        { \"7\", \"8\", \"11\", \"9\" },\n+                        { \"10\", null, null, \"12\" }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testTransposeRecordsIntoRows() throws Exception {\n+        Project withRecords = createProject(\n+                new String[] { \"a\", \"b\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"3\" },\n+                        { null, \"5\", null },\n+                        { \"7\", \"8\", \"9\" },\n+                        { null, \"11\", null }\n+                });\n+\n+        TransposeRowsIntoColumnsOperation operation = new TransposeRowsIntoColumnsOperation(\"b\", 2);\n+\n+        runOperation(operation, withRecords);\n+\n+        Project expected = createProject(\n+                new String[] { \"a\", \"b 1\", \"b 2\", \"c\" },\n+                new Serializable[][] {\n+                        { \"1\", \"2\", \"5\", \"3\" },\n+                        { \"7\", \"8\", \"11\", \"9\" }\n+                });\n+\n+        assertProjectEquals(withRecords, expected);\n+    }\n+\n+}\n+++ /dev/null", "@@ -1,63 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.operations.cell;\n-\n-import org.slf4j.LoggerFactory;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.RefineTest;\n-import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.util.ParsingUtilities;\n-import com.google.refine.util.TestUtils;\n-\n-public class TransposeTests extends RefineTest {\n-\n-    @Override\n-    @BeforeTest\n-    public void init() {\n-        logger = LoggerFactory.getLogger(this.getClass());\n-        OperationRegistry.registerOperation(getCoreModule(), \"transpose-rows-into-columns\", TransposeRowsIntoColumnsOperation.class);\n-    }\n-\n-    @Test\n-    public void testTransposeRowsIntoColumnsOperation() throws Exception {\n-        String json = \"{\\\"op\\\":\\\"core/transpose-rows-into-columns\\\",\"\n-                + \"\\\"description\\\":\\\"Transpose every 3 cells in column start column into separate columns\\\",\"\n-                + \"\\\"columnName\\\":\\\"start column\\\",\"\n-                + \"\\\"rowCount\\\":3}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, TransposeRowsIntoColumnsOperation.class), json);\n-    }\n-\n-}", "@@ -29,0 +30,4 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,7 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.Project;\n+import com.google.refine.operations.OnError;", "@@ -39,0 +51,2 @@ public class ColumnAdditionOperationTests extends RefineTest {\n+    protected Project project;\n+", "@@ -44,0 +58,13 @@ public class ColumnAdditionOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+    }\n+", "@@ -54,0 +81,193 @@ public class ColumnAdditionOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testAddColumnRowsMode() throws Exception {\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:cells[\\\"foo\\\"].value+'_'+value\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"v1_a\", \"d\" },\n+                        { \"v3\", \"a\", \"v3_a\", \"f\" },\n+                        { \"\", \"a\", \"_a\", \"g\" },\n+                        { \"\", \"b\", \"_b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", null, \"i\" },\n+                        { \"v1\", \"b\", \"v1_b\", \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRowsModeWithFacet() throws Exception {\n+        ListFacet.ListFacetConfig facetConfig = new ListFacet.ListFacetConfig();\n+        facetConfig.name = \"my facet\";\n+        facetConfig.expression = \"grel:value\";\n+        facetConfig.columnName = \"bar\";\n+        facetConfig.selection = Collections.singletonList(new DecoratedValue(\"a\", \"a\"));\n+        EngineConfig engineConfig = new EngineConfig(Collections.singletonList(facetConfig), Mode.RowBased);\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                engineConfig,\n+                \"bar\",\n+                \"grel:cells[\\\"foo\\\"].value+'_'+value\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"v1_a\", \"d\" },\n+                        { \"v3\", \"a\", \"v3_a\", \"f\" },\n+                        { \"\", \"a\", \"_a\", \"g\" },\n+                        { \"\", \"b\", null, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", null, \"i\" },\n+                        { \"v1\", \"b\", null, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRecordsMode() throws Exception {\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"record-based\\\",\\\"facets\\\":[]}\"),\n+                \"bar\",\n+                \"grel:length(row.record.cells['hello'])\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", 1, \"d\" },\n+                        { \"v3\", \"a\", 4, \"f\" },\n+                        { \"\", \"a\", 4, \"g\" },\n+                        { \"\", \"b\", 4, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", 4, \"i\" },\n+                        { \"v1\", \"b\", 1, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRecordsModeWithFacet() throws Exception {\n+        ListFacet.ListFacetConfig facetConfig = new ListFacet.ListFacetConfig();\n+        facetConfig.name = \"my facet\";\n+        facetConfig.expression = \"grel:value\";\n+        facetConfig.columnName = \"bar\";\n+        facetConfig.selection = Collections.singletonList(new DecoratedValue(\"b\", \"b\"));\n+        EngineConfig engineConfig = new EngineConfig(Collections.singletonList(facetConfig), Mode.RecordBased);\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                engineConfig,\n+                \"bar\",\n+                \"grel:length(row.record.cells['hello'])\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", null, \"d\" },\n+                        { \"v3\", \"a\", 4, \"f\" },\n+                        { \"\", \"a\", 4, \"g\" },\n+                        { \"\", \"b\", 4, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", 4, \"i\" },\n+                        { \"v1\", \"b\", 1, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRowsModeNotLocal() throws Exception {\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased),\n+                \"bar\",\n+                \"grel:facetCount(value, 'value', 'bar')\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", 4, \"d\" },\n+                        { \"v3\", \"a\", 4, \"f\" },\n+                        { \"\", \"a\", 4, \"g\" },\n+                        { \"\", \"b\", 2, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", 4, \"i\" },\n+                        { \"v1\", \"b\", 2, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRecordsModeNotLocal() throws Exception {\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RecordBased),\n+                \"bar\",\n+                \"grel:facetCount(value, 'value', 'bar')\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", 4, \"d\" },\n+                        { \"v3\", \"a\", 4, \"f\" },\n+                        { \"\", \"a\", 4, \"g\" },\n+                        { \"\", \"b\", 2, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", 4, \"i\" },\n+                        { \"v1\", \"b\", 2, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testAddColumnRecordsModeNotLocalWithFacet() throws Exception {\n+        ListFacet.ListFacetConfig facetConfig = new ListFacet.ListFacetConfig();\n+        facetConfig.name = \"my facet\";\n+        facetConfig.expression = \"grel:value\";\n+        facetConfig.columnName = \"bar\";\n+        facetConfig.selection = Collections.singletonList(new DecoratedValue(\"b\", \"b\"));\n+        EngineConfig engineConfig = new EngineConfig(Collections.singletonList(facetConfig), Mode.RecordBased);\n+        ColumnAdditionOperation operation = new ColumnAdditionOperation(\n+                engineConfig,\n+                \"bar\",\n+                \"grel:facetCount(value, 'value', 'bar')\",\n+                OnError.SetToBlank,\n+                \"newcolumn\",\n+                2);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"newcolumn\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", null, \"d\" },\n+                        { \"v3\", \"a\", 4, \"f\" },\n+                        { \"\", \"a\", 4, \"g\" },\n+                        { \"\", \"b\", 2, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", 4, \"i\" },\n+                        { \"v1\", \"b\", 2, \"j\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,3 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +37,2 @@ import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.Project;", "@@ -39,0 +45,15 @@ public class ColumnMoveOperationTests extends RefineTest {\n+    protected Project project;\n+\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+    }\n+", "@@ -52,0 +73,58 @@ public class ColumnMoveOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testForward() throws Exception {\n+        ColumnMoveOperation operation = new ColumnMoveOperation(\"foo\", 1);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"bar\", \"foo\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"v1\", \"d\" },\n+                        { \"a\", \"v3\", \"f\" },\n+                        { \"a\", \"\", \"g\" },\n+                        { \"b\", \"\", \"h\" },\n+                        { \"a\", new EvalError(\"error\"), \"i\" },\n+                        { \"b\", \"v1\", \"j\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testSamePosition() throws Exception {\n+        ColumnMoveOperation SUT = new ColumnMoveOperation(\"bar\", 1);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testBackward() throws Exception {\n+        ColumnMoveOperation SUT = new ColumnMoveOperation(\"hello\", 1);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"hello\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"d\", \"a\" },\n+                        { \"v3\", \"f\", \"a\" },\n+                        { \"\", \"g\", \"a\" },\n+                        { \"\", \"h\", \"b\" },\n+                        { new EvalError(\"error\"), \"i\", \"a\" },\n+                        { \"v1\", \"j\", \"b\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -29,0 +30,3 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +37,2 @@ import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.Project;", "@@ -39,0 +45,15 @@ public class ColumnRemovalOperationTests extends RefineTest {\n+    protected Project project;\n+\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+    }\n+", "@@ -51,0 +72,19 @@ public class ColumnRemovalOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testRemoval() throws Exception {\n+        ColumnRemovalOperation SUT = new ColumnRemovalOperation(\"foo\");\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"d\" },\n+                        { \"a\", \"f\" },\n+                        { \"a\", \"g\" },\n+                        { \"b\", \"h\" },\n+                        { \"a\", \"i\" },\n+                        { \"b\", \"j\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,3 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +37 @@ import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;", "@@ -34,0 +39 @@ import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Project;", "@@ -40,0 +46,15 @@ public class ColumnRenameOperationTests extends RefineTest {\n+    protected Project project;\n+\n+    @BeforeMethod\n+    public void setUpInitialState() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" }\n+                });\n+    }\n+", "@@ -54,0 +75,19 @@ public class ColumnRenameOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testRename() throws Exception {\n+        ColumnRenameOperation SUT = new ColumnRenameOperation(\"foo\", \"newfoo\");\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"newfoo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"v1\", \"a\", \"d\" },\n+                        { \"v3\", \"a\", \"f\" },\n+                        { \"\", \"a\", \"g\" },\n+                        { \"\", \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"i\" },\n+                        { \"v1\", \"b\", \"j\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -95,0 +96,15 @@ public class ColumnReorderOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testReorder() throws Exception {\n+        ColumnReorderOperation SUT = new ColumnReorderOperation(Arrays.asList(\"c\", \"b\"));\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"c\", \"b\" },\n+                new Serializable[][] {\n+                        { \"e\", \"d\" },\n+                        { \"g\", \"f\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,4 @@ package com.google.refine.operations.column;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,5 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.expr.EvalError;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Project;", "@@ -39,0 +49,16 @@ public class ColumnSplitOperationTests extends RefineTest {\n+    protected Project project;\n+\n+    @BeforeMethod\n+    public void createSplitProject() {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"aBcDe\", \"d12t\" },\n+                        { \",,d\", \"aFHiJ\", \"f34t\" },\n+                        { \",,,,\", \"aT23L\", \"g18te\" },\n+                        { 12, \"b\", \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"\" },\n+                        { \"12,true\", \"b\", \"g1\" }\n+                });\n+    }\n+", "@@ -81,0 +107,119 @@ public class ColumnSplitOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testSeparator() throws Exception {\n+        AbstractOperation SUT = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"foo\", false, false, \",\",\n+                false, 0);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"foo 1\", \"foo 2\", \"foo 3\", \"foo 4\", \"foo 5\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"a\", \"b\", \"c\", null, null, \"aBcDe\", \"d12t\" },\n+                        { \",,d\", \"\", \"\", \"d\", null, null, \"aFHiJ\", \"f34t\" },\n+                        { \",,,,\", \"\", \"\", \"\", \"\", \"\", \"aT23L\", \"g18te\" },\n+                        { 12, \"12\", null, null, null, null, \"b\", \"h\" },\n+                        { new EvalError(\"error\"), null, null, null, null, null, \"a\", \"\" },\n+                        { \"12,true\", \"12\", \"true\", null, null, null, \"b\", \"g1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testSeparatorMaxColumns() throws Exception {\n+        AbstractOperation SUT = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"foo\", false, false, \",\",\n+                false, 2);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"foo 1\", \"foo 2\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"a\", \"b,c\", \"aBcDe\", \"d12t\" },\n+                        { \",,d\", \"\", \",d\", \"aFHiJ\", \"f34t\" },\n+                        { \",,,,\", \"\", \",,,\", \"aT23L\", \"g18te\" },\n+                        { 12, \"12\", null, \"b\", \"h\" },\n+                        { new EvalError(\"error\"), null, null, \"a\", \"\" },\n+                        { \"12,true\", \"12\", \"true\", \"b\", \"g1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testSeparatorDetectType() throws Exception {\n+        AbstractOperation SUT = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"foo\", true, false, \",\",\n+                false, 2);\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"foo 1\", \"foo 2\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"a\", \"b,c\", \"aBcDe\", \"d12t\" },\n+                        { \",,d\", \"\", \",d\", \"aFHiJ\", \"f34t\" },\n+                        { \",,,,\", \"\", \",,,\", \"aT23L\", \"g18te\" },\n+                        { 12, 12L, null, \"b\", \"h\" },\n+                        { new EvalError(\"error\"), null, null, \"a\", \"\" },\n+                        { \"12,true\", 12L, \"true\", \"b\", \"g1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testSeparatorRemoveColumn() throws Exception {\n+        AbstractOperation SUT = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"foo\", true, true, \",\",\n+                false, 2);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo 1\", \"foo 2\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b,c\", \"aBcDe\", \"d12t\" },\n+                        { \"\", \",d\", \"aFHiJ\", \"f34t\" },\n+                        { \"\", \",,,\", \"aT23L\", \"g18te\" },\n+                        { 12L, null, \"b\", \"h\" },\n+                        { null, null, \"a\", \"\" },\n+                        { 12L, \"true\", \"b\", \"g1\" }, // we currently only parse numbers, curiously\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testRegex() throws Exception {\n+        AbstractOperation SUT = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\", false, false,\n+                \"[A-Z]\", true, 0);\n+\n+        runOperation(SUT, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"bar 1\", \"bar 2\", \"bar 3\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"aBcDe\", \"a\", \"c\", \"e\", \"d12t\" },\n+                        { \",,d\", \"aFHiJ\", \"a\", \"\", \"i\", \"f34t\" },\n+                        { \",,,,\", \"aT23L\", \"a\", \"23\", null, \"g18te\" },\n+                        { 12, \"b\", \"b\", null, null, \"h\" },\n+                        { new EvalError(\"error\"), \"a\", \"a\", null, null, \"\" },\n+                        { \"12,true\", \"b\", \"b\", null, null, \"g1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testLengths() throws Exception {\n+        AbstractOperation operation = new ColumnSplitOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"hello\", false,\n+                false, new int[] { 1, 2 });\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\", \"hello\", \"hello 1\", \"hello 2\" },\n+                new Serializable[][] {\n+                        { \"a,b,c\", \"aBcDe\", \"d12t\", \"d\", \"12\" },\n+                        { \",,d\", \"aFHiJ\", \"f34t\", \"f\", \"34\" },\n+                        { \",,,,\", \"aT23L\", \"g18te\", \"g\", \"18\" },\n+                        { 12, \"b\", \"h\", \"h\", \"\" },\n+                        { new EvalError(\"error\"), \"a\", \"\", null, null },\n+                        { \"12,true\", \"b\", \"g1\", \"g\", \"1\" },\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n"]}, {"id": "3b8991b39f29aa67530ec6eb474afa4b905d8bc7", "message": "Second batch of operation tests (#6466)\n\n* Expand recon operation test suite\r\n\r\n* Expand row operation test suite", "patch": ["@@ -47,0 +48 @@ import java.util.ArrayList;\n+import java.util.Arrays;", "@@ -79,0 +81,2 @@ import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;\n+import com.google.refine.model.ReconCandidate;", "@@ -281,0 +285,25 @@ public class RefineTest {\n+    protected Recon testRecon(String name, String id, Recon.Judgment judgment) {\n+        return testRecon(name, id, judgment, 1234L);\n+    }\n+\n+    protected Recon testRecon(String name, String id, Recon.Judgment judgment, long internalId) {\n+        List<ReconCandidate> candidates = Arrays.asList(\n+                new ReconCandidate(id, name + \" 1\", null, 98.0),\n+                new ReconCandidate(id + \"2\", name + \" 2\", null, 76.0));\n+        ReconCandidate match = Recon.Judgment.Matched.equals(judgment) ? candidates.get(0) : null;\n+        return new Recon(\n+                internalId,\n+                3478L,\n+                judgment,\n+                match,\n+                null,\n+                new Object[3],\n+                candidates,\n+                \"http://my.service.com/api\",\n+                \"http://my.service.com/space\",\n+                \"http://my.service.com/schema\",\n+                \"batch\",\n+                1,\n+                -1);\n+    }\n+", "@@ -529 +557,6 @@ public class RefineTest {\n-                            String.format(\"mismatching cells in row %d, column '%s'\", i, actual.columnModel.columns.get(j)));\n+                            String.format(\"mismatching cell values in row %d, column '%s'\", i, actual.columnModel.columns.get(j)));\n+                    assertEquals(\n+                            actualCell == null ? null : actualCell.recon,\n+                            expectedCell == null ? null : expectedCell.recon,\n+                            String.format(\"mismatching recon in row %d, column '%s'\", i, actual.columnModel.columns.get(j)));\n+", "@@ -29,0 +30,4 @@ package com.google.refine.operations.recon;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,6 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;", "@@ -39,0 +50,2 @@ public class ReconClearSimilarCellsOperationTests extends RefineTest {\n+    Project project;\n+", "@@ -44,0 +57,11 @@ public class ReconClearSimilarCellsOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched)) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) },\n+                        { \"d\", new Cell(\"b\", testRecon(\"e2\", \"h2\", Recon.Judgment.Matched)) },\n+                });\n+    }\n+", "@@ -53,0 +77,18 @@ public class ReconClearSimilarCellsOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testReconClearSimilarCells() throws Exception {\n+        AbstractOperation operation = new ReconClearSimilarCellsOperation(new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\",\n+                \"b\");\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", null) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) },\n+                        { \"d\", new Cell(\"b\", null) },\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,4 @@ package com.google.refine.operations.recon;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,6 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;", "@@ -39,0 +50,2 @@ public class ReconCopyAcrossColumnsOperationTests extends RefineTest {\n+    Project project;\n+", "@@ -44,0 +57,11 @@ public class ReconCopyAcrossColumnsOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"d\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched)) },\n+                        { \"b\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) }\n+                });\n+    }\n+", "@@ -55,0 +79,25 @@ public class ReconCopyAcrossColumnsOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testReconCopyAcrossColumns() throws Exception {\n+        AbstractOperation operation = new ReconCopyAcrossColumnsOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased),\n+                \"bar\",\n+                new String[] { \"foo\" },\n+                new String[] { \"matched\", \"none\" },\n+                true);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)),\n+                                new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched)) },\n+                        { new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched)),\n+                                new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -29,0 +30,4 @@ package com.google.refine.operations.recon;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,6 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;", "@@ -39,0 +50,2 @@ public class ReconDiscardJudgmentsOperationTests extends RefineTest {\n+    Project project;\n+", "@@ -44,0 +57,10 @@ public class ReconDiscardJudgmentsOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched, 1234L)) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None, 5678L)) }\n+                });\n+    }\n+", "@@ -58,0 +81,41 @@ public class ReconDiscardJudgmentsOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testReconDiscardJudgmentsOperation() throws Exception {\n+        AbstractOperation operation = new ReconDiscardJudgmentsOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\", false);\n+\n+        runOperation(operation, project);\n+\n+        long historyEntryId = project.history.getLastPastEntries(1).get(0).id;\n+        Recon reconE = testRecon(\"e\", \"h\", Recon.Judgment.None, project.rows.get(0).getCell(1).recon.id);\n+        reconE.features = new Object[] { null, null, null, null };\n+        reconE.judgmentAction = \"mass\";\n+        reconE.judgmentHistoryEntry = historyEntryId;\n+        Recon reconB = testRecon(\"b\", \"j\", Recon.Judgment.None, project.rows.get(1).getCell(1).recon.id);\n+        reconB.features = new Object[] { null, null, null, null };\n+        reconB.judgmentAction = \"mass\";\n+        reconB.judgmentHistoryEntry = historyEntryId;\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", reconE) },\n+                        { \"c\", new Cell(\"d\", reconB) }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testClearReconOperation() throws Exception {\n+        AbstractOperation operation = new ReconDiscardJudgmentsOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\", true);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\" },\n+                        { \"c\", \"d\" }\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -30 +30,10 @@ package com.google.refine.operations.recon;\n-import org.testng.annotations.BeforeSuite;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;", "@@ -33,0 +43,10 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Column;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;\n+import com.google.refine.model.Recon.Judgment;\n+import com.google.refine.model.recon.ReconConfig;\n+import com.google.refine.model.recon.StandardReconConfig;", "@@ -40,2 +59,12 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n-    @BeforeSuite\n-    public void registerOperation() {\n+    static final EngineConfig ENGINE_CONFIG = EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\"}}\");\n+\n+    Project project;\n+    ReconConfig reconConfig;\n+    String service = \"http://my.service.com/api\";\n+    String identifierSpace = \"http://my.service.com/identifierSpace\";\n+    String schemaSpace = \"http://my.service.com/schemaSpace\";\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());", "@@ -44,0 +74,33 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() throws Exception {\n+        reconConfig = new StandardReconConfig(service,\n+                identifierSpace,\n+                schemaSpace,\n+                null,\n+                true,\n+                10,\n+                Collections.emptyList(),\n+                5);\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched, 1L)) },\n+                        { \"c\", new Cell(\"b\", testRecon(\"x\", \"p\", Recon.Judgment.New, 2L)) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) },\n+                        { \"d\", \"b\" }\n+                });\n+        project.columnModel.columns.get(1).setReconConfig(reconConfig);\n+    }\n+\n+    @Test\n+    public void serializeReconJudgeSimilarCellsOperation() throws IOException {\n+        String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"\n+                + \"\\\"description\\\":\\\"Mark to create one single new item for all cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"\n+                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"\n+                + \"\\\"columnName\\\":\\\"A\\\",\"\n+                + \"\\\"similarValue\\\":\\\"foo\\\",\"\n+                + \"\\\"judgment\\\":\\\"new\\\",\"\n+                + \"\\\"shareNewTopics\\\":true}\";\n+        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);\n+    }\n+", "@@ -46 +108 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n-    public void serializeReconJudgeSimilarCellsOperation() throws Exception {\n+    public void serializeReconJudgeSimilarCellsOperationMatch() throws IOException {", "@@ -48 +110 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n-                + \"\\\"description\\\":\\\"Match item Unicef Indonesia (Q7884717) for cells containing \\\\\\\"UNICEF Indonesia\\\\\\\" in column organization_name\\\",\"\n+                + \"\\\"description\\\":\\\"Match item Douglas Adams (Q42) for cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"", "@@ -50,2 +112,2 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n-                + \"\\\"columnName\\\":\\\"organization_name\\\",\"\n-                + \"\\\"similarValue\\\":\\\"UNICEF Indonesia\\\",\"\n+                + \"\\\"columnName\\\":\\\"A\\\",\"\n+                + \"\\\"similarValue\\\":\\\"foo\\\",\"", "@@ -53,2 +115,3 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n-                + \"\\\"match\\\":{\\\"id\\\":\\\"Q7884717\\\",\\\"name\\\":\\\"Unicef Indonesia\\\",\\\"score\\\":71.42857142857143,\\\"types\\\":[\\\"Q43229\\\"]},\"\n-                + \"\\\"shareNewTopics\\\":false}\";\n+                + \"\\\"match\\\":{\\\"id\\\":\\\"Q42\\\",\\\"name\\\":\\\"Douglas Adams\\\",\\\"types\\\":[\\\"Q5\\\"],\\\"score\\\":85},\"\n+                + \"\\\"shareNewTopics\\\":false\"\n+                + \"}\";", "@@ -56,0 +120,62 @@ public class ReconJudgeSimilarCellsOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testMarkNewTopics() throws Exception {\n+        Project project = createProject(\n+                new String[] { \"A\", \"B\" },\n+                new Serializable[][] {\n+                        { \"foo\", \"bar\" },\n+                        { \"alpha\", \"beta\" }\n+                });\n+\n+        Column column = project.columnModel.columns.get(0);\n+        ReconConfig config = new StandardReconConfig(\n+                \"http://my.database/recon_service\",\n+                \"http://my.database/entity/\",\n+                \"http://my.database/schema/\",\n+                null,\n+                null,\n+                true, 10, Collections.emptyList());\n+        column.setReconConfig(config);\n+\n+        AbstractOperation op = new ReconJudgeSimilarCellsOperation(\n+                ENGINE_CONFIG,\n+                \"A\",\n+                \"foo\",\n+                Recon.Judgment.New,\n+                null, true);\n+\n+        runOperation(op, project);\n+\n+        Cell cell = project.rows.get(0).cells.get(0);\n+        assertEquals(Recon.Judgment.New, cell.recon.judgment);\n+        assertEquals(\"http://my.database/entity/\", cell.recon.identifierSpace);\n+        assertNull(project.rows.get(1).cells.get(0).recon);\n+    }\n+\n+    private Recon newRecon(long historyEntryId, long id, int batchSize) {\n+        Recon recon = new Recon(id, historyEntryId, Judgment.New, null, null, null, null,\n+                service, identifierSpace, schemaSpace, \"similar\", batchSize, -1);\n+        recon.candidates = null;\n+        return recon;\n+    }\n+\n+    @Test\n+    public void testReconJudgeSimilarCellsShareTopics() throws Exception {\n+        AbstractOperation operation = new ReconJudgeSimilarCellsOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\", \"b\", Judgment.New, null, true);\n+\n+        runOperation(operation, project);\n+\n+        long historyEntryId = project.history.getLastPastEntries(1).get(0).id;\n+        long commonReconId = project.rows.get(0).getCell(1).recon.id;\n+\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", newRecon(historyEntryId, commonReconId, 3)) },\n+                        { \"c\", new Cell(\"b\", newRecon(historyEntryId, commonReconId, 3)) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None)) },\n+                        { \"d\", new Cell(\"b\", newRecon(historyEntryId, commonReconId, 3)) }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+++ /dev/null", "@@ -1,124 +0,0 @@\n-/*******************************************************************************\n- * Copyright (C) 2018, OpenRefine contributors\n- * All rights reserved.\n- * \n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice,\n- *    this list of conditions and the following disclaimer in the documentation\n- *    and/or other materials provided with the distribution.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n- * POSSIBILITY OF SUCH DAMAGE.\n- ******************************************************************************/\n-\n-package com.google.refine.operations.recon;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNull;\n-\n-import java.io.IOException;\n-import java.io.Serializable;\n-import java.util.Collections;\n-\n-import org.slf4j.LoggerFactory;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.RefineTest;\n-import com.google.refine.browsing.EngineConfig;\n-import com.google.refine.model.AbstractOperation;\n-import com.google.refine.model.Cell;\n-import com.google.refine.model.Column;\n-import com.google.refine.model.Project;\n-import com.google.refine.model.Recon;\n-import com.google.refine.model.recon.ReconConfig;\n-import com.google.refine.model.recon.StandardReconConfig;\n-import com.google.refine.operations.OperationRegistry;\n-import com.google.refine.util.ParsingUtilities;\n-import com.google.refine.util.TestUtils;\n-\n-public class ReconJudgeSimilarCellsTests extends RefineTest {\n-\n-    static final EngineConfig ENGINE_CONFIG = EngineConfig.reconstruct(\"{\\\"mode\\\":\\\"row-based\\\"}}\");\n-\n-    @Override\n-    @BeforeTest\n-    public void init() {\n-        logger = LoggerFactory.getLogger(this.getClass());\n-        OperationRegistry.registerOperation(getCoreModule(), \"recon-judge-similar-cells\", ReconJudgeSimilarCellsOperation.class);\n-    }\n-\n-    @Test\n-    public void serializeReconJudgeSimilarCellsOperation() throws IOException {\n-        String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"\n-                + \"\\\"description\\\":\\\"Mark to create one single new item for all cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"\n-                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"\n-                + \"\\\"columnName\\\":\\\"A\\\",\"\n-                + \"\\\"similarValue\\\":\\\"foo\\\",\"\n-                + \"\\\"judgment\\\":\\\"new\\\",\"\n-                + \"\\\"shareNewTopics\\\":true}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);\n-    }\n-\n-    @Test\n-    public void serializeReconJudgeSimilarCellsOperationMatch() throws IOException {\n-        String json = \"{\\\"op\\\":\\\"core/recon-judge-similar-cells\\\",\"\n-                + \"\\\"description\\\":\\\"Match item Douglas Adams (Q42) for cells containing \\\\\\\"foo\\\\\\\" in column A\\\",\"\n-                + \"\\\"engineConfig\\\":{\\\"mode\\\":\\\"row-based\\\",\\\"facets\\\":[]},\"\n-                + \"\\\"columnName\\\":\\\"A\\\",\"\n-                + \"\\\"similarValue\\\":\\\"foo\\\",\"\n-                + \"\\\"judgment\\\":\\\"matched\\\",\"\n-                + \"\\\"match\\\":{\\\"id\\\":\\\"Q42\\\",\\\"name\\\":\\\"Douglas Adams\\\",\\\"types\\\":[\\\"Q5\\\"],\\\"score\\\":85},\"\n-                + \"\\\"shareNewTopics\\\":false\"\n-                + \"}\";\n-        TestUtils.isSerializedTo(ParsingUtilities.mapper.readValue(json, ReconJudgeSimilarCellsOperation.class), json);\n-    }\n-\n-    @Test\n-    public void testMarkNewTopics() throws Exception {\n-        Project project = createProject(\n-                new String[] { \"A\", \"B\" },\n-                new Serializable[][] {\n-                        { \"foo\", \"bar\" },\n-                        { \"alpha\", \"beta\" }\n-                });\n-\n-        Column column = project.columnModel.columns.get(0);\n-        ReconConfig config = new StandardReconConfig(\n-                \"http://my.database/recon_service\",\n-                \"http://my.database/entity/\",\n-                \"http://my.database/schema/\",\n-                null,\n-                null,\n-                true, 10, Collections.emptyList());\n-        column.setReconConfig(config);\n-\n-        AbstractOperation op = new ReconJudgeSimilarCellsOperation(\n-                ENGINE_CONFIG,\n-                \"A\",\n-                \"foo\",\n-                Recon.Judgment.New,\n-                null, true);\n-\n-        runOperation(op, project);\n-\n-        Cell cell = project.rows.get(0).cells.get(0);\n-        assertEquals(Recon.Judgment.New, cell.recon.judgment);\n-        assertEquals(\"http://my.database/entity/\", cell.recon.identifierSpace);\n-        assertNull(project.rows.get(1).cells.get(0).recon);\n-    }\n-}", "@@ -29,0 +30,4 @@ package com.google.refine.operations.recon;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,6 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;", "@@ -39,0 +50,2 @@ public class ReconMatchBestCandidatesOperationTests extends RefineTest {\n+    Project project;\n+", "@@ -44,0 +57,11 @@ public class ReconMatchBestCandidatesOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() throws Exception {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched, 123L)) },\n+                        { \"c\", new Cell(\"b\", testRecon(\"x\", \"p\", Recon.Judgment.New, 456L)) },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None, 789L)) }\n+                });\n+    }\n+", "@@ -57,0 +81,38 @@ public class ReconMatchBestCandidatesOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testReconMatchBestCandidatesOperation() throws Exception {\n+        AbstractOperation operation = new ReconMatchBestCandidatesOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased), \"bar\");\n+\n+        runOperation(operation, project);\n+\n+        long historyEntryId = project.history.getLastPastEntries(1).get(0).id;\n+\n+        Recon reconE = testRecon(\"e\", \"h\", Recon.Judgment.Matched, project.rows.get(0).getCell(1).recon.id);\n+        reconE.features = new Object[] { null, null, null, null };\n+        reconE.judgmentHistoryEntry = historyEntryId;\n+        reconE.matchRank = 0;\n+        reconE.judgmentAction = \"mass\";\n+        Recon reconX = testRecon(\"x\", \"p\", Recon.Judgment.New, project.rows.get(1).getCell(1).recon.id);\n+        reconX.features = new Object[] { null, null, null, null };\n+        reconX.judgmentHistoryEntry = historyEntryId;\n+        reconX.match = reconX.getBestCandidate();\n+        reconX.matchRank = 0;\n+        reconX.judgment = Recon.Judgment.Matched;\n+        reconX.judgmentAction = \"mass\";\n+        Recon reconB = testRecon(\"b\", \"j\", Recon.Judgment.None, project.rows.get(2).getCell(1).recon.id);\n+        reconB.features = new Object[] { null, null, null, null };\n+        reconB.judgmentHistoryEntry = historyEntryId;\n+        reconB.matchRank = 0;\n+        reconB.match = reconB.getBestCandidate();\n+        reconB.judgmentAction = \"mass\";\n+        reconB.judgment = Recon.Judgment.Matched;\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", reconE) },\n+                        { \"c\", new Cell(\"b\", reconX) },\n+                        { \"c\", new Cell(\"d\", reconB) }\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,4 @@ package com.google.refine.operations.recon;\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +38,7 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.Engine.Mode;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.model.AbstractOperation;\n+import com.google.refine.model.Cell;\n+import com.google.refine.model.Project;\n+import com.google.refine.model.Recon;\n+import com.google.refine.model.Recon.Judgment;", "@@ -34,0 +46 @@ import com.google.refine.operations.OperationRegistry;\n+import com.google.refine.operations.recon.ReconMatchSpecificTopicOperation.ReconItem;", "@@ -39,0 +52,2 @@ public class ReconMatchSpecificTopicOperationTests extends RefineTest {\n+    Project project;\n+", "@@ -44,0 +59,11 @@ public class ReconMatchSpecificTopicOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setupInitialState() throws Exception {\n+        project = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", testRecon(\"e\", \"h\", Recon.Judgment.Matched, 1234L)) },\n+                        { \"c\", \"h\" },\n+                        { \"c\", new Cell(\"d\", testRecon(\"b\", \"j\", Recon.Judgment.None, 5678L)) }\n+                });\n+    }\n+", "@@ -66,0 +92,40 @@ public class ReconMatchSpecificTopicOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testMatchSpecificTopicOperation() throws Exception {\n+        ReconItem reconItem = new ReconItem(\"hello\", \"world\", new String[] { \"human\" });\n+        AbstractOperation operation = new ReconMatchSpecificTopicOperation(\n+                new EngineConfig(Collections.emptyList(), Mode.RowBased),\n+                \"bar\", reconItem,\n+                \"http://identifier.space\", \"http://schema.space\");\n+\n+        runOperation(operation, project);\n+\n+        long historyEntryId = project.history.getLastPastEntries(1).get(0).id;\n+\n+        long commonReconId = project.rows.get(1).getCell(1).recon.id;\n+\n+        Recon reconE = testRecon(\"e\", \"h\", Recon.Judgment.Matched, project.rows.get(0).getCell(1).recon.id);\n+        reconE.features = new Object[] { null, null, null, null };\n+        reconE.judgmentHistoryEntry = historyEntryId;\n+        reconE.match = reconItem.getCandidate();\n+        reconE.matchRank = -1;\n+        reconE.judgmentAction = \"mass\";\n+        Recon reconH = new Recon(commonReconId, historyEntryId, Recon.Judgment.Matched, reconItem.getCandidate(), null,\n+                new Object[4], null, null, \"http://identifier.space\", \"http://schema.space\", \"mass\", 1, -1);\n+        reconH.candidates = null;\n+        Recon reconB = testRecon(\"b\", \"j\", Recon.Judgment.None, project.rows.get(2).getCell(1).recon.id);\n+        reconB.features = new Object[] { null, null, null, null };\n+        reconB.judgmentHistoryEntry = historyEntryId;\n+        reconB.match = reconItem.getCandidate();\n+        reconB.matchRank = -1;\n+        reconB.judgmentAction = \"mass\";\n+        reconB.judgment = Recon.Judgment.Matched;\n+        Project expected = createProject(\n+                new String[] { \"foo\", \"bar\" },\n+                new Serializable[][] {\n+                        { \"a\", new Cell(\"b\", reconE) },\n+                        { \"c\", new Cell(\"h\", reconH) },\n+                        { \"c\", new Cell(\"d\", reconB) }\n+                });\n+        assertProjectEquals(project, expected);\n+    }", "@@ -29,0 +30,5 @@ package com.google.refine.operations.recon;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;", "@@ -31,0 +37 @@ import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;", "@@ -40,0 +47 @@ import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;", "@@ -46,0 +54 @@ import com.google.refine.messages.OpenRefineMessage;\n+import com.google.refine.model.Cell;", "@@ -49,0 +58,2 @@ import com.google.refine.model.Recon;\n+import com.google.refine.model.Recon.Judgment;\n+import com.google.refine.model.Row;", "@@ -108,0 +119,15 @@ public class ReconOperationTests extends RefineTest {\n+    private String identifierSpace = \"http://www.wikidata.org/entity/\";\n+    private String schemaSpace = \"http://www.wikidata.org/prop/direct/\";\n+\n+    private Project project = null;\n+    private StandardReconConfig reconConfig = null;\n+    private Row row0 = null;\n+    private Row row1 = null;\n+    private Row row3 = null;\n+    private Row row4 = null;\n+    private Recon recon1 = null;\n+    private Recon recon2 = null;\n+    private Recon recon3 = null;\n+    private ReconJob job1 = null;\n+    private ReconJob job2 = null;\n+    private ReconJob job3 = null;", "@@ -115,0 +141,45 @@ public class ReconOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void setUpDependencies() {\n+        project = createProject(\"test project\",\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { \"value1\" },\n+                        { \"value2\" },\n+                        { \"value1\" },\n+                        { \"value3\" },\n+                        { null }\n+                });\n+\n+        job1 = mock(ReconJob.class, withSettings().serializable());\n+        when(job1.getStringKey()).thenReturn(\"1\");\n+        job2 = mock(ReconJob.class, withSettings().serializable());\n+        when(job2.getStringKey()).thenReturn(\"2\");\n+        job3 = mock(ReconJob.class, withSettings().serializable());\n+        when(job3.getStringKey()).thenReturn(\"3\");\n+\n+        recon1 = new Recon(1234L, identifierSpace, schemaSpace);\n+        recon1.judgment = Judgment.Matched;\n+        recon2 = new Recon(5678L, identifierSpace, schemaSpace);\n+        recon2.judgment = Judgment.None;\n+        recon3 = new Recon(9012L, identifierSpace, schemaSpace);\n+        recon3.judgment = Judgment.Matched;\n+\n+        reconConfig = mock(StandardReconConfig.class, withSettings().serializable());\n+        doReturn(2).when(reconConfig).getBatchSize(anyInt());\n+        // mock identifierSpace, service and schemaSpace\n+        when(reconConfig.batchRecon(eq(Arrays.asList(job1, job2)), anyLong())).thenReturn(Arrays.asList(recon1, recon2));\n+        when(reconConfig.batchRecon(eq(Arrays.asList(job3)), anyLong())).thenReturn(Arrays.asList(recon3));\n+\n+        row0 = project.rows.get(0);\n+        row1 = project.rows.get(1);\n+        row3 = project.rows.get(3);\n+        row4 = project.rows.get(4);\n+\n+        when(reconConfig.createJob(eq(project), eq(0), any(), eq(\"column\"), eq(row0.getCell(0)))).thenReturn(job1);\n+        when(reconConfig.createJob(eq(project), eq(1), any(), eq(\"column\"), eq(row1.getCell(0)))).thenReturn(job2);\n+        when(reconConfig.createJob(eq(project), eq(2), any(), eq(\"column\"), eq(row0.getCell(0)))).thenReturn(job1);\n+        when(reconConfig.createJob(eq(project), eq(3), any(), eq(\"column\"), eq(row3.getCell(0)))).thenReturn(job3);\n+        when(reconConfig.createJob(eq(project), eq(4), any(), eq(\"column\"), eq(row4.getCell(0)))).thenReturn(job3);\n+\n+    }\n+", "@@ -128,0 +199,18 @@ public class ReconOperationTests extends RefineTest {\n+    @Test\n+    public void testWorkingRecon() throws Exception {\n+        ReconOperation operation = new ReconOperation(EngineConfig.reconstruct(\"{}\"), \"column\", reconConfig);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(\n+                new String[] { \"column\" },\n+                new Serializable[][] {\n+                        { new Cell(\"value1\", recon1) },\n+                        { new Cell(\"value2\", recon2) },\n+                        { new Cell(\"value1\", recon1) },\n+                        { new Cell(\"value3\", recon3) },\n+                        { null }\n+                });\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -29,0 +30,7 @@ package com.google.refine.operations.row;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +41,5 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;\n+import com.google.refine.model.Project;", "@@ -39,0 +52,3 @@ public class RowFlagOperationTests extends RefineTest {\n+    Project project;\n+    ListFacetConfig facet;\n+", "@@ -44,0 +60,17 @@ public class RowFlagOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void createProject() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"\", \"i\" }\n+                });\n+\n+        facet = new ListFacetConfig();\n+        facet.name = \"hello\";\n+        facet.expression = \"grel:value\";\n+        facet.columnName = \"hello\";\n+    }\n+", "@@ -53,0 +86,14 @@ public class RowFlagOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testFlagRows() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"h\", \"h\"),\n+                new DecoratedValue(\"d\", \"d\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        RowFlagOperation operation = new RowFlagOperation(engineConfig, true);\n+\n+        runOperation(operation, project);\n+\n+        List<Boolean> flagged = project.rows.stream().map(row -> row.flagged).collect(Collectors.toList());\n+        Assert.assertEquals(flagged, Arrays.asList(false, true, false, true, false));\n+    }", "@@ -30,0 +31,2 @@ import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Arrays;", "@@ -41,0 +44 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;", "@@ -44,0 +48 @@ import com.google.refine.browsing.RowVisitor;\n+import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;", "@@ -74 +78 @@ public class RowRemovalOperationTests extends RefineTest {\n-    Project project;\n+    Project projectIssue567;", "@@ -79,0 +84,3 @@ public class RowRemovalOperationTests extends RefineTest {\n+    Project project;\n+    ListFacetConfig facet;\n+", "@@ -91,3 +98,11 @@ public class RowRemovalOperationTests extends RefineTest {\n-        project = createProjectWithColumns(\"RowRemovalOperationTests\", \"Column A\");\n-\n-        engine = new Engine(project);\n+        projectIssue567 = createProjectWithColumns(\"RowRemovalOperationTests\", \"Column A\");\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"\", \"i\" }\n+                });\n+\n+        engine = new Engine(projectIssue567);", "@@ -99 +114 @@ public class RowRemovalOperationTests extends RefineTest {\n-        bindings.put(\"project\", project);\n+        bindings.put(\"project\", projectIssue567);", "@@ -100,0 +116,4 @@ public class RowRemovalOperationTests extends RefineTest {\n+        facet = new ListFacetConfig();\n+        facet.name = \"hello\";\n+        facet.expression = \"grel:value\";\n+        facet.columnName = \"hello\";", "@@ -105 +124 @@ public class RowRemovalOperationTests extends RefineTest {\n-        project = null;\n+        projectIssue567 = null;", "@@ -111,2 +130,2 @@ public class RowRemovalOperationTests extends RefineTest {\n-        engine.getAllRows().accept(project, new CountVerificationRowVisitor(all));\n-        engine.getAllFilteredRows().accept(project, new CountVerificationRowVisitor(filtered));\n+        engine.getAllRows().accept(projectIssue567, new CountVerificationRowVisitor(all));\n+        engine.getAllFilteredRows().accept(projectIssue567, new CountVerificationRowVisitor(filtered));", "@@ -130 +149 @@ public class RowRemovalOperationTests extends RefineTest {\n-            project.rows.add(row);\n+            projectIssue567.rows.add(row);", "@@ -135 +154 @@ public class RowRemovalOperationTests extends RefineTest {\n-        HistoryEntry historyEntry = op.createProcess(project, options).performImmediate();\n+        HistoryEntry historyEntry = op.createProcess(projectIssue567, options).performImmediate();", "@@ -138 +157 @@ public class RowRemovalOperationTests extends RefineTest {\n-        historyEntry.revert(project);\n+        historyEntry.revert(projectIssue567);", "@@ -167,0 +187,38 @@ public class RowRemovalOperationTests extends RefineTest {\n+    @Test\n+    public void testRemoveRows() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"h\", \"h\"),\n+                new DecoratedValue(\"i\", \"i\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        RowRemovalOperation operation = new RowRemovalOperation(engineConfig);\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+\n+    @Test\n+    public void testRemoveRecords() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"h\", \"h\"),\n+                new DecoratedValue(\"i\", \"i\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RecordBased);\n+        RowRemovalOperation operation = new RowRemovalOperation(engineConfig);\n+\n+        runOperation(operation, project);\n+\n+        Project expected = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" }\n+                });\n+\n+        assertProjectEquals(project, expected);\n+    }\n+", "@@ -32 +31,0 @@ import java.io.Serializable;\n-import org.testng.Assert;", "@@ -133,6 +132,11 @@ public class RowReorderOperationTests extends RefineTest {\n-        Assert.assertEquals(project.rows.get(0).cells.get(1).value, \"b\");\n-        Assert.assertEquals(project.rows.get(1).cells.get(1).value, \"d\");\n-        Assert.assertEquals(project.rows.get(2).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(3).cells.get(1).value, \"f\");\n-        Assert.assertEquals(project.rows.get(4).cells.get(1).value, \"F\");\n-        Assert.assertEquals(project.rows.get(5).cells.get(1).value, \"h\");\n+        Project expected = createProject(\n+                new String[] { \"key\", \"first\" },\n+                new Serializable[][] {\n+                        { \"8\", \"b\" },\n+                        { \"\", \"d\" },\n+                        { \"2\", \"f\" },\n+                        { \"10\", \"f\" },\n+                        { \"9\", \"F\" },\n+                        { \"1\", \"h\" },\n+                });\n+        assertProjectEquals(project, expected);", "@@ -29,0 +30,7 @@ package com.google.refine.operations.row;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;", "@@ -33,0 +41,5 @@ import com.google.refine.RefineTest;\n+import com.google.refine.browsing.DecoratedValue;\n+import com.google.refine.browsing.Engine;\n+import com.google.refine.browsing.EngineConfig;\n+import com.google.refine.browsing.facets.ListFacet.ListFacetConfig;\n+import com.google.refine.model.Project;", "@@ -39,0 +52,3 @@ public class RowStarOperationTests extends RefineTest {\n+    Project project;\n+    ListFacetConfig facet;\n+", "@@ -44,0 +60,17 @@ public class RowStarOperationTests extends RefineTest {\n+    @BeforeMethod\n+    public void createProject() {\n+        project = createProject(new String[] { \"foo\", \"bar\", \"hello\" },\n+                new Serializable[][] {\n+                        { \"a\", \"b\", \"c\" },\n+                        { \"\", null, \"d\" },\n+                        { \"e\", null, \"f\" },\n+                        { null, \"g\", \"h\" },\n+                        { null, \"\", \"i\" }\n+                });\n+\n+        facet = new ListFacetConfig();\n+        facet.name = \"hello\";\n+        facet.expression = \"grel:value\";\n+        facet.columnName = \"hello\";\n+    }\n+", "@@ -53,0 +86,14 @@ public class RowStarOperationTests extends RefineTest {\n+\n+    @Test\n+    public void testStarRows() throws Exception {\n+        facet.selection = Arrays.asList(\n+                new DecoratedValue(\"h\", \"h\"),\n+                new DecoratedValue(\"d\", \"d\"));\n+        EngineConfig engineConfig = new EngineConfig(Arrays.asList(facet), Engine.Mode.RowBased);\n+        RowStarOperation operation = new RowStarOperation(engineConfig, true);\n+\n+        runOperation(operation, project);\n+\n+        List<Boolean> flagged = project.rows.stream().map(row -> row.starred).collect(Collectors.toList());\n+        Assert.assertEquals(flagged, Arrays.asList(false, true, false, true, false));\n+    }\n"]}, {"id": "38b495adbb6fb77a41e8bf8b9c2901a06675f75d", "message": "Provide slf4j-api & jackson to extension modules. Fixes #6475 (#6478)\n\n", "patch": ["@@ -40 +40 @@ import java.time.format.DateTimeFormatter;\n-import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n"]}, {"id": "3e42f5da5e3f85533b55c135cbe5bb68bbd53706", "message": "Fix project name lookup with missing metadata. Fixes #6453 (#6474)\n\n* Fix project name lookup with missing metadata. Fixes #6453\r\n\r\n- improve error messages for various types of corruption\r\n- don't automatically recreate missing directories at startup\r\n- extract magic strings into constants\r\n\r\n* Narrow Exception to IOException", "patch": ["@@ -379,2 +379,6 @@ public abstract class ProjectManager {\n-        Integer c = 0;\n-        Long id = 0L;\n+        if (name == null) {\n+            throw new GetProjectIDException(\"Can't lookup a project with a null name\");\n+        }\n+        Integer count = 0;\n+        Long id = -1L;\n+        // TODO: Linear search assumes small number of projects", "@@ -382 +386,2 @@ public abstract class ProjectManager {\n-            if (entry.getValue().getName().equals(name)) {\n+            ProjectMetadata metadata = entry.getValue();\n+            if (metadata != null && name.equals(metadata.getName())) {", "@@ -384 +389 @@ public abstract class ProjectManager {\n-                c += 1;\n+                count += 1;", "@@ -387 +392 @@ public abstract class ProjectManager {\n-        if (c == 1) {\n+        if (count == 1) {", "@@ -389 +394 @@ public abstract class ProjectManager {\n-        } else if (c == 0) {\n+        } else if (count == 0) {", "@@ -391,2 +395,0 @@ public abstract class ProjectManager {\n-        } else {\n-            throw new GetProjectIDException(c + \" projects found with name: \" + name);", "@@ -393,0 +397 @@ public abstract class ProjectManager {\n+        throw new GetProjectIDException(\"Multiple (\" + count + \") projects found with name: \" + name);", "@@ -397 +401 @@ public abstract class ProjectManager {\n-     * A valid user meta data definition should have name and display property\n+     * A valid user metadata definition should have name and display property", "@@ -457 +461 @@ public abstract class ProjectManager {\n-     * honor the meta data preference\n+     * honor the metadata preference", "@@ -536 +540 @@ public abstract class ProjectManager {\n-    @Deprecated\n+    @Deprecated(since = \"3.8\")", "@@ -294 +294 @@ public class History {\n-    synchronized public void load(Project project, LineNumberReader reader) throws Exception {\n+    synchronized public void load(Project project, LineNumberReader reader) throws IOException {", "@@ -54,0 +55,2 @@ public class FileHistoryEntryManager implements HistoryEntryManager {\n+    public static final String HISTORY_DIR = \"history\";\n+", "@@ -144 +146 @@ public class FileHistoryEntryManager implements HistoryEntryManager {\n-                \"history\");\n+                HISTORY_DIR);", "@@ -41,0 +42,2 @@ import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;", "@@ -69,0 +72,3 @@ public class FileProjectManager extends ProjectManager {\n+    public static final String WORKSPACE_JSON = \"workspace.json\";\n+    public static final String WORKSPACE_OLD_JSON = \"workspace.old.json\";\n+    public static final String WORKSPACE_TEMP_JSON = \"workspace.temp.json\";", "@@ -103,0 +109,4 @@ public class FileProjectManager extends ProjectManager {\n+        return getProjectDir(workspaceDir, projectID, true);\n+    }\n+\n+    static public File getProjectDir(File workspaceDir, long projectID, boolean createIfMissing) {", "@@ -106 +115,7 @@ public class FileProjectManager extends ProjectManager {\n-            dir.mkdir();\n+            if (createIfMissing) {\n+                logger.warn(\"(Re)creating missing project directory - {}\", dir.getAbsolutePath());\n+                dir.mkdir();\n+            } else {\n+                logger.error(\"Missing project directory {}\", dir.getAbsolutePath());\n+                return null;\n+            }", "@@ -113 +128,6 @@ public class FileProjectManager extends ProjectManager {\n-        return getProjectDir(_workspaceDir, projectID);\n+        return getProjectDir(projectID, true);\n+    }\n+\n+    @JsonIgnore\n+    public File getProjectDir(long projectID, boolean createIfMissing) {\n+        return getProjectDir(_workspaceDir, projectID, createIfMissing);", "@@ -207,0 +228 @@ public class FileProjectManager extends ProjectManager {\n+                    // TODO: replace with Files.copy(file.toPath(), tos);", "@@ -215,0 +237,4 @@ public class FileProjectManager extends ProjectManager {\n+    /**\n+     * @deprecated use {@link Files#copy(Path, OutputStream)}\n+     */\n+    @Deprecated(since = \"3.9\")", "@@ -263,2 +288,2 @@ public class FileProjectManager extends ProjectManager {\n-            File file = new File(_workspaceDir, \"workspace.json\");\n-            File oldFile = new File(_workspaceDir, \"workspace.old.json\");\n+            File file = new File(_workspaceDir, WORKSPACE_JSON);\n+            File oldFile = new File(_workspaceDir, WORKSPACE_OLD_JSON);", "@@ -268 +293 @@ public class FileProjectManager extends ProjectManager {\n-                    logger.warn(\"Failed to delete previous backup workspace.old.json\");\n+                    logger.warn(\"Failed to delete previous backup {}\", oldFile.getAbsolutePath());", "@@ -274 +299 @@ public class FileProjectManager extends ProjectManager {\n-                    logger.error(\"Failed to rename workspace.json to workspace.old.json\");\n+                    logger.error(\"Failed to rename {} to {}\", file.getAbsolutePath(), oldFile.getAbsolutePath());", "@@ -279 +304 @@ public class FileProjectManager extends ProjectManager {\n-                logger.error(\"Failed to rename new temp workspace file to workspace.json\");\n+                logger.error(\"Failed to rename new temp workspace file to {}\", file.getAbsolutePath());", "@@ -287 +312 @@ public class FileProjectManager extends ProjectManager {\n-        File tempFile = new File(_workspaceDir, \"workspace.temp.json\");\n+        File tempFile = new File(_workspaceDir, WORKSPACE_TEMP_JSON);", "@@ -290,3 +315,2 @@ public class FileProjectManager extends ProjectManager {\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            logger.warn(\"Failed to save workspace\");\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to save workspace\", e);", "@@ -305 +329,4 @@ public class FileProjectManager extends ProjectManager {\n-                    if (metadata == null) return false;\n+                    if (metadata == null) {\n+                        logger.error(\"Missing metadata for project ID {}\", e.getKey());\n+                        return false;\n+                    }", "@@ -315,0 +343,2 @@ public class FileProjectManager extends ProjectManager {\n+            } else {\n+                logger.error(\"Missing metadata on save for project ID {}\", id);", "@@ -367,8 +396,4 @@ public class FileProjectManager extends ProjectManager {\n-        if (loadFromFile(new File(_workspaceDir, \"workspace.json\"))) {\n-            return;\n-        }\n-        if (loadFromFile(new File(_workspaceDir, \"workspace.temp.json\"))) {\n-            return;\n-        }\n-        if (loadFromFile(new File(_workspaceDir, \"workspace.old.json\"))) {\n-            return;\n+        for (String filename : new String[] { WORKSPACE_JSON, WORKSPACE_TEMP_JSON, WORKSPACE_OLD_JSON }) {\n+            if (loadFromFile(new File(_workspaceDir, filename))) {\n+                return;\n+            }", "@@ -384,2 +408,0 @@ public class FileProjectManager extends ProjectManager {\n-        boolean found = false;\n-", "@@ -389,0 +413 @@ public class FileProjectManager extends ProjectManager {\n+                // TODO: This seems odd. Why is this here?", "@@ -392 +416 @@ public class FileProjectManager extends ProjectManager {\n-                found = true;\n+                return true;", "@@ -394 +418 @@ public class FileProjectManager extends ProjectManager {\n-                logger.warn(e.toString());\n+                logger.warn(\"Failed to load workspace\", e);", "@@ -397,2 +421 @@ public class FileProjectManager extends ProjectManager {\n-\n-        return found;\n+        return false;", "@@ -406,2 +429 @@ public class FileProjectManager extends ProjectManager {\n-            if (file == null) continue;\n-            if (file.isDirectory() && !file.isHidden()) {\n+            if (file != null && file.isDirectory() && !file.isHidden()) {", "@@ -420,3 +442 @@ public class FileProjectManager extends ProjectManager {\n-                            logger.info(\"Recovered project named \"\n-                                    + getProjectMetadata(id).getName()\n-                                    + \" in directory \" + dirName);\n+                            logger.info(\"Recovered project named {} in directory {}\", getProjectMetadata(id).getName(), dirName);", "@@ -425 +445 @@ public class FileProjectManager extends ProjectManager {\n-                            logger.warn(\"Failed to recover project in directory \" + dirName);\n+                            logger.warn(\"Failed to recover project in directory {}\", dirName);", "@@ -463 +483,5 @@ public class FileProjectManager extends ProjectManager {\n-            File projectDir = getProjectDir(id);\n+            File projectDir = getProjectDir(id, false);\n+            if (projectDir == null) {\n+                logger.error(\"Missing project directory for project {}\", id);\n+                continue;\n+            }", "@@ -35,0 +36,3 @@ package com.google.refine.io;\n+import static com.google.refine.io.FileHistoryEntryManager.HISTORY_DIR;\n+import static com.google.refine.io.ProjectUtilities.DATA_ZIP;\n+", "@@ -49 +51,0 @@ import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;", "@@ -62 +64 @@ public class ProjectMetadataUtilities {\n-        File tempFile = new File(projectDir, \"metadata.temp.json\");\n+        File tempFile = new File(projectDir, ProjectMetadata.TEMP_FILE_NAME);", "@@ -70,2 +72,2 @@ public class ProjectMetadataUtilities {\n-        File file = new File(projectDir, \"metadata.json\");\n-        File oldFile = new File(projectDir, \"metadata.old.json\");\n+        File file = new File(projectDir, ProjectMetadata.DEFAULT_FILE_NAME);\n+        File oldFile = new File(projectDir, ProjectMetadata.OLD_FILE_NAME);", "@@ -94,6 +96,3 @@ public class ProjectMetadataUtilities {\n-        ProjectMetadata pm = null;\n-\n-        pm = loadMetaDataIfExist(projectDir, ProjectMetadata.DEFAULT_FILE_NAME);\n-\n-        if (pm == null) {\n-            pm = loadMetaDataIfExist(projectDir, ProjectMetadata.TEMP_FILE_NAME);\n+        if (!projectDir.exists()) {\n+            logger.error(\"Project directory doesn't exist - {}\", projectDir);\n+            return null;", "@@ -101,3 +100,3 @@ public class ProjectMetadataUtilities {\n-\n-        if (pm == null) {\n-            pm = loadMetaDataIfExist(projectDir, ProjectMetadata.OLD_FILE_NAME);\n+        if (!projectDir.isDirectory()) {\n+            logger.error(\"File isn't a project directory {}\", projectDir);\n+            return null;", "@@ -105,8 +104,3 @@ public class ProjectMetadataUtilities {\n-\n-        return pm;\n-    }\n-\n-    private static ProjectMetadata loadMetaDataIfExist(File projectDir, String fileName) {\n-        ProjectMetadata pm = null;\n-        File file = new File(projectDir, fileName);\n-        if (file.exists()) {\n+        for (String filename : new String[] { ProjectMetadata.DEFAULT_FILE_NAME, ProjectMetadata.TEMP_FILE_NAME,\n+                ProjectMetadata.OLD_FILE_NAME }) {\n+            File file = new File(projectDir, filename);", "@@ -114,4 +108,3 @@ public class ProjectMetadataUtilities {\n-                pm = loadFromFile(file);\n-            } catch (Exception e) {\n-                logger.warn(\"load metadata failed: \" + file.getAbsolutePath());\n-                logger.error(ExceptionUtils.getStackTrace(e));\n+                return loadFromFile(file);\n+            } catch (IOException e) {\n+                logger.warn(\"load metadata failed: {}\", file.getAbsolutePath(), e);", "@@ -120,2 +113,2 @@ public class ProjectMetadataUtilities {\n-\n-        return pm;\n+        logger.error(\"Failed to load any metadata for project {}\", projectDir.getAbsolutePath());\n+        return null;", "@@ -142,2 +135,2 @@ public class ProjectMetadataUtilities {\n-            long ctime = System.currentTimeMillis();\n-            long mtime = 0;\n+            long ctime;\n+            long mtime;", "@@ -145 +138 @@ public class ProjectMetadataUtilities {\n-            File dataFile = new File(projectDir, \"data.zip\");\n+            File dataFile = new File(projectDir, DATA_ZIP);", "@@ -148 +141 @@ public class ProjectMetadataUtilities {\n-            File historyDir = new File(projectDir, \"history\");\n+            File historyDir = new File(projectDir, HISTORY_DIR);", "@@ -160 +153 @@ public class ProjectMetadataUtilities {\n-            logger.error(\"Partially recovered missing metadata project in directory \" + projectDir + \" - \" + tempName);\n+            logger.error(\"Partially recovered missing metadata project in directory {} / {} \", projectDir, tempName);", "@@ -165 +158 @@ public class ProjectMetadataUtilities {\n-    static protected ProjectMetadata loadFromFile(File metadataFile) throws Exception {\n+    static protected ProjectMetadata loadFromFile(File metadataFile) throws IOException {", "@@ -52,0 +53,3 @@ public class ProjectUtilities {\n+    public static final String DATA_ZIP = \"data.zip\";\n+    public static final String DATA_TEMP_ZIP = \"data.temp.zip\";\n+    public static final String DATA_OLD_ZIP = \"data.old.zip\";", "@@ -59 +62 @@ public class ProjectUtilities {\n-            File tempFile = new File(dir, \"data.temp.zip\");\n+            File tempFile = new File(dir, DATA_TEMP_ZIP);", "@@ -63,2 +66 @@ public class ProjectUtilities {\n-                e.printStackTrace();\n-                logger.warn(\"Failed to save project {}\", id);\n+                logger.warn(\"Failed to save project {}\", id, e);", "@@ -73,2 +75,2 @@ public class ProjectUtilities {\n-            File file = new File(dir, \"data.zip\");\n-            File oldFile = new File(dir, \"data.old.zip\");\n+            File file = new File(dir, DATA_ZIP);\n+            File oldFile = new File(dir, DATA_OLD_ZIP);", "@@ -115,22 +117,8 @@ public class ProjectUtilities {\n-        try {\n-            File file = new File(dir, \"data.zip\");\n-            if (file.exists()) {\n-                return loadFromFile(file, id);\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            File file = new File(dir, \"data.temp.zip\");\n-            if (file.exists()) {\n-                return loadFromFile(file, id);\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            File file = new File(dir, \"data.old.zip\");\n-            if (file.exists()) {\n-                return loadFromFile(file, id);\n+        for (String filename : new String[] { DATA_ZIP, DATA_TEMP_ZIP, DATA_OLD_ZIP }) {\n+            try {\n+                File file = new File(dir, filename);\n+                if (file.exists()) {\n+                    return loadFromFile(file, id);\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Failed to load from data file {} / {}\", dir, filename, e);", "@@ -138,2 +125,0 @@ public class ProjectUtilities {\n-        } catch (Exception e) {\n-            e.printStackTrace();", "@@ -141 +127 @@ public class ProjectUtilities {\n-\n+        logger.error(\"All data files and backup data files failed to load\");", "@@ -147 +133 @@ public class ProjectUtilities {\n-            long id) throws Exception {\n+            long id) throws IOException {", "@@ -156 +156 @@ public class Column {\n-    static public Column load(String s) throws Exception {\n+    static public Column load(String s) throws IOException {", "@@ -225 +225 @@ public class ColumnModel {\n-    synchronized public void load(LineNumberReader reader) throws Exception {\n+    synchronized public void load(LineNumberReader reader) throws IOException {", "@@ -42,0 +43 @@ import java.io.Writer;\n+import java.nio.charset.StandardCharsets;", "@@ -191,2 +192,2 @@ public class Project {\n-    static public Project loadFromInputStream(InputStream is, long id, Pool pool) throws Exception {\n-        return loadFromReader(new LineNumberReader(new InputStreamReader(is, \"UTF-8\")), id, pool);\n+    static public Project loadFromInputStream(InputStream is, long id, Pool pool) throws IOException {\n+        return loadFromReader(new LineNumberReader(new InputStreamReader(is, StandardCharsets.UTF_8)), id, pool);", "@@ -198 +199 @@ public class Project {\n-            Pool pool) throws Exception {\n+            Pool pool) throws IOException {", "@@ -35,0 +36 @@ package com.google.refine.model;\n+import java.io.IOException;", "@@ -391 +392 @@ public class Recon implements HasFields {\n-    static public Recon loadStreaming(String s) throws Exception {\n+    static public Recon loadStreaming(String s) throws IOException {", "@@ -35,0 +36 @@ package com.google.refine.model;\n+import java.io.IOException;", "@@ -92 +93 @@ public class ReconCandidate implements HasFields {\n-    static public ReconCandidate loadStreaming(String s) throws Exception {\n+    static public ReconCandidate loadStreaming(String s) throws IOException {", "@@ -97 +98 @@ public class ReconCandidate implements HasFields {\n-    static public ReconCandidate loadStreaming(JsonParser jp) throws Exception {\n+    static public ReconCandidate loadStreaming(JsonParser jp) throws IOException {", "@@ -206 +206 @@ public class Row implements HasFields {\n-    static public Row load(String s, Pool pool) throws Exception {\n+    static public Row load(String s, Pool pool) throws IOException {", "@@ -221 +221 @@ public class Row implements HasFields {\n-    static public Row loadStreaming(String s, Pool pool) throws Exception {\n+    static public Row loadStreaming(String s, Pool pool) throws IOException {", "@@ -43,0 +44 @@ import java.io.Writer;\n+import java.nio.charset.StandardCharsets;", "@@ -117,2 +118,2 @@ public class Pool {\n-    public void load(InputStream is) throws Exception {\n-        load(new InputStreamReader(is, \"UTF-8\"));\n+    public void load(InputStream is) throws IOException {\n+        load(new InputStreamReader(is, StandardCharsets.UTF_8));", "@@ -121 +122 @@ public class Pool {\n-    public void load(Reader reader) throws Exception {\n+    public void load(Reader reader) throws IOException {", "@@ -130 +130 @@ public class CrossTests extends RefineTest {\n-                \"2 projects found with name: \" + duplicateProjectName);\n+                \"Multiple (2) projects found with name: \" + duplicateProjectName);", "@@ -34,0 +35 @@ import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;", "@@ -42,0 +44 @@ import java.nio.file.Paths;\n+import org.apache.commons.io.FileUtils;", "@@ -156,0 +159,9 @@ public class FileProjectManagerTests {\n+        // Test handling of corrupted workspace with missing metadata file\n+        try {\n+            FileUtils.deleteDirectory(metaAFile.getParentFile());\n+        } catch (IOException e) {\n+            fail(\"Failed to delete metadata directory for \" + metaAFile);\n+        }\n+        // Reload our intentionally corrupted workspace.\n+        manager = new FileProjectManager(workspaceDir);\n+        assertEquals(manager.getProjectID(\"B\"), idB);\n"]}, {"id": "b1e0caf5c52a60058c093ef8822cdb2199eea859", "message": "Fix recon deserialization error for matched cells (#6483)\n\nCloses #6464.\r\n\r\nCo-authored-by: Tom Morris <tfmorris@gmail.com>", "patch": ["@@ -216,0 +217 @@ public class Recon implements HasFields {\n+        error = null;", "@@ -415,3 +415,0 @@ public class Recon implements HasFields {\n-        if (error != null && match != null) {\n-            throw new IllegalArgumentException(\"there is a match hence no error\");\n-        }", "@@ -419,0 +418,3 @@ public class Recon implements HasFields {\n+        if (error != null && !this.candidates.isEmpty()) {\n+            throw new IllegalArgumentException(\"Recon deserialization: inconsistent state - error & candidates not allowed together\");\n+        }", "@@ -36,0 +37 @@ import java.util.stream.LongStream;\n+import com.fasterxml.jackson.databind.exc.ValueInstantiationException;", "@@ -125,0 +127,39 @@ public class ReconTests {\n+    @Test\n+    public void testsErrorWithMatchSerialization() throws Exception {\n+        String json = \"{\\\"id\\\":1533651559492945033,\"\n+                + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"\n+                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"\n+                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"\n+                + \"\\\"j\\\":\\\"matched\\\",\"\n+                + \"\\\"e\\\":\\\"fictional error message\\\",\"\n+                + \"\\\"m\\\":{\"\n+                + \"   \\\"id\\\":\\\"Q2892284\\\",\"\n+                + \"   \\\"name\\\":\\\"Baylor College of Medicine\\\",\"\n+                + \"   \\\"score\\\":98.57142857142858,\"\n+                + \"   \\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]\"\n+                + \"}\"\n+                + \"}\";\n+        Recon r = Recon.loadStreaming(json);\n+        Assert.assertEquals(r.error, \"fictional error message\");\n+        Assert.assertEquals(r.match.id, \"Q2892284\");\n+        TestUtils.isSerializedTo(r, json);\n+    }\n+\n+    @Test\n+    public void testsErrorWithCandidatesDeserialization() throws Exception {\n+        String json = \"{\\\"id\\\":1533651559492945033,\"\n+                + \"\\\"service\\\":\\\"https://tools.wmflabs.org/openrefine-wikidata/en/api\\\",\"\n+                + \"\\\"identifierSpace\\\":\\\"http://www.wikidata.org/entity/\\\",\"\n+                + \"\\\"schemaSpace\\\":\\\"http://www.wikidata.org/prop/direct/\\\",\"\n+                + \"\\\"j\\\":\\\"none\\\",\"\n+                + \"\\\"e\\\":\\\"fictional error message\\\",\"\n+                + \"\\\"c\\\":[{\"\n+                + \"   \\\"id\\\":\\\"Q2892284\\\",\"\n+                + \"   \\\"name\\\":\\\"Baylor College of Medicine\\\",\"\n+                + \"   \\\"score\\\":98.57142857142858,\"\n+                + \"   \\\"types\\\":[\\\"Q16917\\\",\\\"Q23002054\\\",\\\"Q494230\\\"]\"\n+                + \"}]\"\n+                + \"}\";\n+        Assert.assertThrows(ValueInstantiationException.class, () -> Recon.loadStreaming(json));\n+    }\n+\n"]}, {"id": "f116fffe73000c37d8a87cd2a798bcd2cbdbe3a1", "message": "Improve test coverage of CalendarParser (#6476)\n\n* improved test coverage\r\n\r\n* removed unused code\r\n\r\nFixes #6469.", "patch": ["@@ -1855,49 +1854,0 @@ public class CalendarParser {\n-    /**\n-     * Return a printable representation of the date.\n-     * \n-     * @param cal\n-     *            calendar to convert to a string\n-     * \n-     * @return a printable string.\n-     */\n-    public static final String prettyString(Calendar cal) {\n-        if (cal == null) {\n-            return null;\n-        }\n-\n-        final int calYear = cal.get(Calendar.YEAR);\n-        final int calMonth = cal.get(Calendar.MONTH);\n-        final int calDay = cal.get(Calendar.DATE);\n-\n-        boolean needSpace = false;\n-        StringBuffer buf = new StringBuffer();\n-\n-        if (calMonth >= 0 && calMonth < MONTHS.length) {\n-            if (needSpace) {\n-                buf.append(' ');\n-            }\n-            buf.append(MONTHS[calMonth][1]);\n-            needSpace = true;\n-        }\n-        if (calDay > 0) {\n-            if (needSpace) {\n-                buf.append(' ');\n-            }\n-            buf.append(calDay);\n-            if (calYear > UNSET) {\n-                buf.append(',');\n-            }\n-            needSpace = true;\n-        }\n-        if (calYear > UNSET) {\n-            if (needSpace) {\n-                buf.append(' ');\n-            }\n-            buf.append(calYear);\n-        }\n-\n-        appendTimeString(buf, cal, needSpace);\n-\n-        return buf.toString();\n-    }\n-", "@@ -1949,36 +1899,0 @@ public class CalendarParser {\n-\n-    /**\n-     * Return a string representation of the date suitable for use in an SQL statement.\n-     * \n-     * @param cal\n-     *            calendar to convert to a string\n-     * \n-     * @return the SQL-friendly string.\n-     */\n-    public static final String toSQLString(Calendar cal) {\n-        if (cal == null) {\n-            return null;\n-        }\n-\n-        final int calYear = cal.get(Calendar.YEAR);\n-        final int calMonth = cal.get(Calendar.MONTH);\n-        final int calDay = cal.get(Calendar.DATE);\n-\n-        StringBuffer buf = new StringBuffer();\n-\n-        buf.append(calYear);\n-        buf.append('-');\n-        if ((calMonth + 1) < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(calMonth + 1);\n-        buf.append('-');\n-        if (calDay < 10) {\n-            buf.append('0');\n-        }\n-        buf.append(calDay);\n-\n-        appendTimeString(buf, cal, true);\n-\n-        return buf.toString();\n-    }\n--- /dev/null", "@@ -0,0 +1,329 @@\n+\n+package com.google.refine.expr.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class CalenderParserTest {\n+\n+    @DataProvider(name = \"parseDate\")\n+    private static Object[][] parseDate() {\n+        return new Object[][] {\n+                { \"21012024\", CalendarParser.DD_MM_YY },\n+                { \"21-01-2024\", CalendarParser.DD_MM_YY },\n+                { \"21/01/2024\", CalendarParser.DD_MM_YY },\n+                { \"01212024\", CalendarParser.MM_DD_YY },\n+                { \"01-21-2024\", CalendarParser.MM_DD_YY },\n+                { \"01/21/2024\", CalendarParser.MM_DD_YY },\n+                { \"01202421\", CalendarParser.MM_YY_DD },\n+                { \"01-2024-21\", CalendarParser.MM_YY_DD },\n+                { \"01/2024/21\", CalendarParser.MM_YY_DD },\n+                { \"21202401\", CalendarParser.DD_YY_MM },\n+                { \"21-2024-01\", CalendarParser.DD_YY_MM },\n+                { \"21/2024/01\", CalendarParser.DD_YY_MM },\n+                { \"20242101\", CalendarParser.YY_DD_MM },\n+                { \"2024-21-01\", CalendarParser.YY_DD_MM },\n+                { \"2024/21/01\", CalendarParser.YY_DD_MM },\n+                { \"20240121\", CalendarParser.YY_MM_DD },\n+                { \"2024-01-21\", CalendarParser.YY_MM_DD },\n+                { \"2024/01/21\", CalendarParser.YY_MM_DD },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"parseDate\")\n+    public void shouldParseDateWhenDifferentFormat_parseTest(String inputDateStr, int inputOrder) throws CalendarParserException {\n+        Calendar calendar = CalendarParser.parse(inputDateStr, inputOrder);\n+\n+        assertEquals(Calendar.JANUARY, calendar.get(Calendar.MONTH));\n+        assertEquals(2024, calendar.get(Calendar.YEAR));\n+        assertEquals(21, calendar.get(Calendar.DATE));\n+    }\n+\n+    @DataProvider(name = \"dateWithMonthsAsString\")\n+    private static Object[][] dateWithMonthsAsString() {\n+        return new Object[][] {\n+                { \"11 April 12\", CalendarParser.DD_MM_YY },\n+                { \"April 11 12\", CalendarParser.MM_DD_YY },\n+                { \"12 April 11\", CalendarParser.YY_MM_DD },\n+                { \"12 11 April\", CalendarParser.YY_DD_MM },\n+                { \"April 12 11\", CalendarParser.MM_YY_DD },\n+                { \"11 12 April\", CalendarParser.DD_YY_MM }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dateWithMonthsAsString\")\n+    public void shouldParseDateWhenMonthAsString_parseTest(String dateInput, int orderInput) throws CalendarParserException {\n+        Calendar calendar = CalendarParser.parse(dateInput, orderInput);\n+\n+        assertEquals(11, calendar.get(Calendar.DATE));\n+        assertEquals(Calendar.APRIL, calendar.get(Calendar.MONTH));\n+        assertEquals(2012, calendar.get(Calendar.YEAR));\n+    }\n+\n+    @DataProvider(name = \"dateWithDayAsOrdinalNumber\")\n+    private static Object[][] dateWithDayAsOrdinalNumber() {\n+        return new Object[][] {\n+                { \"11st 4 12\", CalendarParser.DD_MM_YY },\n+                { \"4 11st 12\", CalendarParser.MM_DD_YY },\n+                { \"12 4 11st\", CalendarParser.YY_MM_DD },\n+                { \"12 11st 4\", CalendarParser.YY_DD_MM },\n+                { \"4 12 11st\", CalendarParser.MM_YY_DD },\n+                { \"11st 12 4\", CalendarParser.DD_YY_MM }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dateWithDayAsOrdinalNumber\")\n+    public void shouldParseDateWhenDayAsOrdinalNumber_parseTest(String dateInput, int orderInput) throws CalendarParserException {\n+        Calendar calendar = CalendarParser.parse(dateInput, orderInput);\n+\n+        assertEquals(11, calendar.get(Calendar.DATE));\n+        assertEquals(Calendar.APRIL, calendar.get(Calendar.MONTH));\n+        assertEquals(2012, calendar.get(Calendar.YEAR));\n+    }\n+\n+    @DataProvider(name = \"peculiarDates\")\n+    private static Object[][] peculiarDates() {\n+        return new Object[][] {\n+                { \"oct 4 12\", CalendarParser.DD_MM_YY },\n+                { \"4 oct 12\", CalendarParser.MM_DD_YY },\n+                { \"4 oct 12\", CalendarParser.MM_YY_DD },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"peculiarDates\")\n+    public void shouldParseDateWhenInputDateMismatchWithOrder_parseDate(String dateStr, int order) throws CalendarParserException {\n+        Calendar calendar = CalendarParser.parse(dateStr, order);\n+\n+        assertNotNull(calendar);\n+    }\n+\n+    @Test\n+    public void shouldParseDateWhenInputHasTime_parseTest() throws CalendarParserException {\n+        String dateStr = \"20/01/2024 8:30:54:003am +05:30\";\n+        Calendar calendar = CalendarParser.parse(dateStr);\n+\n+        assertEquals(8, calendar.get(Calendar.HOUR));\n+        assertEquals(Calendar.AM, calendar.get(Calendar.AM_PM));\n+        assertEquals(30, calendar.get(Calendar.MINUTE));\n+        assertEquals(54, calendar.get(Calendar.SECOND));\n+        assertEquals(3, calendar.get(Calendar.MILLISECOND));\n+        assertEquals(\"GMT+05:30\", calendar.getTimeZone().toZoneId().getId());\n+    }\n+\n+    @DataProvider(name = \"months\")\n+    public static Object[][] months() {\n+        return new Object[][] {\n+                { \"jana\", 1 },\n+                { \"MarCh\", 3 },\n+                { \"Dec\", 12 },\n+                { \"october\", 10 },\n+                { \"JULY\", 7 },\n+                { \"xyy\", ParserState.UNSET }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"months\")\n+    public void monthToNumberTest(String input, int expected) {\n+        assertEquals(expected, CalendarParser.monthNameToNumber(input));\n+    }\n+\n+    @DataProvider(name = \"calendersToString\")\n+    public static Object[][] calendersToString() {\n+        List<Calendar> calendars = getCalenderList();\n+        return new Object[][] {\n+                { calendars.get(0), \"20 Apr 2024  1:52:22.500 -08:00\" },\n+                { calendars.get(1), \"7 Nov 2022 11:06:08.050 +05:30\" } };\n+    }\n+\n+    @Test(dataProvider = \"calendersToString\")\n+    public void calenderToStringTest(Calendar input, String expected) {\n+        String str = CalendarParser.toString(input);\n+\n+        assertEquals(expected, str);\n+\n+        String[] dateTime = str.split(\"( )+\");\n+        assertEquals(5, dateTime.length);\n+\n+        String[] time = dateTime[3].split(\":\");\n+        assertEquals(3, time.length);\n+\n+    }\n+\n+    @Test\n+    public void whenInputNull_calendarToStringTest() {\n+        assertNull(CalendarParser.toString(null));\n+    }\n+\n+    @DataProvider(name = \"orderString\")\n+    private static Object[][] orderString() {\n+        return new Object[][] {\n+                { 0, \"DD_MM_YY\" },\n+                { 1, \"MM_DD_YY\" },\n+                { 3, \"MM_YY_DD\" },\n+                { 4, \"DD_YY_MM\" },\n+                { 6, \"YY_DD_MM\" },\n+                { 7, \"YY_MM_DD\" },\n+                { 10, \"??10??\" }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"orderString\")\n+    public void toOrderStringTest(int input, String expected) {\n+        assertEquals(expected, CalendarParser.getOrderString(input));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenNegativeNumberInDateStr_parseTest() {\n+        String dateStr = \"-22/02/2024\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.DD_MM_YY));\n+        assertEquals(String.format(\"Found negative number in date \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenYearMissingDD_MM_YY_parseTest() {\n+        String dateStr = \"20/01/\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.DD_MM_YY));\n+        assertEquals(String.format(\"Year missing from \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMonthMissingDD_MM_YY_parseTest() {\n+        String dateStr = \"20//2024\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.DD_MM_YY));\n+        assertEquals(String.format(\"Month missing from \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenDateMissingMM_DD_YY_parseTest() {\n+        String dateStr = \"01//2024\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.MM_DD_YY));\n+        assertEquals(String.format(\"Day missing from \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMonthAndYearAreMissingDD_MM_YY_parseTest() {\n+        String dateStr = \"20/\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.DD_MM_YY));\n+        assertEquals(String.format(\"Year and month missing from \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMonthAndDayAreMissingYY_DD_MM_parseTest() {\n+        String dateStr = \"2024-\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Day and month missing from \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenHourValueIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 28:30:54:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad hour 28 in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenHourIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 1hour:30:54:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad hour string \\\"1hour\\\" in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMinuteValueIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 8:90:54:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad minute 90 in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMinuteIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 2:30Minute:54:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad minute string \\\"30Minute\\\" in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenSecondValueIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 8:30:94:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad second 94 in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenSecondIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 2:30:54Sec:003 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad second string \\\"54Sec\\\" in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMilliSecondValueIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 8:30:44:1111 pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad millisecond 1111 in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMilliSecondIsBad_parseTest() {\n+        String dateStr = \"20/01/2024 2:30:54:003milli pm +05:30\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad millisecond string \\\"003milli\\\" in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenBadTime_parseTest() {\n+        String dateStr = \"20/01/2024 hour:minute:second\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Unrecognized time \\\"hour:minute:second\\\" in date \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenBadTimeZone_parseTest() {\n+        String dateStr = \"20/01/2024 8:30:54:003 pm +05:30min\";\n+        CalendarParserException exception = assertThrows(CalendarParserException.class,\n+                () -> CalendarParser.parse(dateStr, CalendarParser.YY_DD_MM));\n+        assertEquals(String.format(\"Bad time zone minute offset \\\"30min\\\" in \\\"%s\\\"\", dateStr), exception.getMessage());\n+    }\n+\n+    private static Calendar getCalendar(int year, int month, int date, int hour, int minutes, int seconds, int milliSeconds,\n+            TimeZone timeZone) {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(year, month, date, hour, minutes, seconds);\n+        cal.set(Calendar.MILLISECOND, milliSeconds);\n+        cal.setTimeZone(timeZone);\n+        return cal;\n+    }\n+\n+    private static List<Calendar> getCalenderList() {\n+        List<Calendar> calendars = new ArrayList<>();\n+        calendars.add(getCalendar(2024, 3, 20, 1, 52, 22, 500, TimeZone.getTimeZone(\"America/Los_Angeles\")));\n+        calendars.add(getCalendar(2022, 10, 7, 11, 6, 8, 50, TimeZone.getTimeZone(\"IST\")));\n+        return calendars;\n+    }\n+\n+}\n"]}, {"id": "20bd98fb45b94a110c3517f44b47f1e8cd1d1e27", "message": "Remove deprecated reflective access to Sun date internals. Refs #5909 (#6492)\n\nWhen JVMs enforce the deprecation, it causes variability in the\r\ntest coverage.", "patch": ["@@ -36,2 +35,0 @@ package com.google.refine.expr.util;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;", "@@ -762,24 +760 @@ public class CalendarParser {\n-        Class<?> zoneInfo;\n-        try {\n-            zoneInfo = Class.forName(\"sun.util.calendar.ZoneInfo\");\n-        } catch (ClassNotFoundException cnfe) {\n-            return null;\n-        }\n-\n-        Method method;\n-        try {\n-            method = zoneInfo.getDeclaredMethod(\"getAvailableIDs\", new Class[0]);\n-        } catch (NoSuchMethodException nsme) {\n-            return null;\n-        }\n-\n-        Object result;\n-        try {\n-            result = method.invoke((Object) null);\n-        } catch (IllegalAccessException iae) {\n-            return null;\n-        } catch (InvocationTargetException ite) {\n-            return null;\n-        }\n-\n-        String[] tmpList = (String[]) result;\n+        String[] tmpList = TimeZone.getAvailableIDs();", "@@ -867,0 +843 @@ public class CalendarParser {\n+    // TODO: Only used by test code - move to tests?", "@@ -1054,0 +1031 @@ public class CalendarParser {\n+                        // FIXME: Just try it as a timezone name without any prechecking", "@@ -1635,0 +1613 @@ public class CalendarParser {\n+        // FIXME: This was local time before OpenRefine 3.0 when it changed to UTC for no apparent reason", "@@ -1647 +1624,0 @@ public class CalendarParser {\n-//        return cal.toInstant().atOffset(ZoneOffset.of(\"Z\"));\n"]}, {"id": "83ee35c45c084835c44b995ca36bb4d57ccd9236", "message": "Drop legacy Keyer classes not registered as clustering methods (#6486)\n\n* Drop legacy Keyer classes not registered as clustering methods.\r\n\r\nReplace their uses in the phonetic() GREL function by direct calls\r\nto the underlying Commons encoding library.\r\n\r\nCloses #6495.\r\n\r\n* Also remove mentions of less useful distances\r\n\r\n* Add test", "patch": ["+++ /dev/null", "@@ -1,52 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.clustering.binning;\n-\n-import org.apache.commons.codec.language.DoubleMetaphone;\n-\n-public class DoubleMetaphoneKeyer extends Keyer {\n-\n-    private DoubleMetaphone _metaphone2;\n-\n-    public DoubleMetaphoneKeyer() {\n-        _metaphone2 = new DoubleMetaphone();\n-        _metaphone2.setMaxCodeLen(2000);\n-    }\n-\n-    @Override\n-    public String key(String s, Object... o) {\n-        return _metaphone2.doubleMetaphone(s);\n-    }\n-\n-}", "@@ -49,3 +48,0 @@ public class KeyerFactory {\n-        // Some keyers are disabled as they are super-seeded by others\n-        // See https://github.com/OpenRefine/OpenRefine/pull/1906\n-", "@@ -54,2 +50,0 @@ public class KeyerFactory {\n-        // put(\"metaphone\", new MetaphoneKeyer());\n-        // put(\"double-metaphone\", new DoubleMetaphoneKeyer());", "@@ -57 +51,0 @@ public class KeyerFactory {\n-        // put(\"soundex\", new SoundexKeyer());\n+++ /dev/null", "@@ -1,52 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.clustering.binning;\n-\n-import org.apache.commons.codec.language.Metaphone;\n-\n-public class MetaphoneKeyer extends Keyer {\n-\n-    private Metaphone _metaphone;\n-\n-    public MetaphoneKeyer() {\n-        _metaphone = new Metaphone();\n-        _metaphone.setMaxCodeLen(2000);\n-    }\n-\n-    @Override\n-    public String key(String s, Object... o) {\n-        return _metaphone.metaphone(s);\n-    }\n-\n-}\n+++ /dev/null", "@@ -1,51 +0,0 @@\n-/*\n-\n-Copyright 2010, Google Inc.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions are\n-met:\n-\n-    * Redistributions of source code must retain the above copyright\n-notice, this list of conditions and the following disclaimer.\n-    * Redistributions in binary form must reproduce the above\n-copyright notice, this list of conditions and the following disclaimer\n-in the documentation and/or other materials provided with the\n-distribution.\n-    * Neither the name of Google Inc. nor the names of its\n-contributors may be used to endorse or promote products derived from\n-this software without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n-\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           \n-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           \n-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-*/\n-\n-package com.google.refine.clustering.binning;\n-\n-import org.apache.commons.codec.language.Soundex;\n-\n-public class SoundexKeyer extends Keyer {\n-\n-    private Soundex _soundex;\n-\n-    public SoundexKeyer() {\n-        _soundex = new Soundex();\n-    }\n-\n-    @Override\n-    public String key(String s, Object... o) {\n-        return _soundex.soundex(s);\n-    }\n-\n-}", "@@ -53,9 +52,0 @@ public class DistanceFactory {\n-\n-        // Distances not activated as they are not very useful:\n-        // See https://github.com/OpenRefine/OpenRefine/pull/1906\n-        /*\n-         * put(\"jaccard\", new VicinoDistance(new JaccardDistance())); put(\"jaro\", new VicinoDistance(new\n-         * JaroDistance())); put(\"jaro-winkler\", new VicinoDistance(new JaroWinklerDistance()));\n-         * put(\"jaro-winkler-tfidf\", new VicinoDistance(new JaroWinklerTFIDFDistance())); put(\"gzip\", new\n-         * VicinoDistance(new GZipDistance())); put(\"bzip2\", new VicinoDistance(new BZip2Distance()));\n-         */", "@@ -38,5 +38,6 @@ import java.util.Properties;\n-import com.google.refine.clustering.binning.ColognePhoneticKeyer;\n-import com.google.refine.clustering.binning.DoubleMetaphoneKeyer;\n-import com.google.refine.clustering.binning.Metaphone3Keyer;\n-import com.google.refine.clustering.binning.MetaphoneKeyer;\n-import com.google.refine.clustering.binning.SoundexKeyer;\n+import org.apache.commons.codec.language.DoubleMetaphone;\n+import org.apache.commons.codec.language.Metaphone;\n+import org.apache.commons.codec.language.Soundex;\n+\n+import com.google.refine.clustering.binning.Keyer;\n+import com.google.refine.clustering.binning.KeyerFactory;", "@@ -51,6 +52,27 @@ public class Phonetic implements Function {\n-    // TODO: We could probably lazily initialize these when needed for efficiency\n-    static private Metaphone3Keyer metaphone3 = new Metaphone3Keyer();\n-    static private DoubleMetaphoneKeyer metaphone2 = new DoubleMetaphoneKeyer();\n-    static private MetaphoneKeyer metaphone = new MetaphoneKeyer();\n-    static private SoundexKeyer soundex = new SoundexKeyer();\n-    static private ColognePhoneticKeyer cologne = new ColognePhoneticKeyer();\n+    // TODO deprecate and drop those legacy encodings?\n+    static private Metaphone metaphone = null;\n+    static private DoubleMetaphone doubleMetaphone = null;\n+    static private Soundex soundex = null;\n+\n+    private Metaphone getMetaphone() {\n+        if (metaphone == null) {\n+            metaphone = new Metaphone();\n+            metaphone.setMaxCodeLen(2000);\n+        }\n+        return metaphone;\n+    }\n+\n+    private DoubleMetaphone getDoubleMetaphone() {\n+        if (doubleMetaphone == null) {\n+            doubleMetaphone = new DoubleMetaphone();\n+            doubleMetaphone.setMaxCodeLen(2000);\n+        }\n+        return doubleMetaphone;\n+    }\n+\n+    private Soundex getSoundex() {\n+        if (soundex == null) {\n+            soundex = new Soundex();\n+        }\n+        return soundex;\n+    }", "@@ -74 +95,0 @@ public class Phonetic implements Function {\n-                    // + \" expects a string for the second argument\");", "@@ -78 +98,0 @@ public class Phonetic implements Function {\n-                // + \" expects a string for the second argument, the phonetic encoding to use.\");", "@@ -84,3 +104 @@ public class Phonetic implements Function {\n-                return metaphone2.key(str);\n-            } else if (\"metaphone3\".equalsIgnoreCase(encoding)) {\n-                return metaphone3.key(str);\n+                return getDoubleMetaphone().doubleMetaphone(str);", "@@ -88 +106 @@ public class Phonetic implements Function {\n-                return metaphone.key(str);\n+                return getMetaphone().metaphone(str);", "@@ -90,3 +108 @@ public class Phonetic implements Function {\n-                return soundex.key(str);\n-            } else if (\"cologne\".equalsIgnoreCase(encoding)) {\n-                return cologne.key(str);\n+                return getSoundex().soundex(str);", "@@ -94,2 +110,4 @@ public class Phonetic implements Function {\n-                // + \" doesn't know how to handle the '\"\n-                // + encoding + \"' encoding.\");\n+                Keyer keyer = KeyerFactory.get(encoding.toLowerCase());\n+                if (keyer != null) {\n+                    return keyer.key(str);\n+                }", "@@ -99 +116,0 @@ public class Phonetic implements Function {\n-            // + \" expects one or two string arguments\");", "@@ -29,0 +30,2 @@ package com.google.refine.expr.functions.strings;\n+import static org.testng.Assert.assertEquals;\n+", "@@ -50,0 +53,9 @@ public class PhoneticTests extends RefineTest {\n+\n+    @Test\n+    public void testValidParameters() {\n+        assertEquals(invoke(\"phonetic\", \"hello\", \"metaphone3\"), \"HL\");\n+        assertEquals(invoke(\"phonetic\", \"hello\", \"cologne-phonetic\"), \"05\");\n+        assertEquals(invoke(\"phonetic\", \"hello\", \"soundex\"), \"H400\");\n+        assertEquals(invoke(\"phonetic\", \"hello\", \"metaphone\"), \"HL\");\n+        assertEquals(invoke(\"phonetic\", \"hello\", \"doublemetaphone\"), \"HL\");\n+    }\n"]}, {"id": "519948ae9aa3567b7facddf299da1972085a6a0d", "message": "Move Keyer and Distance registration to controller.js (#6487)\n\n\r\nFollow-up to #1906.", "patch": ["@@ -48,7 +47,0 @@ public class KeyerFactory {\n-    static {\n-        put(\"fingerprint\", new FingerprintKeyer());\n-        put(\"ngram-fingerprint\", new NGramFingerprintKeyer());\n-        put(\"metaphone3\", new Metaphone3Keyer());\n-        put(\"cologne-phonetic\", new ColognePhoneticKeyer());\n-    }\n-", "@@ -36,3 +35,0 @@ import java.util.Map;\n-import edu.mit.simile.vicino.distances.LevenshteinDistance;\n-import edu.mit.simile.vicino.distances.PPMDistance;\n-", "@@ -50,5 +46,0 @@ public class DistanceFactory {\n-    static {\n-        put(\"levenshtein\", new VicinoDistance(new LevenshteinDistance()));\n-        put(\"ppm\", new VicinoDistance(new PPMDistance()));\n-    }\n-", "@@ -36,0 +37 @@ import com.fasterxml.jackson.databind.JsonMappingException;\n+import org.testng.annotations.BeforeTest;", "@@ -64,0 +66,6 @@ public class BinningClustererTests extends RefineTest {\n+    @BeforeTest\n+    public void registerKeyers() {\n+        KeyerFactory.put(\"fingerprint\", new FingerprintKeyer());\n+        KeyerFactory.put(\"ngram-fingerprint\", new NGramFingerprintKeyer());\n+    }\n+", "@@ -36,0 +37,2 @@ import com.fasterxml.jackson.databind.JsonMappingException;\n+import edu.mit.simile.vicino.distances.PPMDistance;\n+import org.testng.annotations.BeforeTest;", "@@ -57,0 +60,5 @@ public class kNNClustererTests extends RefineTest {\n+    @BeforeTest\n+    public void registerDistance() {\n+        DistanceFactory.put(\"ppm\", new VicinoDistance(new PPMDistance()));\n+    }\n+", "@@ -43,0 +44 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n+import edu.mit.simile.vicino.distances.LevenshteinDistance;", "@@ -46,0 +48,4 @@ import org.testng.annotations.Test;\n+import com.google.refine.clustering.binning.KeyerFactory;\n+import com.google.refine.clustering.binning.Metaphone3Keyer;\n+import com.google.refine.clustering.knn.DistanceFactory;\n+import com.google.refine.clustering.knn.VicinoDistance;", "@@ -68,0 +74,3 @@ public class GetClusteringFunctionsAndDistancesCommandTest {\n+\n+        DistanceFactory.put(\"levenshtein\", new VicinoDistance(new LevenshteinDistance()));\n+        KeyerFactory.put(\"metaphone3\", new Metaphone3Keyer());", "@@ -32,0 +33 @@ import org.testng.Assert;\n+import org.testng.annotations.BeforeTest;", "@@ -35,0 +37,3 @@ import com.google.refine.RefineTest;\n+import com.google.refine.clustering.binning.ColognePhoneticKeyer;\n+import com.google.refine.clustering.binning.KeyerFactory;\n+import com.google.refine.clustering.binning.Metaphone3Keyer;", "@@ -39,0 +44,6 @@ public class PhoneticTests extends RefineTest {\n+    @BeforeTest\n+    public void registerKeyers() {\n+        KeyerFactory.put(\"metaphone3\", new Metaphone3Keyer());\n+        KeyerFactory.put(\"cologne-phonetic\", new ColognePhoneticKeyer());\n+    }\n+\n"]}, {"id": "f38794eb7750be6f273fcb25ff1679f90c6f1143", "message": "Move exporter registration to controller.js (#6504)\n\nAs a preparation for more Maven modularization.", "patch": ["@@ -39,3 +39 @@ import java.util.Map;\n-import com.google.refine.exporters.sql.SqlExporter;\n-\n-abstract public class ExporterRegistry {\n+public class ExporterRegistry {", "@@ -45,17 +42,0 @@ abstract public class ExporterRegistry {\n-    static {\n-        s_formatToExporter.put(\"csv\", new CsvExporter());\n-        s_formatToExporter.put(\"tsv\", new CsvExporter('\\t'));\n-        s_formatToExporter.put(\"*sv\", new CsvExporter());\n-\n-        s_formatToExporter.put(\"xls\", new XlsExporter(false));\n-        s_formatToExporter.put(\"xlsx\", new XlsExporter(true));\n-\n-        s_formatToExporter.put(\"ods\", new OdsExporter());\n-\n-        s_formatToExporter.put(\"html\", new HtmlTableExporter());\n-\n-        s_formatToExporter.put(\"template\", new TemplatingExporter());\n-\n-        s_formatToExporter.put(\"sql\", new SqlExporter());\n-    }\n-\n"]}, {"id": "cb2ac612f5a9360454d0a6e7000c28303ba61bba", "message": "Merge phonetic extension into the main app (#6503)\n\nCloses #6488.", "patch": ["+++ /dev/null", "@@ -1,30 +0,0 @@\n-\n-package org.openrefine.phonetic.keyers;\n-\n-import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.language.bm.BeiderMorseEncoder;\n-\n-import com.google.refine.clustering.binning.Keyer;\n-\n-public class BeiderMorseKeyer extends Keyer {\n-\n-    protected BeiderMorseEncoder encoder = new BeiderMorseEncoder();\n-\n-    @Override\n-    public String key(String string, Object... params) {\n-        try {\n-            /*\n-             * Beider Morse encoding can return multiple phonetic encodings, separated by |. Ideally the Keyer interface\n-             * should be changed to allow for multiple values to be returned (and the clustering code should be adapted\n-             * accourdingly).\n-             * \n-             * As a simple workaround we only return the first value. We could also return the entire list but it would\n-             * make matching harder.\n-             */\n-            return encoder.encode(string).split(\"\\\\|\")[0];\n-        } catch (EncoderException e) {\n-            return string;\n-        }\n-    }\n-\n-}\n+++ /dev/null", "@@ -1,17 +0,0 @@\n-\n-package org.openrefine.phonetic.keyers;\n-\n-import org.apache.commons.codec.language.DaitchMokotoffSoundex;\n-\n-import com.google.refine.clustering.binning.Keyer;\n-\n-public class DaitchMokotoffKeyer extends Keyer {\n-\n-    protected DaitchMokotoffSoundex encoder = new DaitchMokotoffSoundex();\n-\n-    @Override\n-    public String key(String string, Object... params) {\n-        return encoder.encode(string);\n-    }\n-\n-}\n+++ /dev/null", "@@ -1,29 +0,0 @@\n-\n-package org.openrefine.phonetic.keyers;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.clustering.binning.Keyer;\n-\n-public class BeiderMorseKeyerTest {\n-\n-    Keyer keyer = new BeiderMorseKeyer();\n-\n-    @Test\n-    public void testKey() {\n-        assertEquals(keyer.key(\"Alphonse\"), \"YlfYnzi\");\n-    }\n-\n-    @Test\n-    public void testAccents() {\n-        assertEquals(keyer.key(\"\u00c9l\u00e9onore\"), \"ilionor\");\n-    }\n-\n-    @Test\n-    public void testEmpty() {\n-        assertEquals(keyer.key(\"\"), \"\");\n-    }\n-\n-}\n+++ /dev/null", "@@ -1,28 +0,0 @@\n-\n-package org.openrefine.phonetic.keyers;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-import org.testng.annotations.Test;\n-\n-import com.google.refine.clustering.binning.Keyer;\n-\n-public class DaitchMokotoffKeyerTest {\n-\n-    protected Keyer keyer = new DaitchMokotoffKeyer();\n-\n-    @Test\n-    public void testDaitchMokotoff() {\n-        assertEquals(keyer.key(\"Alphonse\"), \"087640\");\n-    }\n-\n-    @Test\n-    public void testAccents() {\n-        assertEquals(keyer.key(\"\u00c9l\u00e9onore\"), \"086900\");\n-    }\n-\n-    @Test\n-    public void testEmpty() {\n-        assertEquals(keyer.key(\"\"), \"000000\");\n-    }\n-}\n--- /dev/null", "@@ -0,0 +1,28 @@\n+\n+package com.google.refine.clustering.binning;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.language.bm.BeiderMorseEncoder;\n+\n+public class BeiderMorseKeyer extends Keyer {\n+\n+    protected BeiderMorseEncoder encoder = new BeiderMorseEncoder();\n+\n+    @Override\n+    public String key(String string, Object... params) {\n+        try {\n+            /*\n+             * Beider Morse encoding can return multiple phonetic encodings, separated by |. Ideally the Keyer interface\n+             * should be changed to allow for multiple values to be returned (and the clustering code should be adapted\n+             * accourdingly).\n+             * \n+             * As a simple workaround we only return the first value. We could also return the entire list but it would\n+             * make matching harder.\n+             */\n+            return encoder.encode(string).split(\"\\\\|\")[0];\n+        } catch (EncoderException e) {\n+            return string;\n+        }\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,15 @@\n+\n+package com.google.refine.clustering.binning;\n+\n+import org.apache.commons.codec.language.DaitchMokotoffSoundex;\n+\n+public class DaitchMokotoffKeyer extends Keyer {\n+\n+    protected DaitchMokotoffSoundex encoder = new DaitchMokotoffSoundex();\n+\n+    @Override\n+    public String key(String string, Object... params) {\n+        return encoder.encode(string);\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,27 @@\n+\n+package com.google.refine.clustering.binning;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import org.testng.annotations.Test;\n+\n+public class BeiderMorseKeyerTest {\n+\n+    Keyer keyer = new BeiderMorseKeyer();\n+\n+    @Test\n+    public void testKey() {\n+        assertEquals(keyer.key(\"Alphonse\"), \"YlfYnzi\");\n+    }\n+\n+    @Test\n+    public void testAccents() {\n+        assertEquals(keyer.key(\"\u00c9l\u00e9onore\"), \"ilionor\");\n+    }\n+\n+    @Test\n+    public void testEmpty() {\n+        assertEquals(keyer.key(\"\"), \"\");\n+    }\n+\n+}\n--- /dev/null", "@@ -0,0 +1,26 @@\n+\n+package com.google.refine.clustering.binning;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import org.testng.annotations.Test;\n+\n+public class DaitchMokotoffKeyerTest {\n+\n+    protected Keyer keyer = new DaitchMokotoffKeyer();\n+\n+    @Test\n+    public void testDaitchMokotoff() {\n+        assertEquals(keyer.key(\"Alphonse\"), \"087640\");\n+    }\n+\n+    @Test\n+    public void testAccents() {\n+        assertEquals(keyer.key(\"\u00c9l\u00e9onore\"), \"086900\");\n+    }\n+\n+    @Test\n+    public void testEmpty() {\n+        assertEquals(keyer.key(\"\"), \"000000\");\n+    }\n+}\n"]}, {"id": "c5e1da34f0263924db187a74ee3cd01bcb75769e", "message": "Try harder to return separator guess. Fixes #6516 (#6524)\n\nIn cases where the Univocity guesser and our guesser disagree,\r\nreturn our separator guess rather than just punting.\r\n\r\nAlso remove magic numbers and simplify.", "patch": ["@@ -72,0 +73 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n+    public static final int GUESSER_LINE_COUNT = 100;", "@@ -210,5 +211,2 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-                        if (format.getDelimiter() == separator.separator) {\n-                            // They both agree - yay!\n-                            return StringEscapeUtils.escapeJava(Character.toString(separator.separator));\n-                        } else {\n-                            logger.warn(\"Delimiter guesses disagree - uniVocity: {} - internal: {}\", format.getDelimiter(),\n+                        if (format.getDelimiter() != separator.separator) {\n+                            logger.warn(\"Delimiter guesses disagree - uniVocity: '{}' - internal: '{}'\", format.getDelimiter(),", "@@ -216,0 +215,2 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n+                        // Even if they disagree, use our guess for backward compatibility\n+                        return StringEscapeUtils.escapeJava(Character.toString(separator.separator));", "@@ -227 +226,0 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-", "@@ -248,0 +248 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n+            // We could provide a set of delimiters to consider below if we wanted to restrict this", "@@ -250 +250 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-            settings.setFormatDetectorRowSampleCount(100);\n+            settings.setFormatDetectorRowSampleCount(GUESSER_LINE_COUNT); // default is 20, but let's match our guesser", "@@ -253,5 +253 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-            for (int i = 0; i < 20; i++) {\n-                if (parser.parseNext() == null) {\n-                    break;\n-                }\n-            }\n+            // Format guesser result is available as soon as beginParsing() completes", "@@ -283 +279 @@ public class SeparatorBasedImporter extends TabularImportingParserBase {\n-                        lineCount < 100 &&\n+                        lineCount < GUESSER_LINE_COUNT &&\n"]}, {"id": "78bc6d52dc85a023a04658a1ebf99c6c63707d15", "message": "Remove dependency to POI in FileProjectManager (#6506)\n\n* Remove dependency to POI in FileProjectManager\r\n\r\n* Also deprecate own IOUtils to be replaced by Java 9+ methods\r\n\r\n* Fix typo in Javadoc", "patch": ["@@ -56 +55,0 @@ import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n-import org.apache.poi.util.IOUtils;", "@@ -193 +192 @@ public class FileProjectManager extends ProjectManager {\n-                    IOUtils.copy(tin, fout);\n+                    tin.transferTo(fout);", "@@ -41,0 +42 @@ import java.io.OutputStream;\n+@Deprecated(since = \"3.9\")", "@@ -45,0 +47,4 @@ public class IOUtils {\n+    /**\n+     * @deprecated use {@link InputStream#transferTo(OutputStream)}\n+     */\n+    @Deprecated(since = \"3.9\")", "@@ -56,0 +62,4 @@ public class IOUtils {\n+    /**\n+     * @deprecated use {@link InputStream#transferTo(OutputStream)} in combination with {@link FileOutputStream}\n+     */\n+    @Deprecated(since = \"3.9\")\n"]}, {"id": "56f178ec6b63802803ae55453f8564f63d9df565", "message": "chore: remove repetitive words (#6545)\n\nSigned-off-by: growfrow <growfrow@outlook.com>", "patch": ["@@ -81 +81 @@ public class XmlImportUtilities extends TreeImportUtilities {\n-     *         hierarchy with the tag name at the last index null if the the tag is not found.\n+     *         hierarchy with the tag name at the last index null if the tag is not found.\n"]}, {"id": "c612edcd377f542eef0cf8e3965488d63568861c", "message": "tests: Remove createCSVProject utilities (#6558)\n\nThose methods are only part of our test suite, the intention\r\nwith deprecating them without deleting them was to cater for\r\nany in-flight PRs. Keeping them longer will block modularization.", "patch": ["@@ -4 +3,0 @@ package org.openrefine.wikibase.testing;\n-import static org.mockito.Mockito.mock;", "@@ -10 +8,0 @@ import java.io.Serializable;\n-import java.io.StringReader;", "@@ -14 +11,0 @@ import java.util.List;\n-import com.fasterxml.jackson.databind.node.ObjectNode;", "@@ -22,2 +18,0 @@ import com.google.refine.RefineServletStub;\n-import com.google.refine.RefineTest;\n-import com.google.refine.importers.SeparatorBasedImporter;", "@@ -39,35 +33,0 @@ public class WikidataRefineTest {\n-    /**\n-     * @deprecated use {@link #createProject(String[], Serializable[][])}\n-     */\n-    @Deprecated\n-    public Project createCSVProject(String input) {\n-        return createCSVProject(\"test project\", input);\n-    }\n-\n-    /**\n-     * @deprecated use {@link #createProject(String, String[], Serializable[][])}\n-     */\n-    @Deprecated\n-    protected Project createCSVProject(String projectName, String input) {\n-        Project project = new Project();\n-\n-        ProjectMetadata metadata = new ProjectMetadata();\n-        metadata.setName(projectName);\n-\n-        ObjectNode options = mock(ObjectNode.class);\n-        RefineTest.prepareImportOptions(options, \",\", -1, 0, 0, 1, false, false);\n-\n-        ImportingJob job = ImportingManager.createJob();\n-\n-        SeparatorBasedImporter importer = new SeparatorBasedImporter();\n-\n-        List<Exception> exceptions = new ArrayList<Exception>();\n-        importer.parseOneFile(project, metadata, job, \"filesource\", new StringReader(input), -1, options, exceptions);\n-        project.update();\n-        ProjectManager.singleton.registerProject(project, metadata);\n-\n-        projects.add(project);\n-        importingJobs.add(job);\n-        return project;\n-    }\n-", "@@ -46 +45,0 @@ import java.io.Serializable;\n-import java.io.StringReader;", "@@ -71 +69,0 @@ import com.google.refine.grel.Function;\n-import com.google.refine.importers.SeparatorBasedImporter;", "@@ -148,38 +145,0 @@ public class RefineTest {\n-    /**\n-     * @deprecated use {@link #createProject(String[], Serializable[][])} instead, so that the project's contents are\n-     *             more readable in the test\n-     */\n-    @Deprecated\n-    protected Project createCSVProject(String input) {\n-        return createCSVProject(\"test project\", input);\n-    }\n-\n-    /**\n-     * @deprecated use {@link #createProject(String, String[], Serializable[][])} instead, so that the project's\n-     *             contents are more readable in the test\n-     */\n-    @Deprecated\n-    protected Project createCSVProject(String projectName, String input) {\n-\n-        Project project = new Project();\n-\n-        ProjectMetadata metadata = new ProjectMetadata();\n-        metadata.setName(projectName);\n-\n-        ObjectNode options = mock(ObjectNode.class);\n-        prepareImportOptions(options, \",\", -1, 0, 0, 1, false, false);\n-\n-        ImportingJob job = ImportingManager.createJob();\n-\n-        SeparatorBasedImporter importer = new SeparatorBasedImporter();\n-\n-        List<Exception> exceptions = new ArrayList<Exception>();\n-        importer.parseOneFile(project, metadata, job, \"filesource\", new StringReader(input), -1, options, exceptions);\n-        ProjectManager.singleton.registerProject(project, metadata);\n-        project.update();\n-\n-        projects.add(project);\n-        importingJobs.add(job);\n-        return project;\n-    }\n-\n"]}, {"id": "b8ce339137ae5a2ed0e483b0c59a9f0d21c0b328", "message": "tests: Remove dependency to Jena in FileProjectManagerTests (#6557)\n\n", "patch": ["@@ -43,0 +44 @@ import java.nio.file.Paths;\n+import com.fasterxml.jackson.databind.JsonNode;", "@@ -45,2 +45,0 @@ import org.apache.commons.io.FileUtils;\n-import org.apache.jena.atlas.json.JSON;\n-import org.apache.jena.atlas.json.JsonObject;", "@@ -52,0 +52 @@ import com.google.refine.util.GetProjectIDException;\n+import com.google.refine.util.ParsingUtilities;", "@@ -124,2 +124,2 @@ public class FileProjectManagerTests {\n-        JsonObject json = JSON.parse(inputStream);\n-        assertTrue(json.get(\"projectIDs\").getAsArray().isEmpty(), \"deleted project still in workspace.json\");\n+        JsonNode json = ParsingUtilities.mapper.readTree(inputStream);\n+        assertTrue(json.get(\"projectIDs\").isEmpty(), \"deleted project still in workspace.json\");\n"]}]