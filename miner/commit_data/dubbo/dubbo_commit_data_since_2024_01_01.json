[{"id": "011d6e0a718280433aeb2e777366e55b20a51cfe", "message": "Exclude `UseJavaPackageAsPath` to parameters (#13595)\n\n", "patch": ["@@ -399,0 +400 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {\n+    @Parameter(excluded = true, attribute = false)", "@@ -404 +404,0 @@ public abstract class AbstractServiceConfig extends AbstractInterfaceConfig {\n-    @Parameter(excluded = true)"]}, {"id": "1bdbfd864740f6023762b788c7ae0d42f00fd5d6", "message": "Fix MergeableClusterInvoker log issue (#13593)\n\n* Fix MergeableClusterInvoker log issue\r\n\r\n* Code style fix\r\n\r\n* Update log level\r\n\r\n* Update log level\r\n\r\n* Update log level\r\n\r\n* Add exception stacktrace", "patch": ["@@ -18,0 +19 @@ package org.apache.dubbo.rpc.cluster.support;\n+import org.apache.dubbo.common.constants.LoggerCodeConstants;", "@@ -72,2 +73,4 @@ public class MergeableClusterInvoker<T> extends AbstractClusterInvoker<T> {\n-                            log.debug(\"No available provider for service\" + getUrl().getServiceKey() + \" on group \"\n-                                    + invoker.getUrl().getGroup() + \", will continue to try another group.\");\n+                            log.debug(\n+                                    \"No available provider for service\" + getUrl().getServiceKey() + \" on group \"\n+                                            + invoker.getUrl().getGroup() + \", will continue to try another group.\",\n+                                    e);", "@@ -96 +99,15 @@ public class MergeableClusterInvoker<T> extends AbstractClusterInvoker<T> {\n-            results.put(invoker.getUrl().getServiceKey(), invokeWithContext(invoker, subInvocation));\n+            try {\n+                results.put(invoker.getUrl().getServiceKey(), invokeWithContext(invoker, subInvocation));\n+            } catch (RpcException e) {\n+                if (e.isNoInvokerAvailableAfterFilter()) {\n+                    log.warn(\n+                            LoggerCodeConstants.CLUSTER_NO_VALID_PROVIDER,\n+                            e.getCause().getMessage(),\n+                            \"\",\n+                            \"No available provider for service\" + getUrl().getServiceKey() + \" on group \"\n+                                    + invoker.getUrl().getGroup() + \", will continue to try another group.\",\n+                            e);\n+                } else {\n+                    throw e;\n+                }\n+            }"]}, {"id": "e583187aac96760860af5d67c965d3391ff2ff4d", "message": "Fix triple injvm deep copy issue (#13597)\n\n", "patch": ["@@ -24,0 +25 @@ import org.apache.dubbo.common.serialize.Serialization;\n+import org.apache.dubbo.common.utils.ProtobufUtils;", "@@ -42,0 +44,4 @@ public class DefaultParamDeepCopyUtil implements ParamDeepCopyUtil {\n+        // TODO: maybe we have better way to do this\n+        if (src != null && ProtobufUtils.isProtobufClass(src.getClass())) {\n+            return (T) src;\n+        }"]}, {"id": "670f997eac5bc0727628762f59cd30417e0f6c58", "message": "fix AbortPolicyWithReport Semaphore lock not released (#13609)\n\nCo-authored-by: wuzihan <wuzihan@youzan.com>", "patch": ["@@ -159,6 +159 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-        // To avoid multiple dump, check again\n-        if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n-            return;\n-        }\n-\n-        ExecutorService pool = Executors.newSingleThreadExecutor();\n+        ExecutorService pool = null;", "@@ -165,0 +161,5 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n+            // To avoid multiple dump, check again\n+            if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n+                return;\n+            }\n+            pool = Executors.newSingleThreadExecutor();", "@@ -189 +188,0 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-                    guard.release();", "@@ -192,0 +192 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n+            guard.release();", "@@ -194 +194,3 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            pool.shutdown();\n+            if (pool != null) {\n+                pool.shutdown();\n+            }"]}, {"id": "20e0b57a8187928f277f4c0f7b1b1c5cef198308", "message": "fix\n", "patch": ["@@ -159 +159,6 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-        ExecutorService pool = null;\n+        // To avoid multiple dump, check again\n+        if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n+            return;\n+        }\n+\n+        ExecutorService pool = Executors.newSingleThreadExecutor();", "@@ -161,5 +165,0 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            // To avoid multiple dump, check again\n-            if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n-                return;\n-            }\n-            pool = Executors.newSingleThreadExecutor();", "@@ -188,0 +189 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n+                    guard.release();", "@@ -192 +192,0 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            guard.release();", "@@ -194,3 +194 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            if (pool != null) {\n-                pool.shutdown();\n-            }\n+            pool.shutdown();"]}, {"id": "edf00b3af9c09a09c91773de53d3ee6aadaad22c", "message": "Merge branch '3.2' of https://github.com/apache/dubbo into 3.2\n", "patch": ["@@ -159,6 +159 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-        // To avoid multiple dump, check again\n-        if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n-            return;\n-        }\n-\n-        ExecutorService pool = Executors.newSingleThreadExecutor();\n+        ExecutorService pool = null;", "@@ -165,0 +161,5 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n+            // To avoid multiple dump, check again\n+            if (System.currentTimeMillis() - lastPrintTime < TEN_MINUTES_MILLS) {\n+                return;\n+            }\n+            pool = Executors.newSingleThreadExecutor();", "@@ -189 +188,0 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-                    guard.release();", "@@ -192,0 +192 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n+            guard.release();", "@@ -194 +194,3 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            pool.shutdown();\n+            if (pool != null) {\n+                pool.shutdown();\n+            }"]}, {"id": "4c528230eb4b4751b176e5dc94a20eddf6df20ae", "message": "add test ci\n", "patch": ["@@ -57 +57 @@ public class RegistryMetricsCollector extends CombMetricsCollector<RegistryEvent\n-    private Boolean collectEnabled = null;\n+    private Boolean collectEnabled = false;"]}, {"id": "50612ad3a73d313d11a045a829d6129290ccc9cd", "message": "Revert 13609 due to misoperation (#13634)\n\n* Revert \"add test ci\"\r\n\r\nThis reverts commit 4c528230eb4b4751b176e5dc94a20eddf6df20ae.\r\n\r\n* Revert \"fix\"\r\n\r\nThis reverts commit 20e0b57a8187928f277f4c0f7b1b1c5cef198308.", "patch": ["@@ -57 +57 @@ public class RegistryMetricsCollector extends CombMetricsCollector<RegistryEvent\n-    private Boolean collectEnabled = false;\n+    private Boolean collectEnabled = null;"]}, {"id": "966efaab85a30d3d9339093381a7b069c2d71c64", "message": "do not invoke test method(#13589) (#13601)\n\n* do not invoke test method(#13589)\r\n\r\n* Fix style check\r\n\r\n---------\r\n\r\nCo-authored-by: Albumen Kevin <jhq0812@gmail.com>", "patch": ["@@ -20,0 +21 @@ import org.apache.dubbo.common.extension.Activate;\n+import org.apache.dubbo.common.extension.DisableInject;", "@@ -143 +144,2 @@ public class ExceptionFilter implements Filter, Filter.Listener {\n-    public void setLogger(ErrorTypeAwareLogger logger) {\n+    @DisableInject\n+    public void mockLogger(ErrorTypeAwareLogger logger) {", "@@ -66 +66 @@ class ExceptionFilterTest {\n-            exceptionFilter.setLogger(failsafeLogger);\n+            exceptionFilter.mockLogger(failsafeLogger);"]}, {"id": "05d44abe933f03024f57efd8779d6595f38e7395", "message": "add registryUrl parameters from multipleRegistryUrl #13603 (#13633)\n\nCo-authored-by: shaowei ye <yesw@broada.com>", "patch": ["@@ -127,2 +127,3 @@ public class MultipleRegistry extends AbstractRegistry {\n-            final URL registryUrl =\n-                    URL.valueOf(tmpUrl).addParameterIfAbsent(CHECK_KEY, url.getParameter(CHECK_KEY, \"true\"));\n+            final URL registryUrl = URL.valueOf(tmpUrl)\n+                    .addParametersIfAbsent(url.getParameters())\n+                    .addParameterIfAbsent(CHECK_KEY, url.getParameter(CHECK_KEY, \"true\"));"]}, {"id": "9d04bc5c250f9a86e7d3dfb2ac03629fc9194693", "message": "stop startup if dubbo application name configuration is invalid (#13343)\n\n", "patch": ["@@ -493,0 +494,6 @@ public class ConfigValidationUtils {\n+        String name = config.getName();\n+        if (!checkName(NAME, name)) {\n+            throw new IllegalStateException(\n+                    String.format(\"please correct dubbo application name: %s at your spring config.\", name));\n+        }\n+", "@@ -507 +512,0 @@ public class ConfigValidationUtils {\n-        checkName(NAME, config.getName());", "@@ -735,2 +740,2 @@ public class ConfigValidationUtils {\n-    public static void checkName(String property, String value) {\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);\n+    public static boolean checkName(String property, String value) {\n+        return checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);", "@@ -792 +797 @@ public class ConfigValidationUtils {\n-    public static void checkProperty(String property, String value, int maxlength, Pattern pattern) {\n+    public static boolean checkProperty(String property, String value, int maxlength, Pattern pattern) {", "@@ -794 +799 @@ public class ConfigValidationUtils {\n-            return;\n+            return false;", "@@ -802,0 +808 @@ public class ConfigValidationUtils {\n+            return false;", "@@ -813,0 +820 @@ public class ConfigValidationUtils {\n+                return false;", "@@ -815,0 +823 @@ public class ConfigValidationUtils {\n+        return true;", "@@ -876 +876 @@ class ReferenceConfigTest {\n-                .application(\"demo app\")\n+                .application(\"demo-app\")", "@@ -102,0 +103,3 @@ class ConfigValidationUtilsTest {\n+            mockedStatic\n+                    .when(() -> ConfigValidationUtils.checkName(any(), any()))\n+                    .thenReturn(true);"]}, {"id": "1d9535518e06aca72c3d2c3df0785b2463a0da91", "message": "DefaultProviderFirstParams add THREADPOOL_KEY (#13637)\n\n* DefaultProviderFirstParams add THREADPOOL_KEY\r\n\r\n* DefaultProviderFirstParams add THREADPOOL_KEY\r\n\r\n* DefaultProviderFirstParams add THREADPOOL_KEY\r\n\r\n* format", "patch": ["@@ -26,0 +27 @@ import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KE\n+import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE;", "@@ -29,0 +31 @@ import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n+import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;", "@@ -35 +37,8 @@ public class DefaultProviderFirstParams implements ProviderFirstParams {\n-            addAll(Arrays.asList(RELEASE_KEY, DUBBO_VERSION_KEY, METHODS_KEY, TIMESTAMP_KEY, TAG_KEY));\n+            addAll(Arrays.asList(\n+                    RELEASE_KEY,\n+                    DUBBO_VERSION_KEY,\n+                    METHODS_KEY,\n+                    TIMESTAMP_KEY,\n+                    TAG_KEY,\n+                    THREADPOOL_KEY,\n+                    EXECUTOR_MANAGEMENT_MODE));"]}, {"id": "df0de49b8c19cae9b9d1d1e4f6e3a37111c6f7ec", "message": "Fix URL parse pwd failed when the pwd contains '#' (#13631)\n\n* Fix URL parse pwd failed when the pwd contains #\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>\r\n\r\n* Parse url pwd\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>\r\n\r\n* Fix npe\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>\r\n\r\n* Remove username and pwd from parameter\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>\r\n\r\n* Add ut\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>", "patch": ["@@ -20,0 +21 @@ import org.apache.dubbo.common.url.component.URLItemCache;\n+import org.apache.dubbo.common.utils.StringUtils;", "@@ -26,0 +28,2 @@ import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY_PREF\n+import static org.apache.dubbo.common.constants.CommonConstants.PASSWORD_KEY;\n+import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;", "@@ -45,2 +48,2 @@ public final class URLStrParser {\n-     * @param decodedURLStr : after {@link URL#decode} string\n-     *                      decodedURLStr format: protocol://username:password@host:port/path?k1=v1&k2=v2\n+     * @param decodedURLStr : after {@link URL#decode} string decodedURLStr format:\n+     *                      protocol://username:password@host:port/path?k1=v1&k2=v2", "@@ -105,0 +109 @@ public final class URLStrParser {\n+", "@@ -149,0 +154,9 @@ public final class URLStrParser {\n+        if (username == null && parameters != null && StringUtils.isNotEmpty(parameters.get(USERNAME_KEY))) {\n+            username = parameters.get(USERNAME_KEY);\n+            parameters.remove(USERNAME_KEY);\n+        }\n+\n+        if (password == null && parameters != null && StringUtils.isNotEmpty(parameters.get(PASSWORD_KEY))) {\n+            password = parameters.get(PASSWORD_KEY);\n+            parameters.remove(PASSWORD_KEY);\n+        }", "@@ -206,2 +219,2 @@ public final class URLStrParser {\n-     * @param encodedURLStr : after {@link URL#encode(String)} string\n-     *                      encodedURLStr after decode format: protocol://username:password@host:port/path?k1=v1&k2=v2\n+     * @param encodedURLStr : after {@link URL#encode(String)} string encodedURLStr after decode format:\n+     *                      protocol://username:password@host:port/path?k1=v1&k2=v2", "@@ -50,0 +51 @@ class URLStrParserTest {\n+        testCases.add(\"zookeeper://test10.301.216.302:2181?username=t1#&password=t2#\");"]}, {"id": "16cdc5290e65af9db528470f7f7f51657dd61939", "message": "Revert \"Fix URL parse pwd failed when the pwd contains '#'\" (#13645)\n\n", "patch": ["@@ -21 +20,0 @@ import org.apache.dubbo.common.url.component.URLItemCache;\n-import org.apache.dubbo.common.utils.StringUtils;", "@@ -28,2 +26,0 @@ import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_KEY_PREF\n-import static org.apache.dubbo.common.constants.CommonConstants.PASSWORD_KEY;\n-import static org.apache.dubbo.common.constants.CommonConstants.USERNAME_KEY;", "@@ -48,2 +45,2 @@ public final class URLStrParser {\n-     * @param decodedURLStr : after {@link URL#decode} string decodedURLStr format:\n-     *                      protocol://username:password@host:port/path?k1=v1&k2=v2\n+     * @param decodedURLStr : after {@link URL#decode} string\n+     *                      decodedURLStr format: protocol://username:password@host:port/path?k1=v1&k2=v2", "@@ -109 +105,0 @@ public final class URLStrParser {\n-", "@@ -154,9 +149,0 @@ public final class URLStrParser {\n-        if (username == null && parameters != null && StringUtils.isNotEmpty(parameters.get(USERNAME_KEY))) {\n-            username = parameters.get(USERNAME_KEY);\n-            parameters.remove(USERNAME_KEY);\n-        }\n-\n-        if (password == null && parameters != null && StringUtils.isNotEmpty(parameters.get(PASSWORD_KEY))) {\n-            password = parameters.get(PASSWORD_KEY);\n-            parameters.remove(PASSWORD_KEY);\n-        }", "@@ -219,2 +206,2 @@ public final class URLStrParser {\n-     * @param encodedURLStr : after {@link URL#encode(String)} string encodedURLStr after decode format:\n-     *                      protocol://username:password@host:port/path?k1=v1&k2=v2\n+     * @param encodedURLStr : after {@link URL#encode(String)} string\n+     *                      encodedURLStr after decode format: protocol://username:password@host:port/path?k1=v1&k2=v2", "@@ -51 +50,0 @@ class URLStrParserTest {\n-        testCases.add(\"zookeeper://test10.301.216.302:2181?username=t1#&password=t2#\");"]}, {"id": "1cd57821df6f17b498ab784b0b1f46b958ecf81f", "message": "Revert \"check application name\" (#13647)\n\n", "patch": ["@@ -494,6 +493,0 @@ public class ConfigValidationUtils {\n-        String name = config.getName();\n-        if (!checkName(NAME, name)) {\n-            throw new IllegalStateException(\n-                    String.format(\"please correct dubbo application name: %s at your spring config.\", name));\n-        }\n-", "@@ -512,0 +507 @@ public class ConfigValidationUtils {\n+        checkName(NAME, config.getName());", "@@ -740,2 +735,2 @@ public class ConfigValidationUtils {\n-    public static boolean checkName(String property, String value) {\n-        return checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);\n+    public static void checkName(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);", "@@ -797 +792 @@ public class ConfigValidationUtils {\n-    public static boolean checkProperty(String property, String value, int maxlength, Pattern pattern) {\n+    public static void checkProperty(String property, String value, int maxlength, Pattern pattern) {", "@@ -799 +794 @@ public class ConfigValidationUtils {\n-            return false;\n+            return;", "@@ -808 +802,0 @@ public class ConfigValidationUtils {\n-            return false;", "@@ -820 +813,0 @@ public class ConfigValidationUtils {\n-                return false;", "@@ -823 +815,0 @@ public class ConfigValidationUtils {\n-        return true;", "@@ -876 +876 @@ class ReferenceConfigTest {\n-                .application(\"demo-app\")\n+                .application(\"demo app\")", "@@ -103,3 +102,0 @@ class ConfigValidationUtilsTest {\n-            mockedStatic\n-                    .when(() -> ConfigValidationUtils.checkName(any(), any()))\n-                    .thenReturn(true);"]}, {"id": "714e0762844c0a227255171e467b6b1d963043c3", "message": "Revert \"DefaultProviderFirstParams add THREADPOOL_KEY\" (#13648)\n\n", "patch": ["@@ -27 +26,0 @@ import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KE\n-import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEMENT_MODE;", "@@ -31 +29,0 @@ import static org.apache.dubbo.common.constants.CommonConstants.TAG_KEY;\n-import static org.apache.dubbo.common.constants.CommonConstants.THREADPOOL_KEY;", "@@ -37,8 +35 @@ public class DefaultProviderFirstParams implements ProviderFirstParams {\n-            addAll(Arrays.asList(\n-                    RELEASE_KEY,\n-                    DUBBO_VERSION_KEY,\n-                    METHODS_KEY,\n-                    TIMESTAMP_KEY,\n-                    TAG_KEY,\n-                    THREADPOOL_KEY,\n-                    EXECUTOR_MANAGEMENT_MODE));\n+            addAll(Arrays.asList(RELEASE_KEY, DUBBO_VERSION_KEY, METHODS_KEY, TIMESTAMP_KEY, TAG_KEY));"]}, {"id": "9d37c4e08310576e4a8032b9bd02bf7c6493365e", "message": "Add pond test cases (#13646)\n\n", "patch": ["@@ -41,2 +41,5 @@ class URLStrParserTest {\n-        testCases.add(\n-                \"dubbo://admin:admin123@192.168.1.41:28113/org.test.api.DemoService$Iface?anyhost=true&application=demo-service&dubbo=2.6.1&generic=false&interface=org.test.api.DemoService$Iface&methods=orbCompare,checkText,checkPicture&pid=65557&revision=1.4.17&service.filter=bootMetrics&side=provider&status=server&threads=200&timestamp=1583136298859&version=1.0.0\");\n+        testCases.add(\"dubbo://admin:admin123@192.168.1.41:28113/org.test.api\"\n+                + \".DemoService$Iface?anyhost=true&application=demo-service&dubbo=2.6.1&generic=false&interface=org\"\n+                + \".test.api.DemoService$Iface&methods=orbCompare,checkText,checkPicture&pid=65557&revision=1.4\"\n+                + \".17&service.filter=bootMetrics&side=provider&status=server&threads=200&timestamp=1583136298859\"\n+                + \"&version=1.0.0\");", "@@ -60,2 +63,2 @@ class URLStrParserTest {\n-        errorEncodedCases.add(\n-                \"dubbo%3a%2f%2f127.0.0.1%3ftest%3d%e2%96%b2%e2%96%bc%e2%97%80%e2%96%b6%e2%86%90%e2%86%91%e2%86%92%e2%86%93%e2%86%94%e2%86%95%e2%88%9e%c2%b1%e9%be%98%e9%9d%90%e9%bd%89%9%d%b\");\n+        errorEncodedCases.add(\"dubbo%3a%2f%2f127.0.0.1%3ftest%3d%e2%96%b2%e2%96%bc%e2%97%80%e2%96%b6%e2%86%90%e2%86\"\n+                + \"%91%e2%86%92%e2%86%93%e2%86%94%e2%86%95%e2%88%9e%c2%b1%e9%be%98%e9%9d%90%e9%bd%89%9%d%b\");", "@@ -95,0 +99,13 @@ class URLStrParserTest {\n+\n+    @Test\n+    void testPond() {\n+        String str = \"https://a#@b\";\n+\n+        URL url1 = URL.valueOf(str);\n+        URL url2 = URLStrParser.parseDecodedStr(str);\n+\n+        Assertions.assertEquals(\"https\", url1.getProtocol());\n+        Assertions.assertEquals(\"https\", url2.getProtocol());\n+        Assertions.assertEquals(\"a\", url1.getHost());\n+        Assertions.assertEquals(\"a\", url2.getHost());\n+    }"]}, {"id": "7a3ad4ab4151e672ffe3348d035ec44a31ee9c62", "message": "Hotfix rest Chinese encoding (#13617)\n\n* decode uri in RequestFacade\r\n\r\n* supplement the unit test\r\n\r\n* fix code style violations\r\n\r\n* remove duplicate codes\r\n\r\n* consider Accept-Charset as enc\r\n\r\n* run mvn spotless apply\r\n\r\n* add comment\r\n\r\n* take weight into consideration\r\n\r\n* fix code style violations according sonar\r\n\r\n* add DEFAULT_CHARSET\r\n\r\n---------\r\n\r\nCo-authored-by: chenxinyuan1 <chenxinyuan1@xiaomi.com>", "patch": ["@@ -192,0 +193,47 @@ public class RestClientTest {\n+\n+    @Test\n+    void testBuildURL() throws Exception {\n+        int port = NetUtils.getAvailablePort();\n+        URL url = new ServiceConfigURL(\n+                \"http\", \"localhost\", port, new String[] {Constants.BIND_PORT_KEY, String.valueOf(port)});\n+        HttpServer httpServer = new JettyHttpServer(url, new HttpHandler<HttpServletRequest, HttpServletResponse>() {\n+            @Override\n+            public void handle(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+                response.setCharacterEncoding(\"UTF-8\");\n+                response.getWriter().write(request.getQueryString());\n+            }\n+        });\n+\n+        RequestTemplate requestTemplate = new RequestTemplate(null, \"POST\", \"localhost:\" + port);\n+\n+        requestTemplate.addParam(\"name\", \"\u674e\u5f3a\");\n+        requestTemplate.addParam(\"age\", \"18\");\n+        requestTemplate.path(\"/hello/world\");\n+\n+        // When using the OKHttpRestClient, parameters will be encoded with UTF-8 and appended to the URL\n+        RestClient restClient = new OKHttpRestClient(new HttpClientConfig());\n+\n+        CompletableFuture<RestResult> send = restClient.send(requestTemplate);\n+\n+        RestResult restResult = send.get();\n+\n+        assertThat(new String(restResult.getBody()), is(\"name=%E6%9D%8E%E5%BC%BA&age=18\"));\n+\n+        // When using the HttpClientRestClient, parameters will be encoded with UTF-8 and appended to the URL\n+        restClient = new HttpClientRestClient(new HttpClientConfig());\n+\n+        send = restClient.send(requestTemplate);\n+\n+        restResult = send.get();\n+\n+        assertThat(new String(restResult.getBody()), is(\"name=%E6%9D%8E%E5%BC%BA&age=18\"));\n+\n+        // When using the URLConnectionRestClient, parameters won't be encoded and still appended to the URL\n+        restClient = new URLConnectionRestClient(new HttpClientConfig());\n+\n+        send = restClient.send(requestTemplate);\n+\n+        restResult = send.get();\n+\n+        assertThat(new String(restResult.getBody(), StandardCharsets.UTF_8), is(\"name=\u674e\u5f3a&age=18\"));\n+    }", "@@ -45,0 +46,2 @@ public interface RestConstant {\n+    String ACCEPT_CHARSET = \"Accept-Charset\";\n+    String WEIGHT_IDENTIFIER = \";q=\";", "@@ -56,0 +59 @@ public interface RestConstant {\n+    String DEFAULT_CHARSET = \"UTF-8\";", "@@ -19,0 +20 @@ import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.rpc.protocol.rest.constans.RestConstant;", "@@ -20,0 +22 @@ import org.apache.dubbo.rpc.protocol.rest.deploy.ServiceDeployer;\n+import org.apache.dubbo.rpc.protocol.rest.util.DataParseUtils;", "@@ -22,0 +25 @@ import java.io.IOException;\n+import java.net.URLDecoder;", "@@ -27,0 +31,2 @@ import java.util.Map;\n+import static org.apache.dubbo.rpc.protocol.rest.constans.RestConstant.DEFAULT_CHARSET;\n+", "@@ -57,0 +63,18 @@ public abstract class RequestFacade<T> {\n+        String decodedRequestURI = null;\n+\n+        try {\n+            String enc = DEFAULT_CHARSET;\n+            ArrayList<String> charset = headers.get(RestConstant.ACCEPT_CHARSET);\n+            // take the highest priority charset\n+            String[] parsed = DataParseUtils.parseAcceptCharset(charset);\n+            if (parsed != null && parsed.length > 0) {\n+                enc = parsed[0].toUpperCase();\n+            }\n+            decodedRequestURI = URLDecoder.decode(requestURI, enc);\n+        } catch (Throwable t) {\n+            // do nothing, try best to deliver\n+        }\n+\n+        if (StringUtils.isNotEmpty(decodedRequestURI)) {\n+            requestURI = decodedRequestURI;\n+        }", "@@ -18,0 +19,2 @@ package org.apache.dubbo.rpc.protocol.rest.util;\n+import org.apache.dubbo.common.lang.Nullable;\n+import org.apache.dubbo.common.utils.CollectionUtils;", "@@ -31,0 +34,2 @@ import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;", "@@ -33,0 +38,2 @@ import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;", "@@ -34,0 +41,3 @@ import java.util.StringTokenizer;\n+import java.util.TreeMap;\n+\n+import static org.apache.dubbo.rpc.protocol.rest.constans.RestConstant.WEIGHT_IDENTIFIER;", "@@ -211,0 +221,28 @@ public class DataParseUtils {\n+\n+    @Nullable\n+    public static String[] parseAcceptCharset(List<String> acceptCharsets) {\n+        if (CollectionUtils.isEmpty(acceptCharsets)) {\n+            return new String[0];\n+        }\n+\n+        SortedMap<Float, Set<String>> encodings = new TreeMap<>(Comparator.reverseOrder());\n+        float defaultWeight = 1.0f;\n+        for (String acceptCharset : acceptCharsets) {\n+            String[] charsets = acceptCharset.split(\",\");\n+            for (String charset : charsets) {\n+                charset = charset.trim();\n+                float weight = defaultWeight;\n+                String enc = charset;\n+                if (charset.contains(WEIGHT_IDENTIFIER)) {\n+                    String[] split = charset.split(WEIGHT_IDENTIFIER);\n+                    enc = split[0];\n+                    weight = Float.parseFloat(split[1]);\n+                }\n+                encodings.computeIfAbsent(weight, k -> new HashSet<>()).add(enc);\n+            }\n+        }\n+\n+        List<String> result = new ArrayList<>();\n+        encodings.values().forEach(result::addAll);\n+        return result.toArray(new String[0]);\n+    }", "@@ -21,0 +22 @@ import java.io.ByteArrayOutputStream;\n+import java.util.Arrays;", "@@ -58,0 +60,10 @@ public class DataParseUtilsTest {\n+\n+    @Test\n+    void testParseAcceptCharset() {\n+        String[] parsed = DataParseUtils.parseAcceptCharset(Arrays.asList(\"iso-8859-1\"));\n+        Assertions.assertTrue(Arrays.equals(parsed, new String[] {\"iso-8859-1\"}));\n+        parsed = DataParseUtils.parseAcceptCharset(Arrays.asList(\"utf-8, iso-8859-1;q=0.5\"));\n+        Assertions.assertTrue(Arrays.equals(parsed, new String[] {\"utf-8\", \"iso-8859-1\"}));\n+        parsed = DataParseUtils.parseAcceptCharset(Arrays.asList(\"utf-8, iso-8859-1;q=0.5, *;q=0.1\", \"utf-16;q=0.5\"));\n+        Assertions.assertEquals(\"utf-8\", parsed[0]);\n+    }", "@@ -32,0 +33,3 @@ import org.junit.jupiter.api.Test;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+", "@@ -97,0 +101,32 @@ public class NettyRequestFacadeTest {\n+\n+    @Test\n+    void testChineseDecoding() {\n+        String uri = \"/hello/world?name=%E6%9D%8E%E5%BC%BA&age=18\";\n+        DefaultFullHttpRequest defaultFullHttpRequest =\n+                new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri);\n+        defaultFullHttpRequest.headers().add(\"Accept-Charset\", \"utf-8, iso-8859-1;q=0.5, *;q=0.1\");\n+        defaultFullHttpRequest.headers().add(\"Accept-Charset\", \"utf-16;q=0.3\");\n+\n+        NettyRequestFacade nettyRequestFacade = new NettyRequestFacade(defaultFullHttpRequest, null);\n+        assertThat(nettyRequestFacade.getPath(), is(\"/hello/world\"));\n+        assertThat(nettyRequestFacade.getParameter(\"name\"), is(\"\u674e\u5f3a\"));\n+        assertThat(nettyRequestFacade.getParameter(\"age\"), is(\"18\"));\n+\n+        // Applying the decode method to the URI is acceptable, even if the URI is not encoded.\n+        uri = \"/hello/world?name=lily&age=18\";\n+        defaultFullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri);\n+\n+        nettyRequestFacade = new NettyRequestFacade(defaultFullHttpRequest, null);\n+        assertThat(nettyRequestFacade.getPath(), is(\"/hello/world\"));\n+        assertThat(nettyRequestFacade.getParameter(\"name\"), is(\"lily\"));\n+        assertThat(nettyRequestFacade.getParameter(\"age\"), is(\"18\"));\n+\n+        // When using URLConnectionRestClient, the URI won't be encoded, but it's still acceptable.\n+        uri = \"/hello/world?name=\u674e\u5f3a&age=18\";\n+        defaultFullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri);\n+\n+        nettyRequestFacade = new NettyRequestFacade(defaultFullHttpRequest, null);\n+        assertThat(nettyRequestFacade.getPath(), is(\"/hello/world\"));\n+        assertThat(nettyRequestFacade.getParameter(\"name\"), is(\"\u674e\u5f3a\"));\n+        assertThat(nettyRequestFacade.getParameter(\"age\"), is(\"18\"));\n+    }"]}, {"id": "2cf54f7947596abbf92f907853a2df7cbfc8b7fb", "message": "Close the connection but not the client (#13600)\n\n* Close the connection but not the client\r\n\r\n* Close the connection but not the client", "patch": ["@@ -134 +134,2 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n-                ch.closeFuture().addListener(channelFuture -> doClose());\n+                // set null but do not close this client, it will be reconnect in the future\n+                ch.closeFuture().addListener(channelFuture -> channel.set(null));", "@@ -153,3 +154 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n-            if (!closePromise.isDone()) {\n-                closePromise.setSuccess(null);\n-            }\n+            closePromise.setSuccess(null);", "@@ -73 +73,3 @@ public class TriplePingPongHandler extends ChannelDuplexHandler {\n-            ctx.close();\n+            if (ctx.channel().isActive()) {\n+                ctx.close();\n+            }"]}, {"id": "29b0c7298d06fb401498b809d1a19fa6396f2cb5", "message": "Fix port unification issue in triple and dubbo protocol (#13696)\n\n* Fix issue of tri Portunification\r\n\r\n* style fix", "patch": ["@@ -19,0 +20 @@ import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.extension.ExtensionLoader;", "@@ -25 +25,0 @@ import org.apache.dubbo.remoting.transport.AbstractServer;\n-import java.util.List;", "@@ -27,0 +28,2 @@ import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;", "@@ -30 +32,5 @@ public abstract class AbstractPortUnificationServer extends AbstractServer {\n-    private final List<WireProtocol> protocols;\n+\n+    /**\n+     * extension name -> activate WireProtocol\n+     */\n+    private final Map<String, WireProtocol> protocols;", "@@ -47,3 +53,4 @@ public abstract class AbstractPortUnificationServer extends AbstractServer {\n-        this.protocols = url.getOrDefaultFrameworkModel()\n-                .getExtensionLoader(WireProtocol.class)\n-                .getActivateExtension(url, new String[0]);\n+        ExtensionLoader<WireProtocol> extensionLoader =\n+                url.getOrDefaultFrameworkModel().getExtensionLoader(WireProtocol.class);\n+        this.protocols = extensionLoader.getActivateExtension(url, new String[0]).stream()\n+                .collect(Collectors.toConcurrentMap(extensionLoader::getExtensionName, Function.identity()));", "@@ -52 +59 @@ public abstract class AbstractPortUnificationServer extends AbstractServer {\n-    public List<WireProtocol> getProtocols() {\n+    public Map<String, WireProtocol> getProtocols() {", "@@ -159 +159 @@ public class NettyPortUnificationServer extends AbstractPortUnificationServer {\n-        for (WireProtocol protocol : getProtocols()) {\n+        for (WireProtocol protocol : getProtocols().values()) {", "@@ -203 +203 @@ public class NettyPortUnificationServer extends AbstractPortUnificationServer {\n-        for (WireProtocol protocol : getProtocols()) {\n+        for (WireProtocol protocol : getProtocols().values()) {", "@@ -32,0 +33 @@ import javax.net.ssl.SSLSession;\n+import java.util.HashSet;", "@@ -54 +55 @@ public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {\n-    private final List<WireProtocol> protocols;\n+    private final Map<String, WireProtocol> protocols;", "@@ -61 +62 @@ public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {\n-            List<WireProtocol> protocols,\n+            Map<String, WireProtocol> protocols,", "@@ -121 +122,5 @@ public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {\n-            for (final WireProtocol protocol : protocols) {\n+            Set<String> supportedProtocolNames = new HashSet<>(protocols.keySet());\n+            supportedProtocolNames.retainAll(urlMapper.keySet());\n+\n+            for (final String name : supportedProtocolNames) {\n+                WireProtocol protocol = protocols.get(name);", "@@ -130,5 +135,2 @@ public class NettyPortUnificationServerHandler extends ByteToMessageDecoder {\n-                        String protocolName = url.getOrDefaultFrameworkModel()\n-                                .getExtensionLoader(WireProtocol.class)\n-                                .getExtensionName(protocol);\n-                        ChannelHandler localHandler = this.handlerMapper.getOrDefault(protocolName, handler);\n-                        URL localURL = this.urlMapper.getOrDefault(protocolName, url);\n+                        ChannelHandler localHandler = this.handlerMapper.getOrDefault(name, handler);\n+                        URL localURL = this.urlMapper.getOrDefault(name, url);"]}, {"id": "05cecc55bccc5c4ab985f7bab3b3c63e7380ed01", "message": "Fixes #13684: delete outdated metrics port assertions (#13717)\n\n* fix: delete outdated metrics port assertions\r\n\r\n* chore: remove outdated port attribute in metricsType", "patch": ["@@ -24 +23,0 @@ import org.apache.dubbo.common.config.InmemoryConfiguration;\n-import org.apache.dubbo.common.utils.Assert;", "@@ -57 +55,0 @@ import static org.apache.dubbo.common.constants.LoggerCodeConstants.CONFIG_NO_ME\n-import static org.apache.dubbo.common.constants.MetricsConstants.PROTOCOL_PROMETHEUS;", "@@ -270,17 +267,0 @@ public abstract class AbstractInterfaceConfig extends AbstractMethodConfig {\n-    /**\n-     * @deprecated After metrics config is refactored.\n-     * This method should no longer use and will be deleted in the future.\n-     */\n-    @Deprecated\n-    protected void appendMetricsCompatible(Map<String, String> map) {\n-        MetricsConfig metricsConfig = getConfigManager().getMetrics().orElse(null);\n-        if (metricsConfig != null) {\n-            String protocol = Optional.ofNullable(metricsConfig.getProtocol()).orElse(PROTOCOL_PROMETHEUS);\n-            if (!StringUtils.isEquals(protocol, PROTOCOL_PROMETHEUS)) {\n-                Assert.notEmptyString(metricsConfig.getPort(), \"Metrics port cannot be null\");\n-                map.put(\"metrics.protocol\", protocol);\n-                map.put(\"metrics.port\", metricsConfig.getPort());\n-            }\n-        }\n-    }\n-", "@@ -79,7 +78,0 @@ public class MetricsConfig extends AbstractConfig {\n-    /**\n-     * @deprecated After metrics config is refactored.\n-     * This parameter should no longer use and will be deleted in the future.\n-     */\n-    @Deprecated\n-    private String port;\n-", "@@ -169,8 +161,0 @@ public class MetricsConfig extends AbstractConfig {\n-    public String getPort() {\n-        return port;\n-    }\n-\n-    public void setPort(String port) {\n-        this.port = port;\n-    }\n-", "@@ -445 +444,0 @@ public class ReferenceConfig<T> extends ReferenceConfigBase<T> {\n-        appendMetricsCompatible(map);", "@@ -666 +665,0 @@ public class ServiceConfig<T> extends ServiceConfigBase<T> {\n-        appendMetricsCompatible(map);"]}, {"id": "b7cd1f933f0df9e2d94734760200938e9097e72f", "message": "Fix NPE in DefaultTypeBuilder (#13732)\n\n* Fix NPE in DefaultTypeBuilder\r\n\r\n* Fix style", "patch": ["@@ -35 +35,4 @@ public final class DefaultTypeBuilder {\n-        final String canonicalName = clazz.getCanonicalName();\n+        String className = clazz.getCanonicalName();\n+        if (className == null) {\n+            className = clazz.getName();\n+        }", "@@ -38 +41 @@ public final class DefaultTypeBuilder {\n-        TypeDefinition td = typeCache.get(canonicalName);\n+        TypeDefinition td = typeCache.get(className);", "@@ -42,2 +45,2 @@ public final class DefaultTypeBuilder {\n-        td = new TypeDefinition(canonicalName);\n-        typeCache.put(canonicalName, td);\n+        td = new TypeDefinition(className);\n+        typeCache.put(className, td);\n--- /dev/null", "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.metadata.definition;\n+\n+import org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder;\n+import org.apache.dubbo.rpc.model.FrameworkModel;\n+\n+import java.util.HashMap;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class DefaultTypeBuilderTest {\n+    @Test\n+    void testInnerClass() {\n+        TypeDefinitionBuilder.initBuilders(FrameworkModel.defaultModel());\n+\n+        Assertions.assertEquals(\n+                String.class.getName(),\n+                DefaultTypeBuilder.build(String.class, new HashMap<>()).getType());\n+\n+        DefaultTypeBuilderTest innerObject = new DefaultTypeBuilderTest() {};\n+        Assertions.assertEquals(\n+                DefaultTypeBuilderTest.class.getName() + \"$1\",\n+                DefaultTypeBuilder.build(innerObject.getClass(), new HashMap<>())\n+                        .getType());\n+\n+        TypeDefinitionBuilder.BUILDERS = null;\n+    }\n+}"]}, {"id": "caed64b2a6e3e4113350dca27f931c129d211dff", "message": "Fix #13750, ConsistentHashLoadBalance not base on arguments (#13753)\n\n", "patch": ["@@ -100,3 +100 @@ public class ConsistentHashLoadBalance extends AbstractLoadBalance {\n-            byte[] digest = Bytes.getMD5(RpcUtils.getMethodName(invocation));\n-            return selectForKey(hash(digest, 0));\n-        }\n+            String key = toKey(RpcUtils.getArguments(invocation));", "@@ -104,2 +102,2 @@ public class ConsistentHashLoadBalance extends AbstractLoadBalance {\n-        private String toKey(Object[] args, boolean isGeneric) {\n-            return isGeneric ? toKey((Object[]) args[1]) : toKey(args);\n+            byte[] digest = Bytes.getMD5(key);\n+            return selectForKey(hash(digest, 0));", "@@ -19,0 +20 @@ import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.rpc.Invocation;", "@@ -27,0 +29 @@ import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;", "@@ -32,0 +35,3 @@ import org.junit.jupiter.api.Test;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.mock;\n+", "@@ -47,0 +53,28 @@ class ConsistentHashLoadBalanceTest extends LoadBalanceBaseTest {\n+    @Test\n+    void testArgumentMatchAll() {\n+        Map<Invoker, AtomicLong> counter = new ConcurrentHashMap<Invoker, AtomicLong>();\n+        LoadBalance lb = getLoadBalance(ConsistentHashLoadBalance.NAME);\n+        for (Invoker invoker : invokers) {\n+            counter.put(invoker, new AtomicLong(0));\n+        }\n+        URL url = invokers.get(0).getUrl();\n+\n+        for (int i = 0; i < 1000; i++) {\n+            Invocation invocation = mock(Invocation.class);\n+            String methodName = \"method1\";\n+            given(invocation.getMethodName()).willReturn(\"$invoke\");\n+            String[] paraTypes = new String[] {String.class.getName(), String.class.getName(), String.class.getName()};\n+            Object[] argsObject = new Object[] {\"arg\" + i, \"arg2\", \"arg3\"};\n+            Object[] args = new Object[] {methodName, paraTypes, argsObject};\n+            given(invocation.getArguments()).willReturn(args);\n+\n+            for (int j = 0; j < 5; j++) {\n+                Invoker sinvoker = lb.select(invokers, url, invocation);\n+                counter.get(sinvoker).incrementAndGet();\n+            }\n+        }\n+        for (Invoker invoker : invokers) {\n+            Assertions.assertTrue(counter.get(invoker).get() > 0);\n+        }\n+    }\n+"]}, {"id": "6dbac54b398252ce0110ddb55150d3f0422c13be", "message": "'blacklist' renamed to 'blocklist' (#13800)\n\n", "patch": ["@@ -238 +238 @@ public class ConditionStateRouter<T> extends AbstractStateRouter<T> {\n-                        \"The current consumer in the service blacklist. consumer: \" + NetUtils.getLocalHost()\n+                        \"The current consumer in the service blocklist. consumer: \" + NetUtils.getLocalHost()", "@@ -205 +205 @@ public abstract class DynamicDirectory<T> extends AbstractDirectory<T> implement\n-                            + \", please check status of providers(disabled, not registered or in blacklist).\");\n+                            + \", please check status of providers(disabled, not registered or in blocklist).\");"]}, {"id": "69dd801db2f50e03faf58c60f6eb3f4ea72fee5f", "message": "Fix incorrect rest response header and demo double path error (#13789)\n\n* fix dubbo demo xml double path error\r\n\r\n* fix  restEasy response  headers formate\r\n\r\n* fix content-type judge\r\n\r\n* remove unused code", "patch": ["@@ -68 +68 @@ public interface RestDemoService {\n-    @Path(\"/testBody3\")\n+    @Path(\"/testBody4\")", "@@ -172 +172,2 @@ public interface ResteasyContext {\n-            if (entry.getValue() == null) {\n+            List<Object> value = entry.getValue();\n+            if (value == null || value.isEmpty()) {", "@@ -175 +176,3 @@ public interface ResteasyContext {\n-            response.addOutputHeaders(key, entry.getValue().toString());\n+            for (Object tmp : value) {\n+                response.addOutputHeaders(key, tmp.toString());\n+            }", "@@ -45 +45,8 @@ public class ResteasyNettyHttpResponse implements HttpResponse {\n-            multivaluedMap.add(key, value);\n+\n+            if (value == null || value.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (String val : value) {\n+                multivaluedMap.add(key, val);\n+            }", "@@ -36 +36 @@ import java.util.Set;\n-@Activate(\"json\")\n+@Activate(value = \"json\", order = 100)", "@@ -42 +41,0 @@ public class JsonCodec implements HttpMessageCodec<byte[], OutputStream> {\n-        unSupportClasses.add(String.class);", "@@ -31 +31 @@ import java.nio.charset.StandardCharsets;\n-@Activate(\"string\")\n+@Activate(value = \"string\", order = 200)", "@@ -192,0 +193,4 @@ public class NettyHttpResponse implements HttpResponse {\n+        if (values.contains(value)) {\n+            return;\n+        }\n+"]}, {"id": "17b75a78955effbf82f4cd958c37545209c152e1", "message": "Refresh valid invokers after connectivity check (#13773)\n\n", "patch": ["@@ -27,0 +28 @@ import org.apache.dubbo.common.utils.ConcurrentHashSet;\n+import org.apache.dubbo.common.utils.LockUtils;", "@@ -58,0 +60,2 @@ import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.ReentrantLock;", "@@ -124,0 +128,2 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n+    private final ReentrantLock invokerRefreshLock = new ReentrantLock();\n+", "@@ -296,11 +301,13 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        // 1. remove this invoker from validInvokers list, this invoker will not be listed in the next time\n-        if (removeValidInvoker(invoker)) {\n-            // 2. add this invoker to reconnect list\n-            invokersToReconnect.add(invoker);\n-            // 3. try start check connectivity task\n-            checkConnectivity();\n-\n-            logger.info(\"The invoker \" + invoker.getUrl()\n-                    + \" has been added to invalidate list due to connectivity problem. \"\n-                    + \"Will trying to reconnect to it in the background.\");\n-        }\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            // 1. remove this invoker from validInvokers list, this invoker will not be listed in the next time\n+            if (removeValidInvoker(invoker)) {\n+                // 2. add this invoker to reconnect list\n+                invokersToReconnect.add(invoker);\n+                // 3. try start check connectivity task\n+                checkConnectivity();\n+\n+                logger.info(\"The invoker \" + invoker.getUrl()\n+                        + \" has been added to invalidate list due to connectivity problem. \"\n+                        + \"Will trying to reconnect to it in the background.\");\n+            }\n+        });", "@@ -325,10 +332,12 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                            if (invokersToReconnect.size() < reconnectTaskTryCount) {\n-                                invokersToTry.addAll(invokersToReconnect);\n-                            } else {\n-                                for (int i = 0; i < reconnectTaskTryCount; i++) {\n-                                    Invoker<T> tInvoker = invokersToReconnect.get(\n-                                            ThreadLocalRandom.current().nextInt(invokersToReconnect.size()));\n-                                    if (!invokersToTry.contains(tInvoker)) {\n-                                        // ignore if is selected, invokersToTry's size is always smaller than\n-                                        // reconnectTaskTryCount + 1\n-                                        invokersToTry.add(tInvoker);\n+                            LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+                                if (invokersToReconnect.size() < reconnectTaskTryCount) {\n+                                    invokersToTry.addAll(invokersToReconnect);\n+                                } else {\n+                                    for (int i = 0; i < reconnectTaskTryCount; i++) {\n+                                        Invoker<T> tInvoker = invokersToReconnect.get(\n+                                                ThreadLocalRandom.current().nextInt(invokersToReconnect.size()));\n+                                        if (!invokersToTry.contains(tInvoker)) {\n+                                            // ignore if is selected, invokersToTry's size is always smaller than\n+                                            // reconnectTaskTryCount + 1\n+                                            invokersToTry.add(tInvoker);\n+                                        }", "@@ -337 +346 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                            }\n+                            });", "@@ -341 +350,6 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                                if (invokers.contains(invoker)) {\n+                                AtomicBoolean invokerExist = new AtomicBoolean(false);\n+                                LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+                                    invokerExist.set(invokers.contains(invoker));\n+                                });\n+                                // Should not lock here, `invoker.isAvailable` may need some time to check\n+                                if (invokerExist.get()) {", "@@ -351,5 +365,12 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                            for (Invoker<T> tInvoker : needDeleteList) {\n-                                if (invokers.contains(tInvoker)) {\n-                                    addValidInvoker(tInvoker);\n-                                    logger.info(\n-                                            \"Recover service address: \" + tInvoker.getUrl() + \"  from invalid list.\");\n+                            LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+                                for (Invoker<T> tInvoker : needDeleteList) {\n+                                    if (invokers.contains(tInvoker)) {\n+                                        addValidInvoker(tInvoker);\n+                                        logger.info(\"Recover service address: \" + tInvoker.getUrl()\n+                                                + \"  from invalid list.\");\n+                                    } else {\n+                                        logger.info(\n+                                                \"The invoker \" + tInvoker.getUrl()\n+                                                        + \" has been removed from invokers list. Will remove it in reconnect list.\");\n+                                    }\n+                                    invokersToReconnect.remove(tInvoker);", "@@ -357,2 +378,8 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                                invokersToReconnect.remove(tInvoker);\n-                            }\n+                            });\n+                        } catch (Throwable t) {\n+                            logger.error(\n+                                    LoggerCodeConstants.INTERNAL_ERROR,\n+                                    \"\",\n+                                    \"\",\n+                                    \"Error occurred when check connectivity. \",\n+                                    t);", "@@ -364,3 +391,5 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-                        if (!invokersToReconnect.isEmpty()) {\n-                            checkConnectivity();\n-                        }\n+                        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+                            if (!invokersToReconnect.isEmpty()) {\n+                                checkConnectivity();\n+                            }\n+                        });", "@@ -385,3 +414,5 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        if (invokersInitialized) {\n-            refreshInvokerInternal();\n-        }\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            if (invokersInitialized) {\n+                refreshInvokerInternal();\n+            }\n+        });", "@@ -396 +427 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-    private synchronized void refreshInvokerInternal() {\n+    private void refreshInvokerInternal() {", "@@ -417,5 +448,7 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        if (invokers.contains(invoker)) {\n-            disabledInvokers.add(invoker);\n-            removeValidInvoker(invoker);\n-            logger.info(\"Disable service address: \" + invoker.getUrl() + \".\");\n-        }\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            if (invokers.contains(invoker)) {\n+                disabledInvokers.add(invoker);\n+                removeValidInvoker(invoker);\n+                logger.info(\"Disable service address: \" + invoker.getUrl() + \".\");\n+            }\n+        });", "@@ -428,5 +461,6 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        if (disabledInvokers.remove(invoker)) {\n-            try {\n-                addValidInvoker(invoker);\n-                logger.info(\"Recover service address: \" + invoker.getUrl() + \"  from disabled list.\");\n-            } catch (Throwable ignore) {\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            if (disabledInvokers.remove(invoker)) {\n+                try {\n+                    addValidInvoker(invoker);\n+                    logger.info(\"Recover service address: \" + invoker.getUrl() + \"  from disabled list.\");\n+                } catch (Throwable ignore) {", "@@ -433,0 +468 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n+                }", "@@ -435 +470 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        }\n+        });", "@@ -494,3 +529,5 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        this.invokers = invokers;\n-        refreshInvokerInternal();\n-        this.invokersInitialized = true;\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            this.invokers = invokers;\n+            refreshInvokerInternal();\n+            this.invokersInitialized = true;\n+        });", "@@ -504,3 +541,5 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        this.invokers = BitList.emptyList();\n-        this.validInvokers = BitList.emptyList();\n-        this.invokersInitialized = false;\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            this.invokers = BitList.emptyList();\n+            this.validInvokers = BitList.emptyList();\n+            this.invokersInitialized = false;\n+        });", "@@ -510,4 +549,4 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        boolean result;\n-        synchronized (this.validInvokers) {\n-            result = this.validInvokers.add(invoker);\n-        }\n+        AtomicBoolean result = new AtomicBoolean(false);\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            result.set(this.validInvokers.add(invoker));\n+        });", "@@ -516 +555 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        return result;\n+        return result.get();", "@@ -520,4 +559,4 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        boolean result;\n-        synchronized (this.validInvokers) {\n-            result = this.validInvokers.remove(invoker);\n-        }\n+        AtomicBoolean result = new AtomicBoolean(false);\n+        LockUtils.safeLock(invokerRefreshLock, LockUtils.DEFAULT_TIMEOUT, () -> {\n+            result.set(this.validInvokers.remove(invoker));\n+        });", "@@ -526 +565 @@ public abstract class AbstractDirectory<T> implements Directory<T> {\n-        return result;\n+        return result.get();\n--- /dev/null", "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.utils;\n+\n+import org.apache.dubbo.common.constants.LoggerCodeConstants;\n+import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+\n+public class LockUtils {\n+    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(LockUtils.class);\n+\n+    public static final int DEFAULT_TIMEOUT = 60_000;\n+\n+    public static void safeLock(Lock lock, int timeout, Runnable runnable) {\n+        try {\n+            if (!lock.tryLock(timeout, TimeUnit.MILLISECONDS)) {\n+                logger.error(\n+                        LoggerCodeConstants.INTERNAL_ERROR,\n+                        \"\",\n+                        \"\",\n+                        \"Try to lock failed, timeout: \" + timeout,\n+                        new TimeoutException());\n+            }\n+            runnable.run();\n+        } catch (InterruptedException e) {\n+            logger.warn(LoggerCodeConstants.INTERNAL_ERROR, \"\", \"\", \"Try to lock failed\", e);\n+            Thread.currentThread().interrupt();\n+        } finally {\n+            try {\n+                lock.unlock();\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+        }\n+    }\n+}\n--- /dev/null", "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.utils;\n+\n+import java.lang.Thread.State;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+import static org.awaitility.Awaitility.await;\n+\n+public class LockUtilsTest {\n+    @RepeatedTest(5)\n+    void testLockFailed() {\n+        ReentrantLock reentrantLock = new ReentrantLock();\n+        AtomicBoolean releaseLock = new AtomicBoolean(false);\n+        new Thread(() -> {\n+                    reentrantLock.lock();\n+                    while (!releaseLock.get()) {\n+                        try {\n+                            Thread.sleep(5);\n+                        } catch (InterruptedException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                    reentrantLock.unlock();\n+                })\n+                .start();\n+\n+        await().until(reentrantLock::isLocked);\n+\n+        AtomicLong lockTime = new AtomicLong(0);\n+        long startTime = System.currentTimeMillis();\n+        LockUtils.safeLock(reentrantLock, 1000, () -> {\n+            lockTime.set(System.currentTimeMillis());\n+        });\n+        Assertions.assertTrue(lockTime.get() - startTime >= 1000);\n+        releaseLock.set(true);\n+\n+        while (reentrantLock.isLocked()) {\n+            try {\n+                Thread.sleep(5);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        lockTime.set(0);\n+        startTime = System.currentTimeMillis();\n+        LockUtils.safeLock(reentrantLock, 1000, () -> {\n+            lockTime.set(System.currentTimeMillis());\n+        });\n+        Assertions.assertTrue(lockTime.get() - startTime < 1000);\n+    }\n+\n+    @RepeatedTest(5)\n+    void testReentrant() {\n+        ReentrantLock reentrantLock = new ReentrantLock();\n+        reentrantLock.lock();\n+\n+        AtomicLong lockTime = new AtomicLong(0);\n+        long startTime = System.currentTimeMillis();\n+        LockUtils.safeLock(reentrantLock, 1000, () -> {\n+            lockTime.set(System.currentTimeMillis());\n+        });\n+        Assertions.assertTrue(lockTime.get() - startTime < 1000);\n+\n+        reentrantLock.lock();\n+        lockTime.set(0);\n+        startTime = System.currentTimeMillis();\n+        LockUtils.safeLock(reentrantLock, 1000, () -> {\n+            lockTime.set(System.currentTimeMillis());\n+        });\n+        Assertions.assertTrue(lockTime.get() - startTime < 1000);\n+\n+        Assertions.assertTrue(reentrantLock.isLocked());\n+        reentrantLock.unlock();\n+        Assertions.assertTrue(reentrantLock.isLocked());\n+        reentrantLock.unlock();\n+        Assertions.assertFalse(reentrantLock.isLocked());\n+    }\n+\n+    @RepeatedTest(5)\n+    void testInterrupt() {\n+        ReentrantLock reentrantLock = new ReentrantLock();\n+        reentrantLock.lock();\n+\n+        AtomicBoolean locked = new AtomicBoolean(false);\n+        Thread thread = new Thread(() -> {\n+            LockUtils.safeLock(reentrantLock, 10000, () -> {\n+                locked.set(true);\n+            });\n+        });\n+        thread.start();\n+\n+        await().until(() -> thread.getState() == State.TIMED_WAITING);\n+        thread.interrupt();\n+        await().until(() -> thread.getState() == State.TERMINATED);\n+\n+        Assertions.assertFalse(locked.get());\n+\n+        reentrantLock.unlock();\n+    }\n+\n+    @RepeatedTest(5)\n+    void testHoldLock() throws InterruptedException {\n+        ReentrantLock reentrantLock = new ReentrantLock();\n+        reentrantLock.lock();\n+\n+        AtomicLong lockTime = new AtomicLong(0);\n+        long startTime = System.currentTimeMillis();\n+        Thread thread = new Thread(() -> {\n+            LockUtils.safeLock(reentrantLock, 10000, () -> {\n+                lockTime.set(System.currentTimeMillis());\n+            });\n+        });\n+        thread.start();\n+\n+        await().until(() -> thread.getState() == State.TIMED_WAITING);\n+        Thread.sleep(1000);\n+        reentrantLock.unlock();\n+\n+        await().until(() -> thread.getState() == State.TERMINATED);\n+        Assertions.assertTrue(lockTime.get() - startTime > 1000);\n+        Assertions.assertTrue(lockTime.get() - startTime < 10000);\n+    }\n+}"]}, {"id": "428ca27a94826e5dadda1b2ab0d588ba3ece5fa2", "message": "Fix ModuleEnvironment#getDynamicGlobalConfiguration (#13781)\n\n* Update ModuleEnvironment#getDynamicGlobalConfiguration\r\n\r\n* add unit test\r\n\r\n* update", "patch": ["@@ -32,2 +31,0 @@ import java.util.concurrent.atomic.AtomicBoolean;\n-import static org.apache.dubbo.common.constants.LoggerCodeConstants.COMMON_UNEXPECTED_EXCEPTION;\n-", "@@ -97 +95,4 @@ public class ModuleEnvironment extends Environment implements ModuleExt {\n-            return applicationDelegate.getDynamicGlobalConfiguration();\n+            CompositeConfiguration configuration = new CompositeConfiguration();\n+            configuration.addConfiguration(applicationDelegate.getDynamicGlobalConfiguration());\n+            configuration.addConfiguration(orderedPropertiesConfiguration);\n+            return configuration;", "@@ -98,0 +100 @@ public class ModuleEnvironment extends Environment implements ModuleExt {\n+", "@@ -100,10 +101,0 @@ public class ModuleEnvironment extends Environment implements ModuleExt {\n-            if (dynamicConfiguration == null) {\n-                if (logger.isWarnEnabled()) {\n-                    logger.warn(\n-                            COMMON_UNEXPECTED_EXCEPTION,\n-                            \"\",\n-                            \"\",\n-                            \"dynamicConfiguration is null , return globalConfiguration.\");\n-                }\n-                return getConfiguration();\n-            }", "@@ -19,0 +20,2 @@ import org.apache.dubbo.rpc.model.ApplicationModel;\n+import org.apache.dubbo.rpc.model.FrameworkModel;\n+import org.apache.dubbo.rpc.model.ModuleModel;", "@@ -34,0 +37,14 @@ class OrderedPropertiesConfigurationTest {\n+\n+    @Test\n+    void testGetPropertyFromOrderedPropertiesConfiguration() {\n+        FrameworkModel frameworkModel = new FrameworkModel();\n+\n+        ApplicationModel applicationModel = frameworkModel.newApplication();\n+\n+        ModuleModel moduleModel = applicationModel.newModule();\n+        ModuleEnvironment moduleEnvironment = moduleModel.modelEnvironment();\n+\n+        Configuration configuration = moduleEnvironment.getDynamicGlobalConfiguration();\n+        // MockOrderedPropertiesProvider2  initProperties\n+        Assertions.assertEquals(\"999\", configuration.getString(\"testKey\"));\n+    }"]}, {"id": "d53d8e5d85358019028354b9f9d8389dde13b627", "message": "fix lazy property of serviceBeanDefinition to false (#13787)\n\n", "patch": ["@@ -530,0 +531,3 @@ public class ServiceAnnotationPostProcessor\n+        // service bean definition should not be lazy\n+        builder.setLazyInit(false);\n+"]}, {"id": "860ad02e1ed2cbe5842a611adfc7f1138c4862e0", "message": "Fix URL issue  (#13807)\n\n", "patch": ["@@ -342 +342 @@ public /*final**/ class URL implements Serializable {\n-        if (address != null && address.length() > 0 && defaultPort > 0) {\n+        if (StringUtils.isNotEmpty(address) && defaultPort > 0) {", "@@ -528 +528 @@ public /*final**/ class URL implements Serializable {\n-        if (backups != null && backups.length > 0) {\n+        if (ArrayUtils.isNotEmpty(backups)) {", "@@ -808 +808 @@ public /*final**/ class URL implements Serializable {\n-        return value != null && value.length() > 0;\n+        return StringUtils.isNotEmpty(value);", "@@ -1064 +1064 @@ public /*final**/ class URL implements Serializable {\n-        if (pairs == null || pairs.length == 0) {\n+        if (ArrayUtils.isEmpty(pairs)) {", "@@ -1592,3 +1592,3 @@ public /*final**/ class URL implements Serializable {\n-    public URL addAttributes(Map<String, Object> attributes) {\n-        if (attributes != null) {\n-            attributes.putAll(attributes);\n+    public URL addAttributes(Map<String, Object> attributeMap) {\n+        if (attributeMap != null) {\n+            attributes.putAll(attributeMap);", "@@ -1721 +1721 @@ public /*final**/ class URL implements Serializable {\n-        return value != null && value.length() > 0;\n+        return StringUtils.isNotEmpty(value);", "@@ -19,0 +20 @@ import org.apache.dubbo.common.url.component.ServiceConfigURL;\n+import org.apache.dubbo.common.utils.ArrayUtils;", "@@ -379 +380 @@ public final class URLBuilder extends ServiceConfigURL {\n-        if (pairs == null || pairs.length == 0) {\n+        if (ArrayUtils.isEmpty(pairs)) {", "@@ -419 +420 @@ public final class URLBuilder extends ServiceConfigURL {\n-        if (keys == null || keys.length == 0) {\n+        if (ArrayUtils.isEmpty(keys)) {", "@@ -461 +462 @@ public final class URLBuilder extends ServiceConfigURL {\n-        return value != null && value.length() > 0;\n+        return StringUtils.isNotEmpty(value);", "@@ -116 +116 @@ public class ServiceConfigURL extends URL {\n-    public URL addAttributes(Map<String, Object> attributes) {\n+    public URL addAttributes(Map<String, Object> attributeMap) {", "@@ -121 +121 @@ public class ServiceConfigURL extends URL {\n-        newAttributes.putAll(attributes);\n+        newAttributes.putAll(attributeMap);", "@@ -857,2 +857,2 @@ public class DelegateURL extends com.alibaba.dubbo.common.URL {\n-    public org.apache.dubbo.common.URL addAttributes(Map<String, Object> attributes) {\n-        return apacheUrl.addAttributes(attributes);\n+    public org.apache.dubbo.common.URL addAttributes(Map<String, Object> attributeMap) {\n+        return apacheUrl.addAttributes(attributeMap);"]}, {"id": "44c7f7967f931ee28791665f5c683dfac711c1ab", "message": "Bump com.alibaba.nacos:nacos-client from 2.2.4 to 2.3.1 (#13821)\n\n* Bump com.alibaba.nacos:nacos-client from 2.2.4 to 2.3.1\r\n\r\nBumps [com.alibaba.nacos:nacos-client](https://github.com/alibaba/nacos) from 2.2.4 to 2.3.1.\r\n- [Release notes](https://github.com/alibaba/nacos/releases)\r\n- [Changelog](https://github.com/alibaba/nacos/blob/develop/CHANGELOG.md)\r\n- [Commits](https://github.com/alibaba/nacos/compare/2.2.4...2.3.1)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.alibaba.nacos:nacos-client\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\n* Fix compile\r\n\r\n* Fix format\r\n\r\n---------\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Albumen Kevin <jhq0812@gmail.com>", "patch": ["@@ -19,0 +20 @@ import com.alibaba.nacos.api.config.ConfigService;\n+import com.alibaba.nacos.api.config.filter.IConfigFilter;", "@@ -73,0 +75,3 @@ public class MockConfigService implements ConfigService {\n+\n+    @Override\n+    public void addConfigFilter(IConfigFilter iConfigFilter) {}", "@@ -19,0 +20 @@ import com.alibaba.nacos.api.config.ConfigService;\n+import com.alibaba.nacos.api.config.filter.IConfigFilter;", "@@ -71,0 +73,3 @@ public class MockConfigService implements ConfigService {\n+\n+    @Override\n+    public void addConfigFilter(IConfigFilter iConfigFilter) {}"]}, {"id": "002a6a1b3e3a7533fedd2bc2d3e72920d96f47e5", "message": "1.The word \"shutdown\" is a noun. The verb is spelled with a space. (#13855)\n\n", "patch": ["@@ -122 +122 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-        if (Boolean.parseBoolean(url.getParameter(DUMP_ENABLE, \"true\"))) {\n+        if (Boolean.parseBoolean(url.getParameter(DUMP_ENABLE, Boolean.TRUE.toString()))) {", "@@ -193 +193 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {\n-            // must shutdown thread pool ,if not will lead to OOM\n+            // must shut down thread pool ,if not will lead to OOM"]}, {"id": "d50adb7c837448358ae980c7f90cd43daf6eab8b", "message": "fix typos (#13858)\n\nCo-authored-by: Cyrus <yecity@gmail.com>", "patch": ["@@ -221 +221 @@ public class ModuleConfig extends AbstractConfig {\n-     * If start in backgound, do not await finish on Spring ContextRefreshedEvent.\n+     * If start in background, do not await finish on Spring ContextRefreshedEvent.", "@@ -67 +67 @@ public class Main {\n-            logger.info(\"Use container type(\" + Arrays.toString(args) + \") to run dubbo serivce.\");\n+            logger.info(\"Use container type(\" + Arrays.toString(args) + \") to run dubbo service.\");", "@@ -30 +30 @@ import static org.apache.dubbo.metadata.annotation.processing.util.TypeUtils.isP\n- * {@link TypeBuilder} for Java {@link PrimitiveType primitve type}\n+ * {@link TypeBuilder} for Java {@link PrimitiveType primitive type}", "@@ -439 +439 @@ class ExchangeCodecTest extends TelnetCodecTest {\n-        // encode response verson ??\n+        // encode response version ??", "@@ -46 +46 @@ import static org.springframework.util.ClassUtils.isPrimitiveOrWrapper;\n- * Abstract Dubbo Meatadata\n+ * Abstract Dubbo Metadata"]}, {"id": "36e0cf5490f9ea289a9d809694b0b2347106a515", "message": "fix(#13305): RpcContext local address info get null on custom filter (#13751)\n\n* fix(#13305): RpcContext local address info get null on custom filter\r\n\r\n* fix ci build failed\r\n\r\n* fix ci build failed", "patch": ["@@ -22 +21,0 @@ import org.apache.dubbo.common.utils.CollectionUtils;\n-import org.apache.dubbo.common.utils.NetUtils;", "@@ -66,4 +65 @@ public class ConsumerContextFilter implements ClusterFilter, ClusterFilter.Liste\n-        RpcContext.getServiceContext()\n-                .setInvoker(invoker)\n-                .setInvocation(invocation)\n-                .setLocalAddress(NetUtils.getLocalHost(), 0);\n+        RpcContext.getServiceContext().setInvoker(invoker).setInvocation(invocation);", "@@ -36,0 +37 @@ import org.apache.dubbo.rpc.Result;\n+import org.apache.dubbo.rpc.RpcContext;", "@@ -100,0 +102 @@ public class DubboInvoker<T> extends AbstractInvoker<T> {\n+        RpcContext.getServiceContext().setLocalAddress(currentClient.getLocalAddress());", "@@ -157,0 +158 @@ public class TripleInvoker<T> extends AbstractInvoker<T> {\n+        RpcContext.getServiceContext().setLocalAddress(connectionClient.getLocalAddress());"]}, {"id": "501bdfaaef53c02ced2799c87ca64b9ecbd29507", "message": "Fix memory leak in ScopeBeanFactory (#13901)\n\n", "patch": ["@@ -27,0 +28 @@ import org.apache.dubbo.common.utils.ConcurrentHashMapUtils;\n+import org.apache.dubbo.common.utils.ConcurrentHashSet;", "@@ -32,0 +34 @@ import java.util.List;\n+import java.util.Set;", "@@ -56 +58 @@ public class ScopeBeanFactory {\n-    private List<Class<?>> registeredClasses = new ArrayList<>();\n+    private final Set<Class<?>> registeredClasses = new ConcurrentHashSet<>();", "@@ -302 +304 @@ public class ScopeBeanFactory {\n-    public List<Class<?>> getRegisteredClasses() {\n+    public Set<Class<?>> getRegisteredClasses() {"]}, {"id": "0553d70899253519bd6fab00fb647eababf1c911", "message": "Add condition to match serviceKey. (#13869)\n\n", "patch": ["@@ -61 +61,2 @@ public class ChangeTelnet implements BaseCommand {\n-                        || message.equals(exporter.getInvoker().getUrl().getPath())) {\n+                        || message.equals(exporter.getInvoker().getUrl().getPath())\n+                        || message.equals(exporter.getInvoker().getUrl().getServiceKey())) {", "@@ -88 +88,2 @@ public class CountTelnet implements BaseCommand {\n-                    || service.equals(exporter.getInvoker().getUrl().getPath())) {\n+                    || service.equals(exporter.getInvoker().getUrl().getPath())\n+                    || service.equals(exporter.getInvoker().getUrl().getServiceKey())) {", "@@ -74 +74 @@ class ChangeTelnetTest {\n-        given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:20884/demo\"));\n+        given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:20884/demo?group=g&version=1.0.0\"));", "@@ -112,0 +113,9 @@ class ChangeTelnetTest {\n+    @Test\n+    void testChangeServiceKey() {\n+        ExtensionLoader.getExtensionLoader(Protocol.class)\n+                .getExtension(DubboProtocol.NAME)\n+                .export(mockInvoker);\n+        String result = change.execute(mockCommandContext, new String[] {\"g/demo:1.0.0\"});\n+        assertEquals(\"Used the g/demo:1.0.0 as default.\\r\\nYou can cancel default service by command: cd /\", result);\n+    }\n+", "@@ -55 +55 @@ class CountTelnetTest {\n-    private final URL url = URL.valueOf(\"dubbo://127.0.0.1:20884/demo\");\n+    private final URL url = URL.valueOf(\"dubbo://127.0.0.1:20884/demo?group=g&version=1.0.0\");", "@@ -72,0 +73 @@ class CountTelnetTest {\n+        RpcStatus.removeStatus(url);", "@@ -78,0 +80 @@ class CountTelnetTest {\n+        RpcStatus.removeStatus(url, methodName);", "@@ -87,0 +90,22 @@ class CountTelnetTest {\n+\n+        StringBuilder sb = new StringBuilder();\n+        for (Object o : mockChannel.getReceivedObjects()) {\n+            sb.append(o.toString());\n+        }\n+\n+        assertThat(sb.toString(), containsString(buildTable(methodName, 10, 10, \"1\", \"0\", \"0\")));\n+    }\n+\n+    @Test\n+    void testCountByServiceKey() throws Exception {\n+        String methodName = \"sayHello\";\n+        RpcStatus.removeStatus(url, methodName);\n+        String[] args = new String[] {\"g/demo:1.0.0\", \"sayHello\", \"1\"};\n+\n+        ExtensionLoader.getExtensionLoader(Protocol.class)\n+                .getExtension(DubboProtocol.NAME)\n+                .export(mockInvoker);\n+        RpcStatus.beginCount(url, methodName);\n+        RpcStatus.endCount(url, methodName, 10L, true);\n+        count.execute(mockCommandContext, args);\n+        latch.await();"]}, {"id": "392260a30e3ead460469c6d7943ece598bb49809", "message": "Fix NPE in NettyConnectionClient.toString (#13934)\n\n", "patch": ["@@ -33,0 +34 @@ import org.apache.dubbo.remoting.utils.UrlUtils;\n+import java.util.Optional;", "@@ -340 +341,3 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n-                + (getChannel() == null ? null : getChannel().getLocalAddress()) + \",remote=\" + getRemoteAddress();\n+                + Optional.ofNullable(getChannel())\n+                        .map(Channel::getLocalAddress)\n+                        .orElse(null) + \",remote=\" + getRemoteAddress();"]}, {"id": "a342f67dc04fea2a5e6cfadba8392a43ca2f2546", "message": "fix async method call ClassCastException error (#13932)\n\n", "patch": ["@@ -780,0 +781,6 @@ public class ServiceDiscoveryRegistryDirectory<T> extends DynamicDirectory<T> {\n+            // When there are multiple MethodDescriptors with the same method name, the return type will be wrong\n+            // same with org.apache.dubbo.rpc.stub.StubInvocationUtil.call\n+            // fix https://github.com/apache/dubbo/issues/13931\n+            if (invocation instanceof RpcInvocation) {\n+                copiedInvocation.setReturnType(((RpcInvocation) invocation).getReturnType());\n+            }"]}, {"id": "164aebf6ed47d5c06fe5e91ced491bbff5b03abb", "message": "Fix readBytes and writeBytes methods in fastjson2 (#13968)\n\n", "patch": ["@@ -94 +94 @@ public class FastJson2ObjectInput implements ObjectInput {\n-        int length = is.read();\n+        int length = readLength();", "@@ -92 +92 @@ public class FastJson2ObjectOutput implements ObjectOutput {\n-        os.write(b.length);\n+        writeLength(b.length);", "@@ -98 +98 @@ public class FastJson2ObjectOutput implements ObjectOutput {\n-        os.write(len);\n+        writeLength(len);"]}, {"id": "00812ce41c44be6e5cd5e2b8e5bf602f806bbbca", "message": "Fix Sonar issue s2293 The diamond operator ('<>') should be used (#14005)\n\n", "patch": ["@@ -215 +215 @@ public class SingleRouterChain<T> {\n-        RouterSnapshotNode<T> parentNode = new RouterSnapshotNode<T>(\"Parent\", resultInvokers.clone());\n+        RouterSnapshotNode<T> parentNode = new RouterSnapshotNode<>(\"Parent\", resultInvokers.clone());", "@@ -230 +230 @@ public class SingleRouterChain<T> {\n-        RouterSnapshotNode<T> commonRouterNode = new RouterSnapshotNode<T>(\"CommonRouter\", resultInvokers.clone());\n+        RouterSnapshotNode<T> commonRouterNode = new RouterSnapshotNode<>(\"CommonRouter\", resultInvokers.clone());", "@@ -240 +240 @@ public class SingleRouterChain<T> {\n-                    new RouterSnapshotNode<T>(router.getClass().getSimpleName(), inputInvokers);\n+                    new RouterSnapshotNode<>(router.getClass().getSimpleName(), inputInvokers);", "@@ -226 +226 @@ public abstract class AbstractConfigurator implements Configurator {\n-        Set<String> conditionKeys = new HashSet<String>();\n+        Set<String> conditionKeys = new HashSet<>();", "@@ -49,2 +49 @@ public class ConsistentHashLoadBalance extends AbstractLoadBalance {\n-    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors =\n-            new ConcurrentHashMap<String, ConsistentHashSelector<?>>();\n+    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = new ConcurrentHashMap<>();", "@@ -78 +77 @@ public class ConsistentHashLoadBalance extends AbstractLoadBalance {\n-            this.virtualInvokers = new TreeMap<Long, Invoker<T>>();\n+            this.virtualInvokers = new TreeMap<>();", "@@ -35 +35 @@ public class MapMerger implements Merger<Map<?, ?>> {\n-        Map<Object, Object> result = new HashMap<Object, Object>();\n+        Map<Object, Object> result = new HashMap<>();", "@@ -39 +39 @@ public class MergerFactory implements ScopeModelAware {\n-    private ConcurrentMap<Class<?>, Merger<?>> MERGER_CACHE = new ConcurrentHashMap<Class<?>, Merger<?>>();\n+    private ConcurrentMap<Class<?>, Merger<?>> MERGER_CACHE = new ConcurrentHashMap<>();", "@@ -35 +35 @@ public class SetMerger implements Merger<Set<?>> {\n-        Set<Object> result = new HashSet<Object>();\n+        Set<Object> result = new HashSet<>();", "@@ -33 +33 @@ public class ConditionStateRouterFactory extends CacheableStateRouterFactory {\n-        return new ConditionStateRouter<T>(url);\n+        return new ConditionStateRouter<>(url);", "@@ -35 +35 @@ public class ServiceStateRouterFactory extends CacheableStateRouterFactory {\n-        return new ServiceStateRouter<T>(url);\n+        return new ServiceStateRouter<>(url);", "@@ -139 +139 @@ public class MeshRuleCache<T> {\n-            return new MeshRuleCache<T>(\n+            return new MeshRuleCache<>(", "@@ -33 +33 @@ public class MockStateRouterFactory implements StateRouterFactory {\n-        return new MockInvokersSelector<T>(url);\n+        return new MockInvokersSelector<>(url);", "@@ -34 +34 @@ public class TagStateRouterFactory extends CacheableStateRouterFactory {\n-        return new TagStateRouter<T>(url);\n+        return new TagStateRouter<>(url);", "@@ -66,2 +66,2 @@ public class FailoverClusterInvoker<T> extends AbstractClusterInvoker<T> {\n-        List<Invoker<T>> invoked = new ArrayList<Invoker<T>>(copyInvokers.size()); // invoked invokers.\n-        Set<String> providers = new HashSet<String>(len);\n+        List<Invoker<T>> invoked = new ArrayList<>(copyInvokers.size()); // invoked invokers.\n+        Set<String> providers = new HashSet<>(len);", "@@ -29 +29 @@ public class MergeableCluster extends AbstractCluster {\n-        return new MergeableClusterInvoker<T>(directory);\n+        return new MergeableClusterInvoker<>(directory);", "@@ -30 +30 @@ public class ZoneAwareCluster extends AbstractCluster {\n-        return new ZoneAwareClusterInvoker<T>(directory);\n+        return new ZoneAwareClusterInvoker<>(directory);", "@@ -38 +38 @@ public class MockClusterWrapper implements Cluster {\n-        return new MockClusterInvoker<T>(directory, this.cluster.join(directory, buildFilterChain));\n+        return new MockClusterInvoker<>(directory, this.cluster.join(directory, buildFilterChain));", "@@ -63 +63 @@ public final class Version {\n-    private static final Map<String, Integer> VERSION2INT = new HashMap<String, Integer>();\n+    private static final Map<String, Integer> VERSION2INT = new HashMap<>();", "@@ -38 +38 @@ public final class JavaBeanSerializeUtil {\n-    private static final Map<String, Class<?>> TYPES = new HashMap<String, Class<?>>();\n+    private static final Map<String, Class<?>> TYPES = new HashMap<>();", "@@ -75 +75 @@ public final class JavaBeanSerializeUtil {\n-        IdentityHashMap<Object, JavaBeanDescriptor> cache = new IdentityHashMap<Object, JavaBeanDescriptor>();\n+        IdentityHashMap<Object, JavaBeanDescriptor> cache = new IdentityHashMap<>();", "@@ -212 +212 @@ public final class JavaBeanSerializeUtil {\n-        IdentityHashMap<JavaBeanDescriptor, Object> cache = new IdentityHashMap<JavaBeanDescriptor, Object>();\n+        IdentityHashMap<JavaBeanDescriptor, Object> cache = new IdentityHashMap<>();", "@@ -123 +123 @@ public abstract class Mixin {\n-            Set<String> worked = new HashSet<String>();\n+            Set<String> worked = new HashSet<>();", "@@ -45,2 +45,2 @@ public abstract class Wrapper {\n-    private static final ConcurrentMap<Class<?>, Wrapper> WRAPPER_MAP =\n-            new ConcurrentHashMap<Class<?>, Wrapper>(); // class wrapper map\n+    // class wrapper map\n+    private static final ConcurrentMap<Class<?>, Wrapper> WRAPPER_MAP = new ConcurrentHashMap<>();", "@@ -395 +395 @@ public class ClassUtils {\n-        Map<K, V> map = new HashMap<K, V>();\n+        Map<K, V> map = new HashMap<>();", "@@ -31 +31 @@ public final class InternalThreadLocalMap {\n-    private static ThreadLocal<InternalThreadLocalMap> slowThreadLocalMap = new ThreadLocal<InternalThreadLocalMap>();\n+    private static ThreadLocal<InternalThreadLocalMap> slowThreadLocalMap = new ThreadLocal<>();", "@@ -430 +430 @@ public class HashedWheelTimer implements Timer {\n-        private final Set<Timeout> unprocessedTimeouts = new HashSet<Timeout>();\n+        private final Set<Timeout> unprocessedTimeouts = new HashSet<>();", "@@ -101 +101 @@ public class CIDRUtils {\n-        List<Byte> newArr = new ArrayList<Byte>();\n+        List<Byte> newArr = new ArrayList<>();", "@@ -90 +90 @@ public class ConfigUtils {\n-        List<String> defaults = new ArrayList<String>();\n+        List<String> defaults = new ArrayList<>();", "@@ -99 +99 @@ public class ConfigUtils {\n-        List<String> names = new ArrayList<String>();\n+        List<String> names = new ArrayList<>();", "@@ -182 +182 @@ public class IOUtils {\n-        List<String> lines = new ArrayList<String>();\n+        List<String> lines = new ArrayList<>();", "@@ -29 +29 @@ public class Stack<E> {\n-    private final List<E> mElements = new ArrayList<E>();\n+    private final List<E> mElements = new ArrayList<>();", "@@ -864 +864 @@ public final class StringUtils {\n-        Map<String, String> map = new HashMap<String, String>(tmp.length);\n+        Map<String, String> map = new HashMap<>(tmp.length);", "@@ -888 +888 @@ public final class StringUtils {\n-            return new HashMap<String, String>();\n+            return new HashMap<>();", "@@ -184 +184 @@ public class UrlUtils {\n-        List<URL> registries = new ArrayList<URL>();\n+        List<URL> registries = new ArrayList<>();", "@@ -207 +207 @@ public abstract class AbstractInterfaceConfig extends AbstractMethodConfig {\n-    protected final transient List<URL> urls = new ArrayList<URL>();\n+    protected final transient List<URL> urls = new ArrayList<>();", "@@ -364 +364 @@ public class ApplicationConfig extends AbstractConfig {\n-        List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);\n+        List<RegistryConfig> registries = new ArrayList<>(1);", "@@ -189 +189 @@ public class ModuleConfig extends AbstractConfig {\n-        List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);\n+        List<RegistryConfig> registries = new ArrayList<>(1);", "@@ -99 +99 @@ public final class ClassUtils {\n-        List<Method> result = new ArrayList<Method>();\n+        List<Method> result = new ArrayList<>();", "@@ -138 +138 @@ public class ProviderModel extends ServiceModel {\n-        List<ProviderMethodModel> result = new ArrayList<ProviderMethodModel>();\n+        List<ProviderMethodModel> result = new ArrayList<>();", "@@ -33 +33 @@ public abstract class AbstractCacheFactory implements CacheFactory {\n-    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<String, Cache>();\n+    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<>();", "@@ -89 +89 @@ public class ServiceConfig<T> extends org.apache.dubbo.config.ServiceConfig<T> {\n-        List<ProtocolConfig> protocols = new ArrayList<ProtocolConfig>(providers.size());\n+        List<ProtocolConfig> protocols = new ArrayList<>(providers.size());", "@@ -60,2 +60,2 @@ public class Page {\n-        List<List<String>> rows = new ArrayList<List<String>>();\n-        List<String> row = new ArrayList<String>();\n+        List<List<String>> rows = new ArrayList<>();\n+        List<String> row = new ArrayList<>();", "@@ -52,2 +52,2 @@ public class PageServlet extends HttpServlet {\n-    protected final Map<String, PageHandler> pages = new ConcurrentHashMap<String, PageHandler>();\n-    protected final List<PageHandler> menus = new ArrayList<PageHandler>();\n+    protected final Map<String, PageHandler> pages = new ConcurrentHashMap<>();\n+    protected final List<PageHandler> menus = new ArrayList<>();", "@@ -49 +49 @@ public class ResourceFilter implements Filter {\n-    private final List<String> resources = new ArrayList<String>();\n+    private final List<String> resources = new ArrayList<>();", "@@ -38 +38 @@ public class HomePageHandler implements PageHandler {\n-        List<List<String>> rows = new ArrayList<List<String>>();\n+        List<List<String>> rows = new ArrayList<>();", "@@ -42 +42 @@ public class HomePageHandler implements PageHandler {\n-            List<String> row = new ArrayList<String>();\n+            List<String> row = new ArrayList<>();", "@@ -100,2 +100,2 @@ public class LogPageHandler implements PageHandler {\n-        List<List<String>> rows = new ArrayList<List<String>>();\n-        List<String> row = new ArrayList<String>();\n+        List<List<String>> rows = new ArrayList<>();\n+        List<String> row = new ArrayList<>();", "@@ -43 +43 @@ public class StatusPageHandler implements PageHandler {\n-        List<List<String>> rows = new ArrayList<List<String>>();\n+        List<List<String>> rows = new ArrayList<>();", "@@ -46 +46 @@ public class StatusPageHandler implements PageHandler {\n-        Map<String, Status> statuses = new HashMap<String, Status>();\n+        Map<String, Status> statuses = new HashMap<>();", "@@ -50 +50 @@ public class StatusPageHandler implements PageHandler {\n-            List<String> row = new ArrayList<String>();\n+            List<String> row = new ArrayList<>();", "@@ -64 +64 @@ public class StatusPageHandler implements PageHandler {\n-            List<String> row = new ArrayList<String>();\n+            List<String> row = new ArrayList<>();", "@@ -47 +47 @@ public class SystemPageHandler implements PageHandler {\n-        List<List<String>> rows = new ArrayList<List<String>>();\n+        List<List<String>> rows = new ArrayList<>();", "@@ -50 +50 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -55 +55 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -61 +61 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -66 +66 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -73 +73 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -79 +79 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -84 +84 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -89 +89 @@ public class SystemPageHandler implements PageHandler {\n-        row = new ArrayList<String>();\n+        row = new ArrayList<>();", "@@ -356 +356 @@ public class RpcContext {\n-                    FutureTask<T> f = new FutureTask<T>(new Callable<T>() {\n+                    FutureTask<T> f = new FutureTask<>(new Callable<T>() {", "@@ -165 +165 @@ public class RpcInvocation implements Invocation, Serializable {\n-            attachments = new HashMap<String, String>();\n+            attachments = new HashMap<>();", "@@ -172 +172 @@ public class RpcInvocation implements Invocation, Serializable {\n-            attachments = new HashMap<String, String>();\n+            attachments = new HashMap<>();", "@@ -184 +184 @@ public class RpcInvocation implements Invocation, Serializable {\n-            this.attachments = new HashMap<String, String>();\n+            this.attachments = new HashMap<>();", "@@ -131 +131 @@ public class ServiceConfig<T> extends ServiceConfigBase<T> {\n-    private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<String, Integer>();\n+    private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<>();", "@@ -654 +654 @@ public class ServiceConfig<T> extends ServiceConfigBase<T> {\n-        Map<String, String> map = new HashMap<String, String>();\n+        Map<String, String> map = new HashMap<>();", "@@ -212 +212 @@ public class ConfigValidationUtils {\n-                    Map<String, String> map = new HashMap<String, String>();\n+                    Map<String, String> map = new HashMap<>();", "@@ -312 +312 @@ public class ConfigValidationUtils {\n-        Map<String, String> map = new HashMap<String, String>();\n+        Map<String, String> map = new HashMap<>();", "@@ -81,2 +81 @@ public abstract class AbstractAnnotationBeanPostProcessor\n-            injectionMetadataCache = new ConcurrentHashMap<\n-                    String, AbstractAnnotationBeanPostProcessor.AnnotatedInjectionMetadata>(CACHE_SIZE);\n+            injectionMetadataCache = new ConcurrentHashMap<>(CACHE_SIZE);", "@@ -101 +100 @@ public abstract class AbstractAnnotationBeanPostProcessor\n-        List<T> allElements = new ArrayList<T>();\n+        List<T> allElements = new ArrayList<>();", "@@ -90 +90 @@ public abstract class AnnotationUtils {\n-        Map<String, Object> actualAttributes = new LinkedHashMap<String, Object>();\n+        Map<String, Object> actualAttributes = new LinkedHashMap<>();", "@@ -146 +146 @@ public abstract class AnnotationUtils {\n-            List<String> attributeNamesToIgnore = new LinkedList<String>(asList(ignoreAttributeNames));\n+            List<String> attributeNamesToIgnore = new LinkedList<>(asList(ignoreAttributeNames));", "@@ -106 +106 @@ public abstract class PropertySourcesUtils {\n-        Map<String, Object> subProperties = new LinkedHashMap<String, Object>();\n+        Map<String, Object> subProperties = new LinkedHashMap<>();", "@@ -63 +63 @@ public class Main {\n-            final List<Container> containers = new ArrayList<Container>();\n+            final List<Container> containers = new ArrayList<>();", "@@ -45 +45 @@ public abstract class AbstractCacheFactory implements CacheFactory {\n-    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<String, Cache>();\n+    private final ConcurrentMap<String, Cache> caches = new ConcurrentHashMap<>();", "@@ -161 +161 @@ public class ExpiringMap<K, V> implements Map<K, V> {\n-        List<V> list = new ArrayList<V>();\n+        List<V> list = new ArrayList<>();", "@@ -261 +261 @@ public class NacosMetadataReport extends AbstractMetadataReport {\n-        return new ArrayList<String>(Arrays.asList(URL.decode(content)));\n+        return new ArrayList<>(Arrays.asList(URL.decode(content)));", "@@ -56 +56 @@ public abstract class AbstractMonitorFactory implements MonitorFactory {\n-    private static final Map<String, Monitor> MONITORS = new ConcurrentHashMap<String, Monitor>();\n+    private static final Map<String, Monitor> MONITORS = new ConcurrentHashMap<>();", "@@ -58 +58 @@ public abstract class AbstractMonitorFactory implements MonitorFactory {\n-    private static final Map<String, Future<Monitor>> FUTURES = new ConcurrentHashMap<String, Future<Monitor>>();\n+    private static final Map<String, Future<Monitor>> FUTURES = new ConcurrentHashMap<>();", "@@ -49 +49 @@ public class HttpCommandDecoder {\n-                        List<String> valueList = new ArrayList<String>();\n+                        List<String> valueList = new ArrayList<>();", "@@ -59 +59 @@ public class HttpCommandDecoder {\n-                    List<String> valueList = new ArrayList<String>();\n+                    List<String> valueList = new ArrayList<>();", "@@ -158,2 +158,2 @@ public class CountTelnet implements BaseCommand {\n-        List<List<String>> table = new ArrayList<List<String>>();\n-        List<String> header = new ArrayList<String>();\n+        List<List<String>> table = new ArrayList<>();\n+        List<String> header = new ArrayList<>();", "@@ -191 +191 @@ public class CountTelnet implements BaseCommand {\n-        List<String> row = new ArrayList<String>();\n+        List<String> row = new ArrayList<>();", "@@ -49 +49 @@ public class CommandHelper {\n-        final List<Class<?>> classes = new ArrayList<Class<?>>();\n+        final List<Class<?>> classes = new ArrayList<>();", "@@ -38 +38 @@ public class TLadder implements TComponent {\n-    private final List<String> items = new LinkedList<String>();\n+    private final List<String> items = new LinkedList<>();", "@@ -302 +302 @@ public class TTable implements TComponent {\n-        private final List<String> rows = new ArrayList<String>();\n+        private final List<String> rows = new ArrayList<>();", "@@ -184 +184 @@ public class TTree implements TComponent {\n-        final List<Node> children = new ArrayList<Node>();\n+        final List<Node> children = new ArrayList<>();", "@@ -86 +86 @@ public final class ReactorServerCalls {\n-                new ServerTripleReactorPublisher<T>((CallStreamObserver<R>) responseObserver);\n+                new ServerTripleReactorPublisher<>((CallStreamObserver<R>) responseObserver);", "@@ -121 +121 @@ public final class ReactorServerCalls {\n-                new ServerTripleReactorPublisher<T>((CallStreamObserver<R>) responseObserver);\n+                new ServerTripleReactorPublisher<>((CallStreamObserver<R>) responseObserver);", "@@ -78 +78 @@ public class InterfaceCompatibleRegistryProtocol extends RegistryProtocol {\n-        return new MigrationInvoker<T>(registryProtocol, cluster, registry, type, url, consumerUrl);\n+        return new MigrationInvoker<>(registryProtocol, cluster, registry, type, url, consumerUrl);", "@@ -85 +85 @@ public class MulticastRegistry extends FailbackRegistry {\n-    private final ConcurrentMap<URL, Set<URL>> received = new ConcurrentHashMap<URL, Set<URL>>();\n+    private final ConcurrentMap<URL, Set<URL>> received = new ConcurrentHashMap<>();", "@@ -364 +364 @@ public class MulticastRegistry extends FailbackRegistry {\n-                        urls = new ConcurrentHashSet<URL>();\n+                        urls = new ConcurrentHashSet<>();", "@@ -383 +383 @@ public class MulticastRegistry extends FailbackRegistry {\n-        List<URL> list = new ArrayList<URL>();\n+        List<URL> list = new ArrayList<>();", "@@ -271 +271 @@ public class MultipleRegistry extends AbstractRegistry {\n-        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<URL, SingleNotifyListener>(4);\n+        Map<URL, SingleNotifyListener> registryMap = new ConcurrentHashMap<>(4);", "@@ -33 +33 @@ public class ReplierDispatcher implements Replier<Object> {\n-    private final Map<Class<?>, Replier<?>> repliers = new ConcurrentHashMap<Class<?>, Replier<?>>();\n+    private final Map<Class<?>, Replier<?>> repliers = new ConcurrentHashMap<>();", "@@ -164 +164 @@ public class HeaderExchangeServer implements ExchangeServer {\n-        Collection<ExchangeChannel> exchangeChannels = new ArrayList<ExchangeChannel>();\n+        Collection<ExchangeChannel> exchangeChannels = new ArrayList<>();", "@@ -286 +286 @@ public class TelnetCodec extends TransportCodec {\n-                history = new LinkedList<String>();\n+                history = new LinkedList<>();", "@@ -76 +76 @@ public class HelpTelnetHandler implements TelnetHandler {\n-        List<List<String>> table = new ArrayList<List<String>>();\n+        List<List<String>> table = new ArrayList<>();", "@@ -81 +81 @@ public class HelpTelnetHandler implements TelnetHandler {\n-                List<String> row = new ArrayList<String>();\n+                List<String> row = new ArrayList<>();", "@@ -56,2 +56,2 @@ public class StatusTelnetHandler implements TelnetHandler {\n-            List<List<String>> table = new ArrayList<List<String>>();\n-            Map<String, Status> statuses = new HashMap<String, Status>();\n+            List<List<String>> table = new ArrayList<>();\n+            Map<String, Status> statuses = new HashMap<>();", "@@ -69 +69 @@ public class StatusTelnetHandler implements TelnetHandler {\n-                        List<String> row = new ArrayList<String>();\n+                        List<String> row = new ArrayList<>();", "@@ -78 +78 @@ public class StatusTelnetHandler implements TelnetHandler {\n-            List<String> row = new ArrayList<String>();\n+            List<String> row = new ArrayList<>();", "@@ -88 +88 @@ public class StatusTelnetHandler implements TelnetHandler {\n-        Map<String, Status> statuses = new HashMap<String, Status>();\n+        Map<String, Status> statuses = new HashMap<>();", "@@ -45,3 +45,3 @@ public class CodecSupport {\n-    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<Byte, Serialization>();\n-    private static Map<Byte, String> ID_SERIALIZATIONNAME_MAP = new HashMap<Byte, String>();\n-    private static Map<String, Byte> SERIALIZATIONNAME_ID_MAP = new HashMap<String, Byte>();\n+    private static Map<Byte, Serialization> ID_SERIALIZATION_MAP = new HashMap<>();\n+    private static Map<Byte, String> ID_SERIALIZATIONNAME_MAP = new HashMap<>();\n+    private static Map<String, Byte> SERIALIZATIONNAME_ID_MAP = new HashMap<>();", "@@ -38,2 +38,2 @@ public class RequestTemplate implements Serializable {\n-    private final Map<String, Collection<String>> queries = new LinkedHashMap<String, Collection<String>>();\n-    private final Map<String, Collection<String>> headers = new LinkedHashMap<String, Collection<String>>();\n+    private final Map<String, Collection<String>> queries = new LinkedHashMap<>();\n+    private final Map<String, Collection<String>> headers = new LinkedHashMap<>();", "@@ -36 +36 @@ public class DispatcherServlet extends HttpServlet {\n-    private static final Map<Integer, HttpHandler> HANDLERS = new ConcurrentHashMap<Integer, HttpHandler>();\n+    private static final Map<Integer, HttpHandler> HANDLERS = new ConcurrentHashMap<>();", "@@ -33 +33 @@ public class ServletManager {\n-    private final Map<Integer, ServletContext> contextMap = new ConcurrentHashMap<Integer, ServletContext>();\n+    private final Map<Integer, ServletContext> contextMap = new ConcurrentHashMap<>();", "@@ -46 +46 @@ final class NettyChannel extends AbstractChannel {\n-            new ConcurrentHashMap<org.jboss.netty.channel.Channel, NettyChannel>();\n+            new ConcurrentHashMap<>();", "@@ -50 +50 @@ final class NettyChannel extends AbstractChannel {\n-    private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();\n+    private final Map<String, Object> attributes = new ConcurrentHashMap<>();", "@@ -45 +45 @@ public class NettyHandler extends SimpleChannelHandler {\n-    private final Map<String, Channel> channels = new ConcurrentHashMap<String, Channel>(); // <ip:port, channel>\n+    private final Map<String, Channel> channels = new ConcurrentHashMap<>(); // <ip:port, channel>", "@@ -64,2 +64 @@ final class NettyChannel extends AbstractChannel {\n-    private static final ConcurrentMap<Channel, NettyChannel> CHANNEL_MAP =\n-            new ConcurrentHashMap<Channel, NettyChannel>();\n+    private static final ConcurrentMap<Channel, NettyChannel> CHANNEL_MAP = new ConcurrentHashMap<>();", "@@ -71 +70 @@ final class NettyChannel extends AbstractChannel {\n-    private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();\n+    private final Map<String, Object> attributes = new ConcurrentHashMap<>();", "@@ -462 +462 @@ public class RpcServiceContext extends RpcContext {\n-            List<URL> urls = new ArrayList<URL>(invokers.size());\n+            List<URL> urls = new ArrayList<>(invokers.size());", "@@ -36,2 +36 @@ public class RpcStatus {\n-    private static final ConcurrentMap<String, RpcStatus> SERVICE_STATISTICS =\n-            new ConcurrentHashMap<String, RpcStatus>();\n+    private static final ConcurrentMap<String, RpcStatus> SERVICE_STATISTICS = new ConcurrentHashMap<>();", "@@ -40 +39 @@ public class RpcStatus {\n-            new ConcurrentHashMap<String, ConcurrentMap<String, RpcStatus>>();\n+            new ConcurrentHashMap<>();", "@@ -42 +41 @@ public class RpcStatus {\n-    private final ConcurrentMap<String, Object> values = new ConcurrentHashMap<String, Object>();\n+    private final ConcurrentMap<String, Object> values = new ConcurrentHashMap<>();", "@@ -47 +47 @@ public class DeprecatedFilter implements Filter {\n-    private static final Set<String> LOGGED = new ConcurrentHashSet<String>();\n+    private static final Set<String> LOGGED = new ConcurrentHashSet<>();", "@@ -38 +38 @@ public class DefaultTPSLimiter implements TPSLimiter {\n-    private final ConcurrentMap<String, StatItem> stats = new ConcurrentHashMap<String, StatItem>();\n+    private final ConcurrentMap<String, StatItem> stats = new ConcurrentHashMap<>();", "@@ -53 +53 @@ public abstract class AbstractProxyProtocol extends AbstractProtocol {\n-    private final List<Class<?>> rpcExceptions = new CopyOnWriteArrayList<Class<?>>();\n+    private final List<Class<?>> rpcExceptions = new CopyOnWriteArrayList<>();", "@@ -77,2 +77 @@ public class ProtocolListenerWrapper implements Protocol {\n-        return new ListenerExporterWrapper<T>(\n-                protocol.export(invoker), Collections.unmodifiableList(exporterListeners));\n+        return new ListenerExporterWrapper<>(protocol.export(invoker), Collections.unmodifiableList(exporterListeners));", "@@ -50,2 +50,2 @@ public final class MockInvoker<T> implements Invoker<T> {\n-    private static final Map<String, Invoker<?>> MOCK_MAP = new ConcurrentHashMap<String, Invoker<?>>();\n-    private static final Map<String, Throwable> THROWABLE_MAP = new ConcurrentHashMap<String, Throwable>();\n+    private static final Map<String, Invoker<?>> MOCK_MAP = new ConcurrentHashMap<>();\n+    private static final Map<String, Throwable> THROWABLE_MAP = new ConcurrentHashMap<>();", "@@ -342 +342 @@ public class DubboProtocol extends AbstractProtocol {\n-        DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);\n+        DubboExporter<T> exporter = new DubboExporter<>(invoker, key, exporterMap);", "@@ -446 +446 @@ public class DubboProtocol extends AbstractProtocol {\n-        DubboInvoker<T> invoker = new DubboInvoker<T>(serviceType, url, getClients(url), invokers);\n+        DubboInvoker<T> invoker = new DubboInvoker<>(serviceType, url, getClients(url), invokers);", "@@ -78 +78 @@ public class InjvmProtocol extends AbstractProtocol {\n-        return new InjvmExporter<T>(invoker, invoker.getUrl().getServiceKey(), exporterMap);\n+        return new InjvmExporter<>(invoker, invoker.getUrl().getServiceKey(), exporterMap);", "@@ -83 +83 @@ public class InjvmProtocol extends AbstractProtocol {\n-        return new InjvmInvoker<T>(serviceType, url, url.getServiceKey(), exporterMap);\n+        return new InjvmInvoker<>(serviceType, url, url.getServiceKey(), exporterMap);", "@@ -137 +137 @@ public class RestProtocol extends AbstractProtocol {\n-                new RestInvoker<T>(type, url, refClient, httpConnectionPreBuildIntercepts, serviceRestMetadata);\n+                new RestInvoker<>(type, url, refClient, httpConnectionPreBuildIntercepts, serviceRestMetadata);", "@@ -45 +45 @@ public class ViolationReport implements Serializable {\n-            constraintViolations = new LinkedList<RestConstraintViolation>();\n+            constraintViolations = new LinkedList<>();", "@@ -85 +85 @@ public class DubboPreMatchContainerRequestContext implements SuspendableContaine\n-        ArrayList<String> names = new ArrayList<String>();\n+        ArrayList<String> names = new ArrayList<>();", "@@ -118 +118 @@ public class ReflectUtils {\n-        return new ArrayList<Constructor<?>>(methods);\n+        return new ArrayList<>(methods);", "@@ -309 +309 @@ public class TriHttp2RemoteFlowController implements Http2RemoteFlowController {\n-            pendingWriteQueue = new ArrayDeque<FlowControlled>(2);\n+            pendingWriteQueue = new ArrayDeque<>(2);", "@@ -27 +27 @@ public class SysProps {\n-    private static Map<String, String> map = new LinkedHashMap<String, String>();\n+    private static Map<String, String> map = new LinkedHashMap<>();"]}, {"id": "ec443043e2da83d946943baabf7f122f9efc0dcc", "message": "fix triple stub calling grpc server fail (#14012)\n\n", "patch": ["@@ -348,0 +349 @@ public class ReferenceConfig<T> extends ReferenceConfigBase<T> {\n+                setInterface(serviceDescriptor.getInterfaceName());"]}, {"id": "f03823eec1610ab40fa894e279614703617ab29b", "message": "Use ExecutorService instead of event loop for Netty connection (#13904)\n\n* Use ExecutorService instead of event loop for Netty connection\r\n\r\nThis change addresses the issue of the event loop being blocked for an extended period, improving overall performance and responsiveness.\r\n\r\n* fix log getConnectAddress\r\n\r\n* applay format\r\n\r\n* applay format\r\n\r\n* applay format\r\n\r\n* applay format\r\n\r\n* applay format\r\n\r\n* Use an independent ExecutorService\r\n\r\n* Use ScheduledExecutorService for scheduling tasks\r\n\r\n* delete unnecessary files\r\n\r\n* Modify to stop ExecutorService using shutdownNow\r\n\r\n* Modify to use ScheduledExecutor managed by FrameworkExecutorRepository\r\n\r\n* Synchronize reconnectDuration with HeaderExchangeClient's reconnectDuration\r\n\r\n* get framework model directly\r\n\r\nuse awaitility", "patch": ["@@ -23,0 +24 @@ import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+import org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository;", "@@ -30,0 +32 @@ import org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers;\n+import org.apache.dubbo.rpc.model.FrameworkModel;", "@@ -33,0 +36 @@ import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;", "@@ -43,0 +47,5 @@ import static org.apache.dubbo.config.Constants.CLIENT_THREAD_POOL_NAME;\n+import static org.apache.dubbo.remoting.Constants.HEARTBEAT_CHECK_TICK;\n+import static org.apache.dubbo.remoting.Constants.LEAST_HEARTBEAT_DURATION;\n+import static org.apache.dubbo.remoting.Constants.LEAST_RECONNECT_DURATION;\n+import static org.apache.dubbo.remoting.Constants.LEAST_RECONNECT_DURATION_KEY;\n+import static org.apache.dubbo.remoting.utils.UrlUtils.getIdleTimeout;", "@@ -57,0 +66,6 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client\n+    protected volatile ScheduledExecutorService connectivityExecutor;\n+\n+    private FrameworkModel frameworkModel;\n+\n+    protected long reconnectDuaration;\n+", "@@ -62,0 +77,2 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client\n+        frameworkModel = url.getOrDefaultFrameworkModel();\n+", "@@ -64,0 +81,2 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client\n+        reconnectDuaration = getReconnectDuration(url);\n+", "@@ -136,0 +155,5 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client\n+\n+        connectivityExecutor = frameworkModel\n+                .getBeanFactory()\n+                .getBean(FrameworkExecutorRepository.class)\n+                .getConnectivityScheduledExecutor();", "@@ -298,0 +322,19 @@ public abstract class AbstractClient extends AbstractEndpoint implements Client\n+    private long getReconnectDuration(URL url) {\n+        int idleTimeout = getIdleTimeout(url);\n+        long heartbeatTimeoutTick = calculateLeastDuration(idleTimeout);\n+        return calculateReconnectDuration(url, heartbeatTimeoutTick);\n+    }\n+\n+    private long calculateLeastDuration(int time) {\n+        if (time / HEARTBEAT_CHECK_TICK <= 0) {\n+            return LEAST_HEARTBEAT_DURATION;\n+        } else {\n+            return time / HEARTBEAT_CHECK_TICK;\n+        }\n+    }\n+\n+    private long calculateReconnectDuration(URL url, long tick) {\n+        long leastReconnectDuration = url.getParameter(LEAST_RECONNECT_DURATION_KEY, LEAST_RECONNECT_DURATION);\n+        return Math.max(leastReconnectDuration, tick);\n+    }\n+", "@@ -46 +45,0 @@ import io.netty.channel.ChannelPipeline;\n-import io.netty.channel.EventLoop;", "@@ -77,0 +77,2 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n+    private AtomicBoolean isReconnecting;\n+", "@@ -93,0 +95 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n+        this.isReconnecting = new AtomicBoolean(false);", "@@ -160,0 +163,4 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n+        if (!isReconnecting.compareAndSet(false, true)) {\n+            return;\n+        }\n+", "@@ -349,0 +356,5 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n+\n+            if (!isReconnecting.compareAndSet(true, false)) {\n+                return;\n+            }\n+", "@@ -367,2 +378,2 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n-            final EventLoop loop = future.channel().eventLoop();\n-            loop.schedule(\n+\n+            connectivityExecutor.schedule(", "@@ -380,2 +391,2 @@ public class NettyConnectionClient extends AbstractConnectionClient {\n-                    1L,\n-                    TimeUnit.SECONDS);\n+                    reconnectDuaration,\n+                    TimeUnit.MILLISECONDS);", "@@ -30,0 +31 @@ import org.apache.dubbo.rpc.model.ModuleModel;\n+import java.time.Duration;", "@@ -41,0 +43 @@ import static org.apache.dubbo.common.constants.CommonConstants.EXECUTOR_MANAGEM\n+import static org.awaitility.Awaitility.await;", "@@ -140,0 +143 @@ public class ConnectionTest {\n+        await().atMost(Duration.ofSeconds(100)).until(() -> connectionClient.isAvailable());"]}, {"id": "95439fb23ce9855197843e5f2ee02c4713f09846", "message": "fix(3.2): triple AbstractServerCallListener NPE (#14009)\n\n* fix NPE\r\n\r\n* Optimize the handling of exceptions in response\r\n\r\n---------\r\n\r\nCo-authored-by: caoyanan <caoyanan@growingio.com>", "patch": ["@@ -64,0 +65,4 @@ public abstract class AbstractServerCallListener implements AbstractServerCall.L\n+            if (response.hasException()) {\n+                doOnResponseHasException(response.getException());\n+                return;\n+            }", "@@ -71,2 +75,2 @@ public abstract class AbstractServerCallListener implements AbstractServerCall.L\n-                if (response.hasException()) {\n-                    doOnResponseHasException(response.getException());\n+                if (r.hasException()) {\n+                    doOnResponseHasException(r.getException());"]}, {"id": "ca7151e53166fc69079fefff074ee369aa29f134", "message": "fix: Bytebuf resource leak (#14071)\n\n", "patch": ["@@ -463,0 +464 @@ public class TripleServerStream extends AbstractStream implements ServerStream {\n+                ReferenceCountUtil.release(data);"]}, {"id": "0a1ad55bff34c8cffc066c4ab26ac8466691a4f4", "message": "compatible service discovery, export noting suffix servicename, eg: ${interface}:${version} (#14096)\n\ncompatible service discovery, export noting suffix servicename, eg: {interface}:${version}\r\n\r\ncode format\r\n\r\ncompatible service discovery, export noting suffix servicename, eg: {interface}:${version}\r\n\r\nCo-authored-by: \u5448\u94ed <beck.wcm@antgroup.com>", "patch": ["@@ -1297,0 +1298,13 @@ public /*final**/ class URL implements Serializable {\n+    /**\n+     * The format is \"{interface}:[version]\"\n+     *\n+     * @return\n+     */\n+    public String getCompatibleColonSeparatedKey() {\n+        StringBuilder serviceNameBuilder = new StringBuilder();\n+        serviceNameBuilder.append(this.getServiceInterface());\n+        compatibleAppend(serviceNameBuilder, VERSION_KEY);\n+        compatibleAppend(serviceNameBuilder, GROUP_KEY);\n+        return serviceNameBuilder.toString();\n+    }\n+", "@@ -1309,0 +1323,8 @@ public /*final**/ class URL implements Serializable {\n+    private void compatibleAppend(StringBuilder target, String parameterName) {\n+        String parameterValue = this.getParameter(parameterName);\n+        if (!isBlank(parameterValue)) {\n+            target.append(':');\n+            target.append(parameterValue);\n+        }\n+    }\n+", "@@ -143,0 +144,7 @@ public interface RegistryConstants {\n+\n+    /**\n+     * export noting suffix servicename\n+     * by default, dubbo export servicename is \"${interface}:${version}:\", this servicename with ':' suffix\n+     * for compatible, we should export noting suffix servicename, eg: ${interface}:${version}\n+     */\n+    String NACOE_REGISTER_COMPATIBLE = \"nacos.register-compatible\";", "@@ -37,0 +38 @@ import java.util.HashMap;\n+import java.util.HashSet;", "@@ -73,0 +75 @@ import static org.apache.dubbo.common.constants.RegistryConstants.ENABLE_EMPTY_P\n+import static org.apache.dubbo.common.constants.RegistryConstants.NACOE_REGISTER_COMPATIBLE;", "@@ -110,3 +112,2 @@ public class NacosRegistry extends FailbackRegistry {\n-     * The separator for service name\n-     * Change a constant to be configurable, it's designed for Windows file name that is compatible with old\n-     * Nacos binary release(< 0.6.1)\n+     * The separator for service name Change a constant to be configurable, it's designed for Windows file name that is\n+     * compatible with old Nacos binary release(< 0.6.1)", "@@ -177 +177,0 @@ public class NacosRegistry extends FailbackRegistry {\n-                String serviceName = getServiceName(url);", "@@ -178,0 +179,13 @@ public class NacosRegistry extends FailbackRegistry {\n+\n+                Set<String> serviceNames = new HashSet<>();\n+                // by default servicename is \"org.apache.dubbo.xxService:1.0.0:\"\n+                String serviceName = getServiceName(url, false);\n+                serviceNames.add(serviceName);\n+\n+                // in https://github.com/apache/dubbo/issues/14075\n+                if (getUrl().getParameter(NACOE_REGISTER_COMPATIBLE, false)) {\n+                    // servicename is \"org.apache.dubbo.xxService:1.0.0\"\n+                    String compatibleServiceName = getServiceName(url, true);\n+                    serviceNames.add(compatibleServiceName);\n+                }\n+", "@@ -180 +193,2 @@ public class NacosRegistry extends FailbackRegistry {\n-                 *  namingService.registerInstance with {@link org.apache.dubbo.registry.support.AbstractRegistry#registryUrl}\n+                 *  namingService.registerInstance with\n+                 *  {@link org.apache.dubbo.registry.support.AbstractRegistry#registryUrl}", "@@ -185 +199,3 @@ public class NacosRegistry extends FailbackRegistry {\n-                namingService.registerInstance(serviceName, getUrl().getGroup(Constants.DEFAULT_GROUP), instance);\n+                for (String service : serviceNames) {\n+                    namingService.registerInstance(service, getUrl().getGroup(Constants.DEFAULT_GROUP), instance);\n+                }", "@@ -187,2 +203,2 @@ public class NacosRegistry extends FailbackRegistry {\n-                logger.info(\n-                        \"Please set 'dubbo.registry.parameters.register-consumer-url=true' to turn on consumer url registration.\");\n+                logger.info(\"Please set 'dubbo.registry.parameters.register-consumer-url=true' to turn on consumer \"\n+                        + \"url registration.\");", "@@ -201 +216,0 @@ public class NacosRegistry extends FailbackRegistry {\n-            String serviceName = getServiceName(url);", "@@ -203,2 +218,17 @@ public class NacosRegistry extends FailbackRegistry {\n-            namingService.deregisterInstance(\n-                    serviceName, getUrl().getGroup(Constants.DEFAULT_GROUP), instance.getIp(), instance.getPort());\n+\n+            Set<String> serviceNames = new HashSet<>();\n+            // by default servicename is \"org.apache.dubbo.xxService:1.0.0:\"\n+            String serviceName = getServiceName(url, false);\n+            serviceNames.add(serviceName);\n+\n+            // in https://github.com/apache/dubbo/issues/14075\n+            if (getUrl().getParameter(NACOE_REGISTER_COMPATIBLE, false)) {\n+                // servicename is \"org.apache.dubbo.xxService:1.0.0\"\n+                String serviceName1 = getServiceName(url, true);\n+                serviceNames.add(serviceName1);\n+            }\n+\n+            for (String service : serviceNames) {\n+                namingService.deregisterInstance(\n+                        service, getUrl().getGroup(Constants.DEFAULT_GROUP), instance.getIp(), instance.getPort());\n+            }", "@@ -233 +263,2 @@ public class NacosRegistry extends FailbackRegistry {\n-                 * namingService.getAllInstances with {@link org.apache.dubbo.registry.support.AbstractRegistry#registryUrl}\n+                 * namingService.getAllInstances with\n+                 * {@link org.apache.dubbo.registry.support.AbstractRegistry#registryUrl}", "@@ -271,2 +302,2 @@ public class NacosRegistry extends FailbackRegistry {\n-     * Since 2.7.6 the legacy service name will be added to serviceNames\n-     * to fix bug with https://github.com/apache/dubbo/issues/5442\n+     * Since 2.7.6 the legacy service name will be added to serviceNames to fix bug with\n+     * https://github.com/apache/dubbo/issues/5442", "@@ -293 +324,2 @@ public class NacosRegistry extends FailbackRegistry {\n-                                \"No aggregate listener found for url %s, this service might have already been unsubscribed.\",\n+                                \"No aggregate listener found for url %s, \"\n+                                        + \"this service might have already been unsubscribed.\",", "@@ -584 +616,2 @@ public class NacosRegistry extends FailbackRegistry {\n-                    \"Received empty url address list and empty protection is disabled, will clear current available addresses\");\n+                    \"Received empty url address list and empty protection is \"\n+                            + \"disabled, will clear current available addresses\");", "@@ -700 +733,4 @@ public class NacosRegistry extends FailbackRegistry {\n-    private String getServiceName(URL url) {\n+    private String getServiceName(URL url, boolean needCompatible) {\n+        if (needCompatible) {\n+            return getCompatibleServiceName(url, url.getCategory(DEFAULT_CATEGORY));\n+        }", "@@ -707,0 +744,4 @@ public class NacosRegistry extends FailbackRegistry {\n+    private String getCompatibleServiceName(URL url, String category) {\n+        return category + SERVICE_NAME_SEPARATOR + url.getCompatibleColonSeparatedKey();\n+    }\n+"]}]